<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Binary Adages - practices and principles</title><link href="https://rayalan.github.io/" rel="alternate"></link><link href="https://rayalan.github.io/feeds/practices-and-principles.atom.xml" rel="self"></link><id>https://rayalan.github.io/</id><updated>2023-11-07T00:00:00-05:00</updated><entry><title>Blame Free Retrospectivs</title><link href="https://rayalan.github.io/blame-free-retros.html" rel="alternate"></link><published>2023-11-07T00:00:00-05:00</published><updated>2023-11-07T00:00:00-05:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-11-07:/blame-free-retros.html</id><summary type="html">&lt;p&gt;I&amp;rsquo;m a huge fan of &lt;a href="https://www.blameless.com/blog/what-are-blameless-postmortems-do-they-work-how"&gt;blame-free retrospectives / postmortems&lt;/a&gt;. Why?&lt;/p&gt;
&lt;p&gt;Because I believe that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;High-trust environments are incredibly important to productivity in fields such as software development that involve a high degree of both judgement and technical complexity&lt;sup id="fnref:complex"&gt;&lt;a class="footnote-ref" href="#fn:complex"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;An essential part of high-trust environments is the assumption of good …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I&amp;rsquo;m a huge fan of &lt;a href="https://www.blameless.com/blog/what-are-blameless-postmortems-do-they-work-how"&gt;blame-free retrospectives / postmortems&lt;/a&gt;. Why?&lt;/p&gt;
&lt;p&gt;Because I believe that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;High-trust environments are incredibly important to productivity in fields such as software development that involve a high degree of both judgement and technical complexity&lt;sup id="fnref:complex"&gt;&lt;a class="footnote-ref" href="#fn:complex"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;An essential part of high-trust environments is the assumption of good intent by all parties.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In contrast, it&amp;rsquo;s really hard to understand what is happening in a world where everyone is trying to cover for themselves. And even worse is a world where management is using the guise of blame-free conversations to covertly gather evidence against specific individuals with a goal of blaming them for outcomes. I&amp;rsquo;ve been on the receiving end of that, and, unsurprisingly, it&amp;rsquo;s incredibly toxic.&lt;/p&gt;
&lt;h1 id="scope-or-lack-thereof"&gt;Scope (or lack thereof)&lt;/h1&gt;
&lt;p&gt;Even when postmortems are conducted blame free with the best intentions, though, there&amp;rsquo;s often a more subtle problem: &lt;em&gt;All of the players aren&amp;rsquo;t in the room.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;All of the players aren&amp;rsquo;t in the room.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, all of the team is in the room. But consider who else likely made decisions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Did the team have complete control over architecture?&lt;/li&gt;
&lt;li&gt;Did the team have complete control over their own priorities?&lt;/li&gt;
&lt;li&gt;If there were any inter-team dependencies, did the team have complete control over how those were resolved?&lt;/li&gt;
&lt;li&gt;Did the team choose their own budget and timelines?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In most companies, teams don&amp;rsquo;t have complete autonomy. There are company standards. There are pressing business priorities. Product needs new features to ship. A key initiative will be blocked if such-n-such doesn&amp;rsquo;t ship. Money is tight. Management wants to see results.&lt;/p&gt;
&lt;p&gt;And that means that teammates aren&amp;rsquo;t the only people who made decisions contributing to the outage. Someone decided that the increasingly complex monolith wasn&amp;rsquo;t worth splitting as the company grew. Someone decided that hiring more teammates wasn&amp;rsquo;t important. Someone decided that the company wasn&amp;rsquo;t going to offer 6 weeks of vacation a year as an incentive to attract the best people. Someone decided that the company focus was going to be the new feature launch, not testing and quality. Someone decided not to challenge the cultural norms around what was acceptable redundancy and prevention.&lt;/p&gt;
&lt;p&gt;Some of these decisions are certainly made by the team. And the team certainly could manage upward better. But, in every company I&amp;rsquo;ve heard of, some of those decisions are beyond the team. And yet I find blame-free retros rarely step into the bigger picture, instead focusing on the tactical decisions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Blame-free retros rarely step into the bigger picture, instead focusing on the tactical decisions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="was-the-failure-a-bad-outcome"&gt;Was the failure a bad outcome?&lt;/h1&gt;
&lt;p&gt;I once had a conversation with the C-suite that went like this:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Me: My team released a bug that cost us a five-figure amount from such-n-such date to such-n-so date, when we corrected the bug. Here&amp;rsquo;s a bit of technical background on what happened&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;C-suite: So what actions are being taken to prevent this from recurring in the future?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Me: Nothing. Here&amp;rsquo;s why&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So why no changes?&lt;/p&gt;
&lt;p&gt;From the postmortem, we&amp;rsquo;d released a software change where customers hadn&amp;rsquo;t been billed, resulting in a five-figure loss. There was no viable way of recouping those losses&lt;sup id="fnref:recoup"&gt;&lt;a class="footnote-ref" href="#fn:recoup"&gt;2&lt;/a&gt;&lt;/sup&gt;. And conveniently, customers don&amp;rsquo;t get upset with not being charged, so this was probably the most straight-forward cost calculation I&amp;rsquo;ve encountered.&lt;/p&gt;
&lt;p&gt;As is often the case, there was a complex history behind this bug &amp;ndash; prior decisions stacking on top of one another that contributed. I&amp;rsquo;d made my own contributions as team lead, such as incorrectly assuming what was common knowledge and focusing on more delegation. And there were other factors as well.&lt;/p&gt;
&lt;p&gt;The greater context of the bug was that company wanted a particular feature to market as soon as possible. And by cutting some corners, we&amp;rsquo;d successfully gotten the feature to market at least a month, possibly two months, earlier than expected. And each month earlier was worth about what the bug cost to the company. So it&amp;rsquo;s pretty easy to put together a chart summarizing possible outcomes:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time to market&lt;/th&gt;
&lt;th&gt;Shipped bug&lt;/th&gt;
&lt;th&gt;Net outcome&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-2 months&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2x profit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-2 months&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;1x profit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-1 months&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;1x profit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-1 months&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No profit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0 months&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No profit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0 months&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;1x loss&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So if we&amp;rsquo;d taken another week to ship the feature, that week needed to generate at least a 25% reduction in the chance the bug would ship in order to pay for itself. If we&amp;rsquo;d taken another 2 weeks to ship, those two weeks needed to generate at least a 50% chance to not ship the bug. And so on.&lt;/p&gt;
&lt;p&gt;Now clearly in hindsight, knowing exactly what to look for and why the bug was missed, the bug could have been easily caught. But in foresight, I think it&amp;rsquo;s pretty likely we could have taken a couple more months to ship and still missed the bug.&lt;/p&gt;
&lt;p&gt;And given that scenario, the most profitable decision was to ship the feature as soon as possible. Normally, there are other considerations, such as whether the bug was likely to repeat and how to avoid it in the future. However, given the particulars of the bug, it wasn&amp;rsquo;t likely to recur.&lt;/p&gt;
&lt;p&gt;Admittedly, this situation was atypical. But it highlights a really important question for a blame-free retrospective: Was this bug worth paying the price to prevent?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Was this bug worth paying the price to prevent?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;First, &lt;a href="https://about.gitlab.com/blog/2017/02/10/postmortem-of-database-outage-of-january-31/"&gt;some scenarios&lt;/a&gt; are so bad for the company that the risk needs to be basically zero. For comparison, there&amp;rsquo;s an &lt;a href="https://www.osti.gov/servlets/purl/1426902"&gt;interesting article&lt;/a&gt; about nuclear weapon tolerances and the complexity of calculating the actual risk. Most of us don&amp;rsquo;t handle nuclear weapons, but certain failure modes &amp;ndash; e.g., data leaks, data loss, prolonged outages &amp;ndash; may be just as catastrophic for a company. If so, I suggest it&amp;rsquo;s worth architecting the necessary protections, redundancies, and verifications deeply into the systems. That way, instead of being an afterthought vulnerable to being lost in the quest for speed, those checks are a &amp;ldquo;given&amp;rdquo; for the company&lt;sup id="fnref:givens"&gt;&lt;a class="footnote-ref" href="#fn:givens"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Secondly, the overall postmortem process shouldn&amp;rsquo;t just be about the team&amp;rsquo;s choices, but the context into which the team was placed.&lt;/p&gt;
&lt;p&gt;Finally, despite my reflections about a broader context, a blame-free mindset shared across the company is still essential to effectively evaluating what happened and what could go better next time.&lt;/p&gt;
&lt;p&gt;What else should have been my lessons learned?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:complex"&gt;
&lt;p&gt;Ideas like the &lt;a href="https://www.sixsigmadaily.com/what-is-an-andon-cord/"&gt;Andon cord&lt;/a&gt; suggest a similar idea is more broadly true, but speaking about best practices for postmortems at a cracker factory or in a political campaign is a bit beyond my expertise.&amp;#160;&lt;a class="footnote-backref" href="#fnref:complex" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:recoup"&gt;
&lt;p&gt;Basically, losses couldn&amp;rsquo;t be readily recouped because charging the customers retroactively would have led to bad publicity and far more customer service calls. It was better to eat the loss than to compound the problem.&amp;#160;&lt;a class="footnote-backref" href="#fnref:recoup" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:givens"&gt;
&lt;p&gt;This is, of course, very hard to do. Many companies don&amp;rsquo;t have an actual understanding of how much risk they are prepared to tolerate, and that tolerance can rapidly shift based on market conditions or personnel changes. I&amp;rsquo;ve found &lt;a href="https://www.amazon.com/How-Measure-Anything-Cybersecurity-Risk/dp/1119085292"&gt;&lt;em&gt;How to Measure Anything in Cybersecurity Risk&lt;/em&gt;&lt;/a&gt; a fantastic study on how to normalize the conversation.&amp;#160;&lt;a class="footnote-backref" href="#fnref:givens" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="knowledge"></category><category term="uncertainty"></category></entry><entry><title>A Tool -- Or a Puzzle?</title><link href="https://rayalan.github.io/silent-failures.html" rel="alternate"></link><published>2023-10-30T00:00:00-04:00</published><updated>2023-10-30T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-10-30:/silent-failures.html</id><summary type="html">&lt;p&gt;The other day I went to run my local blog server and got this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; pelican -r -l
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s not the normal output. Normally it spews some text about building articles, maybe a few lines about syntax errors, and a message about listening on port 8000.&lt;/p&gt;
&lt;p&gt;This time it just …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The other day I went to run my local blog server and got this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; pelican -r -l
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s not the normal output. Normally it spews some text about building articles, maybe a few lines about syntax errors, and a message about listening on port 8000.&lt;/p&gt;
&lt;p&gt;This time it just failed silently. No error. No message. Just returning to the prompt.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ugh.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After a moment&amp;rsquo;s thought, I remembered that I&amp;rsquo;d recently upgraded Python from 3.10 to 3.12, which probably had broken something. No worries, I have this handy-dandy readme that explains how to install the prerequisites for my blog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fantastic, everything is updated. Let&amp;rsquo;s run the server again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; pelican -r -l
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Wait, what? Still nothing?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Eventually, after some more poking, I discovered that my path still contained the path to the old Python 3.10 scripts. And although the Python 3.12 path was primary, I assume &lt;em&gt;something&lt;/em&gt; about the old install was interfering with running everything in 3.12.&lt;/p&gt;
&lt;p&gt;The main evidence? After I removed the old 3.10 path, everything started working. Hurray!&lt;/p&gt;
&lt;h1 id="tool-vs-puzzle"&gt;Tool vs. puzzle&lt;/h1&gt;
&lt;p&gt;Sometimes, I love these challenges. Can I carefully follow the cryptic instructions to make the technology work on not-quite-standard system?&lt;/p&gt;
&lt;p&gt;Success is a sign of expertise; something I can brag about with my fellow programmers when we&amp;rsquo;re discussing what bizarre realms we&amp;rsquo;ve traveled.&lt;/p&gt;
&lt;p&gt;But as I&amp;rsquo;ve studied user experience, the more I&amp;rsquo;ve grown to ponder: Why does software behave like this?&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t mean the specifics of this problem, the way that paths and imports and libraries intersected to produce this particular bizarre behavior. I mean, who wants this sort of complexity from their software?&lt;/p&gt;
&lt;p&gt;Has any developer ever sat down and thought &amp;ldquo;Now that I&amp;rsquo;ve upgraded my language, I want some bizarre interactions between the old and new installations so that my command silently fails with no error output? For that matter, has any developer ever wanted to mix library imports between Python versions?&lt;/p&gt;
&lt;p&gt;Yes, probably somewhere that&amp;rsquo;s a very useful capability for some scenario. But most of the time, &lt;a href="https://www.nngroup.com/articles/ten-usability-heuristics/"&gt;basic UX heuristics&lt;/a&gt; like &lt;em&gt;error prevention&lt;/em&gt; and &lt;em&gt;visibility of system status&lt;/em&gt; are far more important.&lt;/p&gt;
&lt;p&gt;After all, I&amp;rsquo;m trying to use my computer as a tool to accomplish work, not to entertain myself for an afternoon.&lt;/p&gt;
&lt;h1 id="a-modern-medieval-guild"&gt;A modern medieval guild&lt;/h1&gt;
&lt;p&gt;I don&amp;rsquo;t mean to pick on Python libraries &amp;ndash; although these are certainly easy targets. Not too long ago, I discovered that some operating systems don&amp;rsquo;t ship Python with pip &amp;ndash; and that it can&amp;rsquo;t be readily installed without &lt;code&gt;sudo&lt;/code&gt; because &lt;em&gt;distutils&lt;/em&gt; also isn&amp;rsquo;t shipped with the operating system. Again, I&amp;rsquo;m sure there&amp;rsquo;s a good reason for this &amp;ndash; security or modularity or intellectual property rights or something. But as an end user, it&amp;rsquo;s just pain and complexity for me (and, I suppose, gainful employment).&lt;/p&gt;
&lt;p&gt;Every language has its own collection of pain and misery, whether it is figuring out how to configure webpack or specifying the TypeScript configuration or passing library parameters to the C++ compiler.&lt;/p&gt;
&lt;p&gt;However, the frequency of this kind of pain, even in more modern tools&lt;sup id="fnref:modern"&gt;&lt;a class="footnote-ref" href="#fn:modern"&gt;1&lt;/a&gt;&lt;/sup&gt;, sometimes leads me to wonder if computer science is actually a medieval guild that carefully guards its knowledge through lots of obscure hoops. And once one masters enough hoops in a particular area, one can be a gainfully employeed guild member.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;And that, in turn, leads me to wonder what software development that was more fully centered on the user experience might look like&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The interface would deal with inputs, outputs, and costs, seamlessly covering over technical complexities such as databases, data types, CSS, parallelism, or CAP theorems. No &lt;a href="https://en.wikipedia.org/wiki/Leaky_abstraction"&gt;leaky abstractions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Simulate and visualize the software in any state (including errors or outages), making real-time adjustments to the behavior.&lt;/li&gt;
&lt;li&gt;Interact in natural human language with a deep understanding of real-world relationships. &amp;ldquo;Display the user&amp;rsquo;s address in a standard format&amp;rdquo; rather than having to deal with all the different ways that states, counties, oblasts, or even post office boxes are handled across the world.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately for software developers, even the most recent versions of Copilot don&amp;rsquo;t seem capable of offering that kind of help. At least, not yet.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:modern"&gt;
&lt;p&gt;Yes, there are advancements. More meaningful error messages. Automatic garbage collection. Widespread IntelliSense. But that&amp;rsquo;s not to say that there aren&amp;rsquo;t a lot of sharp edges.&amp;#160;&lt;a class="footnote-backref" href="#fnref:modern" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="knowledge"></category><category term="uncertainty"></category></entry><entry><title>Vocabulary</title><link href="https://rayalan.github.io/vocabulary.html" rel="alternate"></link><published>2023-10-23T00:00:00-04:00</published><updated>2023-10-23T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-10-23:/vocabulary.html</id><summary type="html">&lt;p&gt;One of my favorite jokes is that there are only &lt;a href="https://martinfowler.com/bliki/TwoHardThings.html"&gt;two hard problems in programming&lt;/a&gt; &amp;ndash; naming things, caching, and off-by-one errors.&lt;/p&gt;
&lt;h1 id="a-problem-discovered"&gt;A problem - discovered&lt;/h1&gt;
&lt;p&gt;I particularly identify with that first problem &amp;ndash; how do you name something well? A few years into my career, I realized that I&amp;rsquo;d picked up …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my favorite jokes is that there are only &lt;a href="https://martinfowler.com/bliki/TwoHardThings.html"&gt;two hard problems in programming&lt;/a&gt; &amp;ndash; naming things, caching, and off-by-one errors.&lt;/p&gt;
&lt;h1 id="a-problem-discovered"&gt;A problem - discovered&lt;/h1&gt;
&lt;p&gt;I particularly identify with that first problem &amp;ndash; how do you name something well? A few years into my career, I realized that I&amp;rsquo;d picked up a bad habit: I wasn&amp;rsquo;t thoroughly learning vocabulary. I knew the concepts well, but I wasn&amp;rsquo;t understanding what a &lt;em&gt;monad&lt;/em&gt; was or the difference between a &lt;em&gt;statement&lt;/em&gt; and an &lt;em&gt;expression&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This didn&amp;rsquo;t bother me in day-to-day programming &amp;ndash; the compiler certainly never complained about my ignorance. And most documentation is completely comprehensible without understanding a closure and an anonymous function.&lt;/p&gt;
&lt;p&gt;I did find, though, two problems.&lt;/p&gt;
&lt;p&gt;First, it hampered my ability to communicate precisely with my colleagues. It&amp;rsquo;s a whole lot less precise to say &amp;ldquo;implement our tools in a standalone fashion so they can be upgraded independently&amp;rdquo; than it is to say something like &amp;ldquo;implement a hermetically sealed approach to tooling.&amp;rdquo; Both statements may communicate approximately the same intent, but using the precise vocabulary links my intent to similar work done by others rather than leaving my co-workers guessing about whether I&amp;rsquo;m referencing my own idea, a standard industry practice, or something else.&lt;/p&gt;
&lt;p&gt;Second, search engines are terrible when vague common words are substituted for industry terminology. The search results for &amp;ldquo;monorepo tooling&amp;rdquo; and &amp;ldquo;support multiple projects in one repo&amp;rdquo; are radically different. And the former one is far more useful, tapping far more quickly into the resources written by experts &amp;ndash; and who, because they are experts, use the right terminology.&lt;/p&gt;
&lt;p&gt;When I was lucky, my amateur lingo would find a critical word in one of the results, and I could refine my search. When I wasn&amp;rsquo;t lucky, I&amp;rsquo;d live happily oblivious to answers that could have dramatically improved my work.&lt;/p&gt;
&lt;h1 id="a-problem-solved"&gt;A problem - solved?&lt;/h1&gt;
&lt;p&gt;So I did what any diligent engineer would do &amp;ndash; I knuckled down and worked on my vocabulary. I paid attention to what others said, read more, and practiced using the terms in context, even if it was just explaining them to myself.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Problem solved, right?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Not so fast. First, I realized that terms are often used with varying levels of precision. For some people, a unit test means &amp;ldquo;a fast low-dependency test&amp;rdquo;. For others, it means specifically testing a single function or method with no outside dependency.&lt;sup id="fnref:unit"&gt;&lt;a class="footnote-ref" href="#fn:unit"&gt;1&lt;/a&gt;&lt;/sup&gt; For some people, invoking a specific technical term meant &amp;ldquo;something along these lines.&amp;rdquo; For others, the same technical term meant a very exact implementation &amp;ndash; &lt;em&gt;this&lt;/em&gt; and only &lt;em&gt;this&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Compounding the issue is that the use of technical jargon masks the differing ideas. After all, the use of the technical term implies knowledge and precision, right? Nobody would every use a technical term if it wasn&amp;rsquo;t appropriately precise and meaningful, right? And certainly nobody would ever use a term that they didn&amp;rsquo;t fully understand, right?&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;Three quick takeaways from this journey for me:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I still ask &amp;ldquo;What do you mean by &lt;em&gt;term&lt;/em&gt;?&amp;rdquo; all the time. But now I ask less because I don&amp;rsquo;t know what I would mean by the term, and more because I&amp;rsquo;m not sure what others mean.&lt;/li&gt;
&lt;li&gt;Knowing vocabulary has made me more conversant in a number of concepts and thus helped me be a better engineer.&lt;/li&gt;
&lt;li&gt;Naming things &amp;ndash; a.k.a. vocabulary &amp;ndash; really is one of the two hard problems of computer science.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What other lessons come to mind?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:unit"&gt;
&lt;p&gt;And no, those aren&amp;rsquo;t the only definitions. Given the multitude of definitions for types of tests, I&amp;rsquo;ve really grown fond of the &lt;a href="https://medium.com/tsengineering/fast-and-slow-tests-bbaa3d7267e8"&gt;fast or slow differentiation&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:unit" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="knowledge"></category><category term="uncertainty"></category></entry><entry><title>Sustainable Complexity</title><link href="https://rayalan.github.io/sustainable-complexity.html" rel="alternate"></link><published>2023-10-16T00:00:00-04:00</published><updated>2023-10-16T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-10-16:/sustainable-complexity.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Just use 0.0.0.0.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hypothetical pragmatic engineer, on the fastest solution.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Suppose you and a friend are doing a small startup, coding away on a prototype. It&amp;rsquo;s late at night at the local coffee shop. Your co-founder &amp;ndash; Janet &amp;ndash; wants to see your prototype feature page so she …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Just use 0.0.0.0.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hypothetical pragmatic engineer, on the fastest solution.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Suppose you and a friend are doing a small startup, coding away on a prototype. It&amp;rsquo;s late at night at the local coffee shop. Your co-founder &amp;ndash; Janet &amp;ndash; wants to see your prototype feature page so she can grab some screenshots for some fundraising efforts. What&amp;rsquo;s the fastest way to share so you can get back to coding?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why, host the website on 0.0.0.0 and point Janet at your public IP address, of course.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(My apologies for the heart attack I probably just gave to any security-minded folks&lt;sup id="fnref:security"&gt;&lt;a class="footnote-ref" href="#fn:security"&gt;1&lt;/a&gt;&lt;/sup&gt;.)&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s how quickly one moves into the complexity of juggling speed vs. sustainability. It might be reasonable to argue that any particular custom website publicly open for a few minutes at any particular coffee shop isn&amp;rsquo;t a particularly high risk. Then again, what&amp;rsquo;s the plan if a ransomware attack finds an opening and encrypts the disk? How much does the startup have backed up?&lt;/p&gt;
&lt;p&gt;The problem, of course, is that this decision likely isn&amp;rsquo;t just for a few minutes now. It&amp;rsquo;s likely to become a habit. &lt;code&gt;0.0.0.0&lt;/code&gt; gets added to a configuration script somewhere and forgotten about. The startup is successful, adds in a few more employees. The startup gets a VPN. Everybody&amp;rsquo;s busy, nobody thinks about why it is so easy to see one another&amp;rsquo;s work. And then one day, someone makes some other misconfiguration. Or perhaps a vulnerability in the underlying web application framework is discovered. Maybe the surface area of the attack hasn&amp;rsquo;t quite reached critical mass. Maybe it will take one more step &amp;ndash; maybe someone puts a version of the prototype on the web for an important customer to try out &amp;ndash; before all individual vulnerabilities tie together to create a exploitable hole. But the risk is accumulating.&lt;/p&gt;
&lt;h1 id="tradeoffs"&gt;Tradeoffs&lt;/h1&gt;
&lt;p&gt;Security isn&amp;rsquo;t the only non-functional requirement that has this trade-off. Here are a few more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Maintainability&lt;/em&gt;: As long as there&amp;rsquo;s no employee turnover, the team can move faster by not writing down institutional knowledge. And much of the documentation becomes outdated almost as soon as the commit is merged.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Testability&lt;/em&gt;: How much of the code needs to be tested? How much do the expectations of third-party libraries need to be tested? On an Agile, fast-moving team, how much of that code will actually last long enough for tests to matter? Will the right things even be tested?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Permanence&lt;/em&gt;: How long is the solution intended to last anyway? Maybe the whole goal is to prove to investors that this idea has legs. In that case, vendor lock-in really doesn&amp;rsquo;t matter. But if the idea really does have legs, will the company have the discipline to go back and create a longer-term solution? When the company is worth millions, will anyone even remember those vendor-specific dependencies or the risk they pose to the company?&lt;sup id="fnref:graveyard"&gt;&lt;a class="footnote-ref" href="#fn:graveyard"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="architecture"&gt;Architecture&lt;/h1&gt;
&lt;p&gt;Even architecture itself is one of these non-functional requirements with trade-offs. Consider how the classic spaghetti monolith comes to be. At first, it&amp;rsquo;s easy to build:&lt;/p&gt;
&lt;div class="mermaid"&gt;

flowchart TD

subgraph System
  e[Everything goes here]
end
&lt;/div&gt;

&lt;p&gt;But over time, that approach starts getting more and more complex until we&amp;rsquo;re well on our way to classic &lt;a href="https://en.wikipedia.org/wiki/Spaghetti_code"&gt;spaghetti code&lt;/a&gt; where everything is highly interconnected and it&amp;rsquo;s hard to modify or add pieces without understanding all the other pieces.&lt;/p&gt;
&lt;div class="mermaid"&gt;

flowchart TD

subgraph System
  a[The first features]
  b[An initial UI layer]
  c[A second UI for bulk uploads]
  d[Scripts for backing up and restoring]
  e[Data processing for a new vendor]
  f[Data processing for another incompatible vendor]
end

a --&gt; b
b --&gt; c
b --&gt; e
b --&gt; f
d --&gt; a
d --&gt; e
f --&gt; e
f --&gt; d
e --&gt; d
&lt;/div&gt;

&lt;p&gt;And now every time anyone changes anything, there are side effects. The whole system might come down just because some developer updated the way the system interacts with the proprietary system and that has an unexpected side effect on another data system, which cascades into a rendering layer that wasn&amp;rsquo;t properly isolated.&lt;/p&gt;
&lt;p&gt;Hrm, that&amp;rsquo;s not looking so promising. What if we start off with a different architecture? Maybe using light-weight lambdas? Maybe we get a first pass of a system like this:&lt;/p&gt;
&lt;div class="mermaid"&gt;

flowchart TD

subgraph APIs
  a[Route 1]
  b[Route 2]
  c[Route 3]
  d[Route 4]
end

subgraph Data storage
  mq&gt;Message queue]
  db[(Data storage)]
end

subgraph Backend processing
  ba[Backend function 1]
  bb[Backend function 2]
  bc[Backend function 3]
end

a --&gt;|publish| mq
b --&gt;|publish| mq
c --&gt;|publish| mq
d --&gt;|publish| mq
a &lt;--&gt; db
b &lt;--&gt; db
c &lt;--&gt; db
d &lt;--&gt; db

mq --&gt;|via subscription| ba
mq --&gt;|via subscription| bb
mq --&gt;|via subscription| bc
ba &lt;--&gt; db
bb &lt;--&gt; db
bc &lt;--&gt; db
&lt;/div&gt;

&lt;p&gt;So this looks pretty manageable at first. Maybe a bit more complex, but not bad. At least there are clearly defined interface layers.&lt;/p&gt;
&lt;p&gt;But how is this approach going to scale? If this is the first feature, what&amp;rsquo;s it going to look like after a second feature? A third? A tenth? Even this pretty simple mockup with a few APIs, a few back-end behaviors, a database, and a message queue for coordinating is starting to look like &lt;a href="https://medium.com/codex/managing-serverless-spaghetti-c2fb1a7db73e"&gt;serverless spaghetti&lt;/a&gt;. Sure, each piece can be modified, built, tested, and deployed individually. But because it is their orchestrated unified behavior that matters, a change to any part can disrupt the whole. Moving the interconnection from within a giant monolith to being distributed across a serverless architecture hasn&amp;rsquo;t actually solved the problem; it&amp;rsquo;s just transformed where the complexity lies.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;I don&amp;rsquo;t believe there are any easy answers. There&amp;rsquo;s no up-front architecture that matches every step in an application&amp;rsquo;s life journey, from prototype to first release to massive hit to sunset. Nor is ChatGPT going to introduce a &amp;ldquo;refactor architecture&amp;rdquo; button anytime soon.&lt;/p&gt;
&lt;p&gt;But I do believe there are a few guiding principles. Here are two:&lt;/p&gt;
&lt;h2 id="budgeting-for-changing-non-functional-requirements"&gt;Budgeting for changing non-functional requirements&lt;/h2&gt;
&lt;p&gt;Business leadership needs to understand and budget for changing non-functional requirements. Architectural choices should be tightly calibrated against the business objectives. If the company wants a prototype for internal purposes, it may not need any formal architecture. But when it becomes a paid service that needs 24-7 reliability, that prototype architecture won&amp;rsquo;t work any more.&lt;/p&gt;
&lt;p&gt;Business leadership also need to understand that, by and large, the cost is an unknown. When the decision is made to build for aesthetics and not worry about load time, the non-functional requirement becomes &amp;ldquo;load time doesn&amp;rsquo;t really matter as long as nobody complains.&amp;rdquo; After a year of developing, what will it take to achieve highly responsive load times of sub-200 milliseconds? Is it just a matter of optimizing a few routes? Or perhaps adding a cache? Or will the whole data pipeline need to be redesigned? Perhaps the choice of a single-page application is too slow for this problem, and a new approach is needed?&lt;/p&gt;
&lt;p&gt;This understanding isn&amp;rsquo;t easy; business leadership often focuses on tangibles like features, monthly active users, and revenue. But it&amp;rsquo;s essential for them to understand that every non-functional requirement adds complexity, and changing the non-functional requirements typically adds a cost that must be paid.&lt;sup id="fnref:debt"&gt;&lt;a class="footnote-ref" href="#fn:debt"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="architect-for-no-red-tape"&gt;Architect for no red tape&lt;/h2&gt;
&lt;p&gt;One of the great strengths of well-functioning Agile is that it gives teams the power to execute. Handoffs between humans are inherently slow, and eliminating them is one of the best ways to make everything move faster.&lt;/p&gt;
&lt;p&gt;The problem is that modern software engineering has a lot of domain-specific knowledge. How many software engineers are top-notch security engineers? Kubernetes specialists? With Helm and Terraform knowledge? What about the CI/CD system? Internationalization? And fluent in diagnostics through OpenTelemetry and the ELK stack?&lt;/p&gt;
&lt;p&gt;And this specialization means some sort of coordination is required. I&amp;rsquo;m a huge fan of &lt;a href="https://teamtopologies.com/key-concepts"&gt;Team Topologies&lt;/a&gt; which reverse engineers &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_law"&gt;Conway&amp;rsquo;s Law&lt;/a&gt;. That is, instead of how a company works being decided by its org chart, the org chart is decided by how the company should work.&lt;/p&gt;
&lt;p&gt;And this is where architecture comes in. What specializations need to exist within the company? And how will they interact with each team in a way that lets the team quickly deliver changes while still making use of their specialized knowledge?&lt;/p&gt;
&lt;p&gt;One particular idea comes to mind here: I&amp;rsquo;m a huge fan of &amp;ldquo;bottleneck&amp;rdquo; points in architecture that are hard to change, but provide certain guarantees. For example, &lt;a href="https://docs.nginx.com/nginx-management-suite/nim/previous-versions/v1/getting-started/auth/#jwt-auth"&gt;teach nginx to use JWT authentication&lt;/a&gt; and then require nginx as an intermediary before each application. Now there&amp;rsquo;s a guarantee for each application that all calls have validated JWT tokens. This isn&amp;rsquo;t the only guarantee needed to operate securely&lt;sup id="fnref:only"&gt;&lt;a class="footnote-ref" href="#fn:only"&gt;4&lt;/a&gt;&lt;/sup&gt;, but a few such bottlenecks can go a long way to simplify the day-to-day cognitive load of development while also providing a robust non-functional requirement &amp;ndash; in this case, around security authentication.&lt;/p&gt;
&lt;p&gt;How else can engineers juggle the complexities of non-functional requirements in a sustainable manner?&lt;/p&gt;
&lt;script src="https://unpkg.com/mermaid/dist/mermaid.min.js"&gt;&lt;/script&gt;
&lt;script&gt;mermaid.initialize({startOnLoad:true});&lt;/script&gt;

&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:security"&gt;
&lt;p&gt;For those who don&amp;rsquo;t know, the 0.0.0.0 mask makes the site accessible to anyone who can reach the computer. A small startup operating out of a coffee shop likely doesn&amp;rsquo;t have a VPN or other airgap, making the website &amp;ndash; and any associated vulnerabilities &amp;ndash; accessible to anyone on the coffee shop&amp;rsquo;s network &amp;ndash; or anyone who has compromised the network.&amp;#160;&lt;a class="footnote-backref" href="#fnref:security" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:graveyard"&gt;
&lt;p&gt;The &lt;a href="https://killedbygoogle.com/"&gt;Google Graveyard&lt;/a&gt; is infamous, but I&amp;rsquo;m surprised how many other popular libraries and tools don&amp;rsquo;t make it. They get supplanted, abandoned, or acquired. Perhaps someone decides the current open source model isn&amp;rsquo;t profitable. Or maybe someone just decides to take their marbles and go home.&amp;#160;&lt;a class="footnote-backref" href="#fnref:graveyard" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:debt"&gt;
&lt;p&gt;Sometimes this cost is paid in technical debt, which typically manifests with slower teams over time making more mistakes.&amp;#160;&lt;a class="footnote-backref" href="#fnref:debt" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:only"&gt;
&lt;p&gt;Solving authentication, for example, doesn&amp;rsquo;t guarantee authorization to see particular data or take a particular action.&amp;#160;&lt;a class="footnote-backref" href="#fnref:only" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="uncertainty"></category><category term="architecture"></category></entry><entry><title>The Three Questions</title><link href="https://rayalan.github.io/the-three-questions.html" rel="alternate"></link><published>2023-10-09T00:00:00-04:00</published><updated>2023-10-09T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-10-09:/the-three-questions.html</id><summary type="html">&lt;p&gt;I&amp;rsquo;m a bit of a natural contrarian.&lt;/p&gt;
&lt;p&gt;A few years back, a coworker gave an enthusiastic presentation over how amazing Pixar&amp;rsquo;s approach to innovation was, and by implication, how our software development department should adapt the same approach that Pixar described in the book &lt;a href="https://www.amazon.com/Innovate-Pixar-Way-Corporate-Playground/dp/0071638938"&gt;&lt;em&gt;Innovate the Pixar Way …&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;rsquo;m a bit of a natural contrarian.&lt;/p&gt;
&lt;p&gt;A few years back, a coworker gave an enthusiastic presentation over how amazing Pixar&amp;rsquo;s approach to innovation was, and by implication, how our software development department should adapt the same approach that Pixar described in the book &lt;a href="https://www.amazon.com/Innovate-Pixar-Way-Corporate-Playground/dp/0071638938"&gt;&lt;em&gt;Innovate the Pixar Way&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t know much about Pixar, and I&amp;rsquo;d never read the book. So my question was: Did the book discuss any prerequisites or requirements for this approach to work? in other words, is this approach really a one-size-fits-all solution for both large movie companies and small software development companies?&lt;/p&gt;
&lt;p&gt;In the years since then, the vaunted &amp;ldquo;Pixar Way&amp;rdquo; hasn&amp;rsquo;t been nearly so successful (see &lt;a href="https://screenrant.com/pixar-movies-what-went-wrong-problems-explained/"&gt;this article&lt;/a&gt; for one take).&lt;/p&gt;
&lt;p&gt;I still know almost nothing about Pixar, but I&amp;rsquo;ve pondered what the right response is. Here are three takes:&lt;/p&gt;
&lt;h1 id="selection-sampling-bias"&gt;Selection (sampling) bias&lt;/h1&gt;
&lt;p&gt;A classic example of sampling bias is to interview a hundred successful startups about how they survived when others fail, look for similarities, and then attribute the startups&amp;rsquo; success to those attitudes and behaviors. Sounds great, right?&lt;/p&gt;
&lt;p&gt;Not so fast; it&amp;rsquo;s possible that all the failed startups also exhibited those same qualities. So unless failed startups are also surveyed, it&amp;rsquo;s easy to report a characteristic that both successful and failed startups share as a characteristic of a successful startup.&lt;/p&gt;
&lt;p&gt;Another variation of this is to e-mail 50,000 people that the stock market will go up next week, and another 50,000 people that the stock market will go down. The next week, look at what the stock market did. Drop the people who received the mistaken prediction. Then e-mail half of the remaining people that the stock market will go up, and the other half that it will go down.&lt;/p&gt;
&lt;p&gt;Repeat this step a few times, and there will be several hundred people who you can reach out to and say &amp;ldquo;Look at my track record; I correctly predicted the stock market every week for two months &amp;ndash; wouldn&amp;rsquo;t you like to invest your money with me?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;By hiding the entirety of the track record, it&amp;rsquo;s easy to generate the illusion of expertise.&lt;/p&gt;
&lt;h1 id="correlation-is-not-causation"&gt;Correlation is not causation&lt;/h1&gt;
&lt;p&gt;There&amp;rsquo;s a &lt;a href="https://en.wikipedia.org/wiki/Questionable_cause"&gt;whole page for logical fallacies linked to correlation and causation on Wikipedia&lt;/a&gt;. There are also some fascinating studies on how powerful the illusion of doing something can be for causing change &amp;ndash; for example, there&amp;rsquo;s an &lt;a href="https://www.medicalnewstoday.com/articles/306437"&gt;article&lt;/a&gt; discussing the effectiveness of placebo drugs.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll just add that many corporate structures incentivize turning correlation into causation. After all, if a leader isn&amp;rsquo;t successfully making decisions, why keep them on the payroll? And so leaders are heavily motivated to find causal relationships between their actions and good outcomes &amp;ndash; and to neglect correlation between their actions and suboptimal changes.&lt;/p&gt;
&lt;p&gt;And, of course, I imagine it&amp;rsquo;s a lot more fun to write about how my brilliant decisions led a company to greatness than to write the sequel about how those same decisions just happened to work for those particular circumstances but might not be more widely applicable.&lt;/p&gt;
&lt;h1 id="mark-twain"&gt;Mark Twain&lt;/h1&gt;
&lt;p&gt;And then there&amp;rsquo;s the underlying problem that data is just messy, even with the best intentions. Reality is often complex and doesn&amp;rsquo;t tell neat stories. It&amp;rsquo;s fun to write the blog article where the trend line on a major metric changes at the exact moment, but that&amp;rsquo;s not always the story.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are three kinds of lies: lies, damned lies, and statistics.&lt;/p&gt;
&lt;p&gt;Maybe Mark Twain (&lt;a href="https://en.wikipedia.org/wiki/Lies,_damned_lies,_and_statistics"&gt;source&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There&amp;rsquo;s the question of how accurate the underlying data is. Maybe the reworked Android app doesn&amp;rsquo;t report data through the old system any more. Maybe the graph only tracks error rates from the server point of view, not from the client point of view. Or maybe the system is throwing out large values as being &amp;ldquo;unrealistic,&amp;rdquo; masking a key system problem. I&amp;rsquo;ve seen all of these &amp;ndash; and more &amp;ndash; happen.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;One of my favorite engineering jokes is that an engineer has two excuses to avoid work they don&amp;rsquo;t like. First, the idea is technically impossible. And secondly, if that excuse fails, it is technically possible &amp;ndash; but the solution will cost way too much.&lt;/p&gt;
&lt;p&gt;Sometime I wonder if an emphasis on data-driven decision making has replaced &amp;ldquo;it&amp;rsquo;s technically impossible&amp;rdquo; with &amp;ldquo;the data doesn&amp;rsquo;t support it,&amp;rdquo; where data is being unconscientiously selected to support the opinion I already have.&lt;/p&gt;
&lt;p&gt;To counter-act this, my three favorite questions are:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;So what?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But is that really the case?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first two are exploratory, seeking out the causation and correlation. But the third one is my nudge to step back and consider the bigger picture: Does the picture make sense? Do I have the right data? What technical choices might be distorting the data? It&amp;rsquo;s the attempt to not just accept an answer because it is the accepted wisdom, but actually evaluate if and how the common wisdom applies to my scenario.&lt;/p&gt;
&lt;p&gt;And as a final note, I want to highly recommend &lt;em&gt;&lt;a href="https://www.amazon.com/How-Measure-Anything-Intangibles-Business/dp/1118539273"&gt;How to Measure Anything&lt;/a&gt;&lt;/em&gt; by Douglas Hubbard. The book helped me change how I measure in many business contexts.&lt;/p&gt;
&lt;p&gt;With that, I encourage my readers to ponder if what I&amp;rsquo;ve said is really the case.&lt;/p&gt;</content><category term="practices and principles"></category><category term="management"></category><category term="knowledge"></category><category term="uncertainty"></category></entry><entry><title>Calibrating Expectations</title><link href="https://rayalan.github.io/calibrating-terms.html" rel="alternate"></link><published>2023-10-02T00:00:00-04:00</published><updated>2023-10-02T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-10-02:/calibrating-terms.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;You&amp;rsquo;re all doing amazing work. I can&amp;rsquo;t believe how much is getting done and everything you are accomplishing.&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Some engineering leader in some context, fairly routinely.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My thought process goes something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has the definition of amazing changed recently? &lt;em&gt;Checks Google.&lt;/em&gt; Nope, still &amp;ldquo;causing great surprise or …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;You&amp;rsquo;re all doing amazing work. I can&amp;rsquo;t believe how much is getting done and everything you are accomplishing.&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Some engineering leader in some context, fairly routinely.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My thought process goes something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has the definition of amazing changed recently? &lt;em&gt;Checks Google.&lt;/em&gt; Nope, still &amp;ldquo;causing great surprise or wonder; astonishing.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Okay, recent brain injury or trauma?&lt;/li&gt;
&lt;li&gt;No? Unfamiliar with the field of software engineering?&lt;/li&gt;
&lt;li&gt;Still no? Perhaps the &lt;a href="https://en.wikipedia.org/wiki/Pod_People_(Invasion_of_the_Body_Snatchers)"&gt;pod people&lt;/a&gt; invaded?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, so aliens aside, what&amp;rsquo;s happening here?&lt;/p&gt;
&lt;h1 id="low-wonder"&gt;Low wonder&lt;/h1&gt;
&lt;p&gt;First, I&amp;rsquo;m simply a low wonder person, especially in areas that I understand.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Reusable rockets.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yep, I find recoverable rockets amazing. Shoot them far away, land them without a fireball or metal pancake, and then do it again and again? That&amp;rsquo;s amazing!&lt;/p&gt;
&lt;p&gt;Of course, I know very little about rockets &amp;ndash; I know a few basic physics principles like &amp;ldquo;go up ==&amp;gt; come down&amp;rdquo; and &amp;ldquo;go far up ==&amp;gt; come down fast&amp;rdquo; and &amp;ldquo;fast thing + earth ==&amp;gt; earth + not much left.&amp;rdquo; And perhaps that for most of my parents&amp;rsquo; lifetime, rockets were largely (entirely?) single use, and often reentry vehicles landed in the ocean.&lt;/p&gt;
&lt;p&gt;So it&amp;rsquo;s pretty easy to impress me with these rockets making precise landings at precise locations such as the middle of a barge. Is it actually hard? I don&amp;rsquo;t know (but probably &amp;ndash; it is rocket science, after all).&lt;/p&gt;
&lt;p&gt;Software engineering, on the other hand, is not a mystery to me. I know what I can do. I have a lively imagination. And I can multiply. So I can easily envision what thirty or fifty or a hundred of me could achieve&lt;sup id="fnref:ego"&gt;&lt;a class="footnote-ref" href="#fn:ego"&gt;1&lt;/a&gt;&lt;/sup&gt;. And usually whatever the company has done is less than what I can envision a horde of Alan-clones achieving.&lt;/p&gt;
&lt;p&gt;Beyond that, though, I also know all the holes. I know that despite &amp;ldquo;graceful degradation&amp;rdquo; being one of the requirements, there are 153 ways that it can fail without any degradation, graceful or otherwise. I know that the graphics aren&amp;rsquo;t scalable, so they only look right at the demo resolutions. I know that the whole data storage approach will have to be rewritten before launch because it can&amp;rsquo;t handle much more than the demo load. And I know that half the metrics are missing key information.&lt;/p&gt;
&lt;p&gt;So while the product looks good, the actual product isn&amp;rsquo;t exactly what is being seen. Whether or not that matters is a different question, which brings us to&amp;hellip;&lt;/p&gt;
&lt;h1 id="world-class"&gt;&amp;ldquo;World class&amp;rdquo;&lt;/h1&gt;
&lt;p&gt;What is meant when we describe software as &amp;ldquo;excellent&amp;rdquo; or &amp;ldquo;world class&amp;rdquo;? Well, a world-class athlete is one who competes on a world stage &amp;ndash; maybe in the Olympics or the World Cup. A world-class chef is one who makes the tastiest food &amp;ndash; perhaps a five-star Michelin chef.&lt;/p&gt;
&lt;p&gt;Even here, the definition is a bit fuzzy &amp;ndash; what if someone competes in the Olympics, but always places last? Could the runners-up to the Olympics be considered world class? What if I really like Joe&amp;rsquo;s taco truck and dislike foie gras? Does a bunch of people disagreeing with me really make the taco any less a world-class dish?&lt;/p&gt;
&lt;p&gt;But the idea of a world-class athlete or dish is really clear, even if the specifics are a bit fuzzy.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The field of software is far worse.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What does it mean for software to be the best in the world? Cost? Low time to develop? Working as designed? Working as expected? Working as desired? Easy to modify? Easy to understand? Reliable? Reliable in extreme conditions? Something else?&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve never had to design software, for example, that reliably worked in Antarctica when operated by shivering people in thick gloves. And yet, I bet that some software is designed for those conditions. Does that mean that such software is more world class than what I&amp;rsquo;ve written? Would my software even be better if designed for such an environment, or would the compromises needed to function in such extremes undermine other aspects of my work?&lt;/p&gt;
&lt;p&gt;Worse yet, the definition of excellence in software changes frequently, often on the same project. Sometimes leaders will talk about the push for excellence. Then the budget cuts come, a new leader takes over, and the push is for delivering whatever value has been achieved and moving on to the next project.&lt;/p&gt;
&lt;h1 id="variations"&gt;Variations&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;All of you should watch this video.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Alan&amp;rsquo;s re-creation of an excited coworker, after learning something awesome.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This style of communication isn&amp;rsquo;t just about praise. For example, has a coworker ever said something like?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Everyone should read this book.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But is that really the case? Almost certainly not. The book may have been a great book. It may have really connected with someone. Does that really mean it changed that coworker&amp;rsquo;s work? Probably not.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a table summarizing my observations:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Observation&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Coworkers who read books&lt;/td&gt;
&lt;td&gt;Lots and lots&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Coworkers who read lots of books&lt;/td&gt;
&lt;td&gt;Many&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Coworkers significantly changed by a book&lt;/td&gt;
&lt;td&gt;0ish&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In short, my observation is that people often believe that the short-term impact of learning is far higher than it actually is.&lt;/p&gt;
&lt;p&gt;Of course, sometimes it isn&amp;rsquo;t just individuals giving their opinion, but part of a group narrative. One time, my company implemented a recurring &amp;ldquo;vital&amp;rdquo; training for aspiring leaders (basically, anyone in management plus a few others). Executives frequently spoke about how &amp;ldquo;essential&amp;rdquo; this training was. The presenters highlighted how &amp;ldquo;incredibly valuable&amp;rdquo; this opportunity was. And my boss thought it was &amp;ldquo;really important&amp;rdquo; (and mandatory) that I attend.&lt;/p&gt;
&lt;p&gt;The material was solid, but I already had an intellectual understanding of most of it, and the company&amp;rsquo;s training process didn&amp;rsquo;t provide needed support for learning to apply the material well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No psychologically safe space to talk about specific challenges or struggles or concerns.&lt;/li&gt;
&lt;li&gt;No reduced workload so that attendees had the necessary time to practice the skills being taught.&lt;/li&gt;
&lt;li&gt;None of the managers or senior leadership (including my boss) seemed to actually care if the attendees grew in these areas; they had their own priorities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Meanwhile, the feedback I was getting from those around me was that I needed to work on other areas &amp;ndash; like having too much on my plate&lt;sup id="fnref:growth"&gt;&lt;a class="footnote-ref" href="#fn:growth"&gt;2&lt;/a&gt;&lt;/sup&gt;. So I tried to convince my boss to let me skip the trainings. Oh no, it was critically important that I be there &amp;ndash; but irrelevant whether not I was actually growing or well-supported in mastering these concepts.&lt;/p&gt;
&lt;p&gt;Looking back, my assessment was on point: For most of the people in that meeting, it wasn&amp;rsquo;t important or vital or essential. No one I knew visibly changed how they led or managed because of that time.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;&lt;a href="./learning-to-learn.md"&gt;Intentional directed learning&lt;/a&gt; and growth matters. Likewise, communication is a challenge, especially when mixing cultures, generations, and backgrounds. It&amp;rsquo;s a wonder it works at all.&lt;/p&gt;
&lt;p&gt;Here are a few adjustments I make to better align in these situations:&lt;/p&gt;
&lt;h2 id="communication-calibration"&gt;Communication calibration&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Some people like to use hyperbolic praise; give them space to do so.&lt;/li&gt;
&lt;li&gt;Cultivate a vocabulary of praise and encouragement that is not dependent on wonder. I&amp;rsquo;ve written &lt;a href="/my-best-managers.md"&gt;elsewhere&lt;/a&gt; about the importance of thoughtful reviews, and that principle applies more broadly here: Can I point to specific praiseworthy behaviors and connect the dots to specific praiseworthy outcomes?&lt;/li&gt;
&lt;li&gt;Do not fake wonder or hyperbolic praise. It comes across insincerely (because I am insincere when I do it) and undermines one of my main strengths &amp;ndash; being a thoughtful straight shooter.&lt;/li&gt;
&lt;li&gt;Intentionally lower my expectations, especially when they are stratospherically high, and concretely verbalize my expectations&lt;sup id="fnref:goals"&gt;&lt;a class="footnote-ref" href="#fn:goals"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Let people know when I&amp;rsquo;m struggling to recalibrate. It&amp;rsquo;s easy for people to read my hesitation as disapproval of their plan when I&amp;rsquo;m actually trying to rapidly assess an unanticipated approach and decide if there&amp;rsquo;s any blockers to moving forward.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="learning-calibration"&gt;Learning calibration&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Again, recognize that just because someone says something is essential doesn&amp;rsquo;t make it so, even if they have a really important title&lt;sup id="fnref:social"&gt;&lt;a class="footnote-ref" href="#fn:social"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Ask clarifying questions.&lt;ul&gt;
&lt;li&gt;What idea(s) from the book/training resonated with you? When is a time you wish you had applied them? What would that have looked like / how would things have gone differently?&lt;/li&gt;
&lt;li&gt;How have you applied these ideas to your daily work? How long have you been applying these ideas? What have been the upsides and downsides of the change for you?&lt;/li&gt;
&lt;li&gt;If you were in my shoes, which ideas would you focus on? What do you think it might look like if I really applied myself to those ideas?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consider following up on the impact in a few months. Are they still doing the new practice? How is that working out&lt;sup id="fnref:remember"&gt;&lt;a class="footnote-ref" href="#fn:remember"&gt;5&lt;/a&gt;&lt;/sup&gt;? What additional adjustments have they made? What kind of people would most benefit from the idea? Is there anybody who might not benefit?&lt;/li&gt;
&lt;li&gt;Learn to recognize when growth is not the primary goal. Take advantage of the opportunity to learn something, but it&amp;rsquo;s okay to stick to your well-considered plan for growth.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And I&amp;rsquo;d love to get other people&amp;rsquo;s take on what style of enthusiasm they appreciate in leaders. Maybe I need to add comment support to this blog so I can end with discussion questions.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:ego"&gt;
&lt;p&gt;A bit of ego and an overestimation of what I can accomplish probably inflate the estimate as well.&amp;#160;&lt;a class="footnote-backref" href="#fnref:ego" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:growth"&gt;
&lt;p&gt;At this point in my career, I simply had too much on my plate, and so much of my learning and growth was around prioritization and intentional choices about opportunity costs, the return on my (time) investment, and delegation. Just because someone thought that this material needed to be presented didn&amp;rsquo;t mean it needed to jump to the top of my list. And the flip side is that sometimes I&amp;rsquo;ve had to grow in skills that nobody thought it was worthwhile to train me on.&amp;#160;&lt;a class="footnote-backref" href="#fnref:growth" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:goals"&gt;
&lt;p&gt;This topic could be its own article. There are different kinds of expectations (e.g., important immediate goals, important long-term goals that I&amp;rsquo;m afraid will slip away if they aren&amp;rsquo;t addressed but aren&amp;rsquo;t necessarily central to the work, beliefs I have about the work that I&amp;rsquo;m very certain of, beliefs I suspect are true, etc.). Often, my expectations will shift based on feedback. For example, I&amp;rsquo;ve often had developers tell me something like, &amp;ldquo;I looked into such-n-such technology, and we can&amp;rsquo;t do this, but it solves a bunch of our other problems and gives us this cool new capability.&amp;rdquo; And that&amp;rsquo;s enough ROI for me to change my expectations. Beyond that, there&amp;rsquo;s another whole topic about expressing reservations about a path and equipping others to recognize the wrong path while still genuinely giving them the freedom to make their own choices and supporting the outcome.&amp;#160;&lt;a class="footnote-backref" href="#fnref:goals" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:social"&gt;
&lt;p&gt;On the other hand, people with important titles often like to feel important: Telling them that their recommendation was really meaningful to you is often a great approach, especially if they don&amp;rsquo;t have the attention span to realize that you aren&amp;rsquo;t actually applying said lessons any better than before.&amp;#160;&lt;a class="footnote-backref" href="#fnref:social" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:remember"&gt;
&lt;p&gt;Do they actually remember anything about the book?&amp;#160;&lt;a class="footnote-backref" href="#fnref:remember" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="vocabulary"></category></entry><entry><title>Learning to Learn</title><link href="https://rayalan.github.io/learning-to-learn.html" rel="alternate"></link><published>2023-09-25T00:00:00-04:00</published><updated>2023-09-25T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-09-25:/learning-to-learn.html</id><summary type="html">&lt;p&gt;Learning is a strange topic in software. On the one hand, everyone talks about how essential it is, especially with technology changing so fast. And on the other hand, nobody really talks about how to learn what to learn&lt;sup id="fnref:close"&gt;&lt;a class="footnote-ref" href="#fn:close"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Consider a few different scenarios&amp;hellip;&lt;/p&gt;
&lt;h1 id="largely-ignorant"&gt;Largely ignorant&lt;/h1&gt;
&lt;p&gt;In some circumstances …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Learning is a strange topic in software. On the one hand, everyone talks about how essential it is, especially with technology changing so fast. And on the other hand, nobody really talks about how to learn what to learn&lt;sup id="fnref:close"&gt;&lt;a class="footnote-ref" href="#fn:close"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Consider a few different scenarios&amp;hellip;&lt;/p&gt;
&lt;h1 id="largely-ignorant"&gt;Largely ignorant&lt;/h1&gt;
&lt;p&gt;In some circumstances, we&amp;rsquo;re largely ignorant of what we need to know. As a young child, we are guided by parents and teachers into basic knowledge such as reading, writing, and arithmetic. Similarly, vocational training and college degrees provide significant guidance in what skills need to be mastered. Sometimes these choices are good &amp;ndash; my college classes on information theory, statistics, and game theory have been referenced throughout my career.&lt;/p&gt;
&lt;p&gt;Others, less so &amp;ndash; did Calculus IV help me be a great software developer? Well, I&amp;rsquo;ve never used it and forgotten most of it by now, so at most it serves as a way to score points on how smart I am or how tough my education was. (And strangely, scoring points is often an anti-social behavior, aside from job interviews and professional bios, so even there Calculus IV hasn&amp;rsquo;t been very practical.)&lt;/p&gt;
&lt;p&gt;Assuming one&amp;rsquo;s education leads into one&amp;rsquo;s career&lt;sup id="fnref:career"&gt;&lt;a class="footnote-ref" href="#fn:career"&gt;2&lt;/a&gt;&lt;/sup&gt;, one&amp;rsquo;s first job introduces a whole bunch more skills - some just missed by education, others that just come from real-world scenarios that school can&amp;rsquo;t replicate. Some of these skills are technical (e.g., source control wasn&amp;rsquo;t taught back in my day), but others are more professional skills &amp;ndash; real-world software development is very different from coursework. For example, in a class, the solution and complexity to problems are always well-known. But on the job, nothing forces the customer to ask for something that can be delivered in a week.&lt;/p&gt;
&lt;h1 id="professional-sponge"&gt;Professional sponge&lt;/h1&gt;
&lt;p&gt;I encourage people to think of their early career as a sponge &amp;ndash; one finally has the tools to start learning their field in depth, and to observe and learn about related professions. At a job with user experience? Grab lunch with someone and ask them to tell you about it, how it interacts with software development, what they wish software developers would do to make user experience better. Just about everyone has opinions, and it&amp;rsquo;s a fantastic way to create connections, build a repertoire of knowledge, and assemble a reading list.&lt;/p&gt;
&lt;p&gt;If one is lucky, they&amp;rsquo;ll get a thoughtful boss who will get to know them well and give detailed, specific feedback on how to grow. If not, working alongside thoughtful coworkers and actively soliciting feedback can be a a great source of input&lt;sup id="fnref:habits"&gt;&lt;a class="footnote-ref" href="#fn:habits"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="independent-thinker"&gt;Independent thinker&lt;/h1&gt;
&lt;p&gt;At some point, though, learning becomes harder. I see three big reasons for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The difficulty of application significantly increases.&lt;/li&gt;
&lt;li&gt;The difficulty of discerning what to learn increases.&lt;/li&gt;
&lt;li&gt;The difficulty of discerning style from wisdom increases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="difficulty-of-application"&gt;Difficulty of application&lt;/h2&gt;
&lt;p&gt;The classic dilemma for new graduates is that they need experience in order to find a job. And how does one find experience without a job? The same problem applies to major jumps in career:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do you demonstrate that you can effectively direct a 200-person engineering team? Well, by effectively directing a large engineering team.&lt;/li&gt;
&lt;li&gt;How do you demonstrate that you can effectively architect maintainable software systems? Well, by doing so.&lt;/li&gt;
&lt;li&gt;How do you demonstrate that you can effectively run a large project? Well, by running one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In some areas of software development, it&amp;rsquo;s easy to bridge from one area into another. If one can write a few functions, one is probably dabbling in writing classes. One can start debugging easy problems, try their hand at harder bugs, and eventually prove their debugging skills.&lt;/p&gt;
&lt;p&gt;But other jumps are more 0 to 1 jumps. Effectively running a small or medium team is very different than running a large department. Effectively designing a small internal application is very different than designing a company-wide microservice architecture. And these jumps are far harder because much of the knowledge comes from doing, and the ability to do often requires being in the right position.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been fortunate to work at a number of smaller, understaffed companies where I could drift into this kind of work. For example, I ended up as both architect and project manager on a major initiative when my co-leader (who I had worked with before) saw me taking the lead, thought I was doing great, and decided he had more important work to do. So now I can point to that experience and say &amp;ldquo;I&amp;rsquo;ve done that, and I got awards for doing so.&amp;rdquo; So while that worked out great for me, it&amp;rsquo;s not an easy way that anyone can demonstrate their capabilities.&lt;/p&gt;
&lt;p&gt;And even in that work, my head knowledge exceeds what I&amp;rsquo;ve applied. There are industry standards for APIs that I know about but have never done. So when some hiring manager goes and writes out a job description wanting architects who have done this practice and that practice and this other practice, I don&amp;rsquo;t exactly have the right experience.&lt;/p&gt;
&lt;h1 id="difficulty-of-what-to-learn"&gt;Difficulty of what to learn&lt;/h1&gt;
&lt;p&gt;At some point, I realized that there&amp;rsquo;s basically an infinite amount to learn and improve. I can get better at almost any skill, and there are countless skills that would make me better at what I do. The question becomes: Where do I focus my energy?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On shoring up my weaknesses?&lt;/li&gt;
&lt;li&gt;On amplifying my strengths?&lt;/li&gt;
&lt;li&gt;On a skill that seems largely absent in my current job?&lt;/li&gt;
&lt;li&gt;On a skill that is highly valued in my current job?&lt;/li&gt;
&lt;li&gt;On a skill that I expect will be highly valued in my next job?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&amp;rsquo;t have a good answer. Here&amp;rsquo;s what my current plan looks like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have a plan and at least small action steps for whatever feedback I&amp;rsquo;ve gotten from my boss and close workers, regardless of whether I agree with the feedback. If I agree with the feedback, this is easy to focus on. Otherwise, it&amp;rsquo;s a way of experimenting with a change to see what happens while showing that I&amp;rsquo;m taking them seriously.&lt;/li&gt;
&lt;li&gt;I strive to be attentive to my perennial weaknesses (e.g., coming off as brusque) and follow up in scenarios where I may not have done well.&lt;/li&gt;
&lt;li&gt;Up to 20% of my time working on my weaknesses. Sometimes these are the perennial ones (especially if feedback suggests they are problem areas again). At other times, I&amp;rsquo;ll tackle a common practice that I&amp;rsquo;ve never been able to implement (like &lt;a href="https://obsidian.md/"&gt;Obsidian&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The rest of my effort goes to learning to better do what I love and excel at.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, I mostly work on amplifying my strengths, while being conscientious of my weaknesses.&lt;/p&gt;
&lt;h1 id="difficulty-of-discerning-wisdom-from-style"&gt;Difficulty of discerning wisdom from style&lt;/h1&gt;
&lt;p&gt;Finally, I&amp;rsquo;ve learned that people are very bad at distinguishing their style from best practice.&lt;/p&gt;
&lt;p&gt;At one point in my career, I joined a company where many developers, including those who I worked closely with, were deeply into object-oriented design. And I wasn&amp;rsquo;t. While I certainly appreciated the value of a good class, I wasn&amp;rsquo;t an object-oriented purist. They didn&amp;rsquo;t want to engage in a conversation on the topic, though, and I significantly altered my style (or who I requested to do my code reviews) to accommodate their style.&lt;/p&gt;
&lt;p&gt;Fast forward a couple years, and I no longer worked closely with those individuals. I also became more aware of other schools of thought and realized that there were many professionals who would agree with me. In the years since then, I&amp;rsquo;ve largely worked with similarly minded individuals, and my lack of object-oriented purity has never come up.&lt;/p&gt;
&lt;p&gt;Looking back, I overestimated the level of experience of those who wanted to guide me down a route of object-oriented purity and confused their preferences for wisdom&lt;sup id="fnref:purity"&gt;&lt;a class="footnote-ref" href="#fn:purity"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;In another case (before I was a manager), I had a reviewer write about me that &amp;ldquo;my people skills limit how &amp;lsquo;managerial&amp;rsquo; my role is, both in managing people and in interacting with other teams.&amp;rdquo; Ouch! And yet within a couple years of that review, I was managing a small team, getting glowing reviews from those who reported to me, and architecting critical software systems that had an eight-figure impact on the company.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He really cares about his team members as people and is genuinely open to working with them through their individual concerns and goals.&lt;/p&gt;
&lt;p&gt;Anonymous upward feedback on Alan&amp;rsquo;s top strengths&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Did I radically overhaul my approach to dealing with people? Was the reviewer wrong? What happened?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No, not exactly, and circumstances changed.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I certainly continued to work on my people skills. I got bit smarter about when &amp;ldquo;What do you think?&amp;rdquo; wasn&amp;rsquo;t really an invitation to share my opinion. And I got a bit better at phrasing questions so they wouldn&amp;rsquo;t be heard as having critical implication. But I don&amp;rsquo;t think much changed in my actual style &amp;ndash; certainly nothing significant enough that anyone commented on it, for example.&lt;/p&gt;
&lt;p&gt;Instead, I think the reviewer confused his style (which definitely conflicted with mine) with my broader people skills. I also strongly suspect that the extent to which I could have been an effective manager under him was indeed severely limited.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;One final caveat&lt;/em&gt;: My point in both these stories is not &amp;ldquo;I was right, ignore feedback.&amp;rdquo; In both instances, the feedback was valuable, and I was better off for having it and growing from it. But in both cases, the feedback wasn&amp;rsquo;t a full view of the situation. Had I simply taken the feedback and said &amp;ldquo;Ah, I too must be an object-oriented purist,&amp;rdquo; I would have stunted my growth and limited my engineering abilities.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;As with many complex issues, there aren&amp;rsquo;t many silver bullets here. But here are a few of my takeaways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be quick to learn new skills from 0 to 1 whenever possible. And beware &lt;a href="https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect"&gt;the Dunning-Kruger effect&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Grow skills from 1 to 2 when convenient.&lt;/li&gt;
&lt;li&gt;Learn many variants for core skills.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The purpose of the last point is to achieve mastery of the concept independent of the implementation. By the 5th or 6th software language, the concept of a loop is really clear, even if one language has &lt;code&gt;while&lt;/code&gt; and another doesn&amp;rsquo;t. It also makes comparison and contrast far easier &amp;ndash; how does C++&amp;rsquo;s value vs. reference system compare to the de facto reference approach used by many modern languages? How does having a &lt;code&gt;const&lt;/code&gt; keyword change how one programs? Or, in the case of JavaScript, how does it turn out to have a &lt;code&gt;const&lt;/code&gt; keyword in an object-based language that doesn&amp;rsquo;t prevent the object from being changed?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Finally, think deeply about the feedback you receive, and seek out feedback from multiple thoughtful sources.&lt;/em&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:close"&gt;
&lt;p&gt;This topic is closely related to last week&amp;rsquo;s topic on &lt;a href="https://rayalan.github.io/recognizing-expertise.html"&gt;recognizing expertise&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:close" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:career"&gt;
&lt;p&gt;This certainly isn&amp;rsquo;t the case for many, and the way that people end up in degrees without a good sense of whether that career trajectory is a good match for their strengths would make for a fascinating social commentary. But that&amp;rsquo;s a bit beyond this blog at the moment.&amp;#160;&lt;a class="footnote-backref" href="#fnref:career" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:habits"&gt;
&lt;p&gt;Both of these habits (soliciting feedback and sitting down with others) are great career habits to maintain. But their purpose morphs slightly over time. Often the feedback, especially the positive feedback, gets repetitive. In that case, it serves as more of a reality check that you are still coming across as you expect, rather than novel information. Likewise, the 100th conversation about user experience probably won&amp;rsquo;t tell you that much more about the field &amp;ndash; but it&amp;rsquo;ll tell you a lot about the individual and the specific challenges facing the company and be a great connection-building opportunity.&amp;#160;&lt;a class="footnote-backref" href="#fnref:habits" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:purity"&gt;
&lt;p&gt;Looking back, I also wish I had more carefully considered my choice to adapt my style. It may have been the right choice to get along, especially as the new person at the company. But that preference led to some unfortunate expectations at the company, such as interview questions focused on one&amp;rsquo;s understanding of object-oriented design. In hindsight, pushing against that expectation, as uncomfortable as it would have been, might have been better for the engineering culture and hiring high-quality candidates.&amp;#160;&lt;a class="footnote-backref" href="#fnref:purity" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="growth"></category></entry><entry><title>Recognizing Expertise</title><link href="https://rayalan.github.io/recognizing-expertise.html" rel="alternate"></link><published>2023-09-18T00:00:00-04:00</published><updated>2023-09-18T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-09-18:/recognizing-expertise.html</id><summary type="html">&lt;p&gt;Suppose someone sends you a beautifully hand-crafted letter&lt;sup id="fnref:email"&gt;&lt;a class="footnote-ref" href="#fn:email"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I can double your company&amp;rsquo;s profits in six months. My going rate is $100,000 per month.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Joe, an expert in the field of quarks, charms, and particle entanglement.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What would it take for you to hire Joe?&lt;/p&gt;
&lt;p&gt;First, we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Suppose someone sends you a beautifully hand-crafted letter&lt;sup id="fnref:email"&gt;&lt;a class="footnote-ref" href="#fn:email"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I can double your company&amp;rsquo;s profits in six months. My going rate is $100,000 per month.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Joe, an expert in the field of quarks, charms, and particle entanglement.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What would it take for you to hire Joe?&lt;/p&gt;
&lt;p&gt;First, we&amp;rsquo;d do some back-of-the-napkin math to see how long it&amp;rsquo;d take for doubling our company&amp;rsquo;s profits to pay off a $600,000 bill. Let&amp;rsquo;s assume that hiring Joe would be a good deal and that the business has the money &amp;ndash; it won&amp;rsquo;t destroy our cash flow or anything like that.&lt;/p&gt;
&lt;p&gt;That brings us to a second question: Is Joe legit? Does he really know how to make the company profitable? Is he trying to scam us? Or perhaps, worse yet, he&amp;rsquo;s just deluded &amp;ndash; a madman.&lt;/p&gt;
&lt;h1 id="the-dilemma"&gt;The dilemma&lt;/h1&gt;
&lt;p&gt;So what now?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We could look for signs of credibility. Does he have a university degree? Or some training certificates? Do other experts recognize his knowledge in some way?&lt;/li&gt;
&lt;li&gt;We could ask about past results - has he done this sort of work in the past? What kind of results has he had?&lt;/li&gt;
&lt;li&gt;We could rely on our own experience. Have we seen this practice anywhere? How did it work out?&lt;/li&gt;
&lt;li&gt;We could ask our business connections if they&amp;rsquo;ve heard of particle physicists increasing business profits; have they hired anyone like this?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;References are a bit tricky these days. If Joe is at all smart, he&amp;rsquo;ll likely cherry-pick contacts who think the world of him. And then there&amp;rsquo;s the question of the strangers&amp;rsquo; judgement: Would they actually recognize business-revolutionizing particle physics?&lt;/p&gt;
&lt;p&gt;Self-experience is clearly a better approach &amp;ndash; after all, most of what I know has been taught to me by others. And I&amp;rsquo;m still striving to &lt;a href="https://rayalan.github.io/pages/unlinked-hidden.html"&gt;learn&lt;/a&gt;, which usually means either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning from others in some form (e.g., book, video, conversation)&lt;/li&gt;
&lt;li&gt;A mixture of staring at the computer screen and intermittently bashing my head against the wall, trying to figure why the computer is undertaking some undesirable and bizarre behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="credentials"&gt;Credentials&lt;/h3&gt;
&lt;p&gt;Certification is a tricky beast. On the one hand, it&amp;rsquo;s a fairly objective&lt;sup id="fnref:fair"&gt;&lt;a class="footnote-ref" href="#fn:fair"&gt;2&lt;/a&gt;&lt;/sup&gt; way to evaluate someone&amp;rsquo;s expertise. On the other hand, there are a few problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plenty of accused criminals and scam artists have excellent qualifications. See, for example, &lt;a href="https://en.wikipedia.org/wiki/Elizabeth_Holmes"&gt;Elizabeth Holmes&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Bernie_Madoff"&gt;Bernie Madoff&lt;/a&gt; , or &lt;a href="https://en.wikipedia.org/wiki/Sam_Bankman-Fried"&gt;Sam Bankman-Fried&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In many fields, such as software development, self-taught individuals are just as skilled if not more so than accredited ones.&lt;/li&gt;
&lt;li&gt;There can be quite a gap between an individual&amp;rsquo;s academic ability and their day-to-day performance. My scores on a number of graduate school engineering exams were significantly better than my actual understanding of electromagnetic fields.&lt;/li&gt;
&lt;li&gt;The lack of certification doesn&amp;rsquo;t say much &amp;ndash; in many software fields, many qualified people can do the work, or learn to do the work (thanks Google + StackOverflow), without ever earning the credential.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But the big problem is this:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Knowing how to do something right isn&amp;rsquo;t the same as knowing the right thing to do.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Huh?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say I have a problem and a certified AWS expert. The AWS expert is likely to tell me that the solution to my problem is to use AWS. They&amp;rsquo;ll likely give me exactly the right way to solve my problem with AWS.&lt;/p&gt;
&lt;p&gt;But is that the right solution for my company? Should I commit to having a permanent AWS expert on staff? What ramifications will that have on the company&amp;rsquo;s ability to update the product? Or make it accessible in remote locations?&lt;/p&gt;
&lt;p&gt;Perhaps the problem could be solved differently with a chemist. Or by marketing acquiring a telegenic eight-year-old and livestreaming her using the product. Or by overhauling the manufacturing process.&lt;/p&gt;
&lt;p&gt;And certification says nothing about a person&amp;rsquo;s ability to assess a problem in the broader business context and make a good decision.&lt;/p&gt;
&lt;p&gt;For example, I&amp;rsquo;ve seen fantastic database designs &amp;ndash; that didn&amp;rsquo;t match the company&amp;rsquo;s desired development pace, align with the kinds of employees that the company could hire, or give the kind of product flexibility that the product managers wanted. The designs were not a bad solution in a vacuum; they were just a bad solution for that company at that time.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;First, signals do matter. They aren&amp;rsquo;t everything, but a person&amp;rsquo;s credentials, references, and communication skills all matter.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What would it take for this to work?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Second, it&amp;rsquo;s worth taking even crazy ideas and thinking through &amp;ldquo;What would have to happen for this to work well?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;For example, one of the major sources of delay in shipping code to production is code reviews. There are good reasons for this &amp;ndash; ensuring quality code, knowledge sharing, preventing malicious code injection, etc. But it&amp;rsquo;s still a bottleneck. And the easiest way of improving the situation &amp;ndash; getting developers to do reviews sooner &amp;ndash; is highly disruptive to developers&amp;rsquo; work habits.&lt;/p&gt;
&lt;p&gt;So what would it take to do code reviews after code was shipped to production rather than before? Feature flags? State-of-the-art code scanners? Every line of code covered by a test? Rigorous static typing and API contracts? Doubling software salaries and only hiring the best of the best? Some combination? The answer probably varies by industry&lt;sup id="fnref:heart"&gt;&lt;a class="footnote-ref" href="#fn:heart"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Or as someone once said: You don&amp;rsquo;t get world-class results by following industry-standard operating procedures; you get standard results. If you want non-standard results, you need non-standard practices&lt;sup id="fnref:until"&gt;&lt;a class="footnote-ref" href="#fn:until"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="soapbox-bonus"&gt;Soapbox bonus&lt;/h1&gt;
&lt;p&gt;A crafty owner might try to carefully negotiate a results-based contract with Joe. &amp;ldquo;We&amp;rsquo;ll pay you $600,000 in six months if the profits are at least double, plus 5% of any profit gain beyond that.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Joe, knowing that business results aren&amp;rsquo;t guaranteed, is likely to want guarantees. &amp;ldquo;Okay, but if you don&amp;rsquo;t do exactly what I tell you, then I get my $100,000/month regardless of results.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Of course, the owner probably isn&amp;rsquo;t comfortable with having to do everything Joe says to avoid invoking the fallback clause. And this brings us to the fun topic of structuring incentives, which shall have to remain to consider at another time.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:email"&gt;
&lt;p&gt;Or an email. But we know in this day and age that all strange email is a scam, so that doesn&amp;rsquo;t work for this illustration.&amp;#160;&lt;a class="footnote-backref" href="#fnref:email" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:fair"&gt;
&lt;p&gt;Not be confused with &lt;em&gt;objectively fair&lt;/em&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:fair" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:heart"&gt;
&lt;p&gt;I&amp;rsquo;m not sure I&amp;rsquo;d ever want this approach with, say, my pacemaker.&amp;#160;&lt;a class="footnote-backref" href="#fnref:heart" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:until"&gt;
&lt;p&gt;At least until they become the new industry standard, at which point it is time to innovate again.&amp;#160;&lt;a class="footnote-backref" href="#fnref:until" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="management"></category><category term="knowledge"></category><category term="uncertainty"></category></entry><entry><title>Two Great Managers</title><link href="https://rayalan.github.io/my-best-managers.html" rel="alternate"></link><published>2023-09-11T00:00:00-04:00</published><updated>2023-09-11T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-09-11:/my-best-managers.html</id><summary type="html">
&lt;h1 id="intro"&gt;Intro&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;95% of what I’ve learned about great management comes from two managers and a book&lt;sup id="fnref:wander"&gt;&lt;a class="footnote-ref" href="#fn:wander"&gt;1&lt;/a&gt;&lt;/sup&gt;.
Me, reflecting about my management style&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ve had plenty of bosses over the years – some good, a few too busy to pay attention to me, a few not so good&lt;sup id="fnref:horror"&gt;&lt;a class="footnote-ref" href="#fn:horror"&gt;7 …&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</summary><content type="html">
&lt;h1 id="intro"&gt;Intro&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;95% of what I’ve learned about great management comes from two managers and a book&lt;sup id="fnref:wander"&gt;&lt;a class="footnote-ref" href="#fn:wander"&gt;1&lt;/a&gt;&lt;/sup&gt;.
Me, reflecting about my management style&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ve had plenty of bosses over the years – some good, a few too busy to pay attention to me, a few not so good&lt;sup id="fnref:horror"&gt;&lt;a class="footnote-ref" href="#fn:horror"&gt;7&lt;/a&gt;&lt;/sup&gt;. And I’ve probably read – or at least skimmed – dozens of books on leadership.&lt;/p&gt;
&lt;p&gt;So how did Ella and Emma make such an impression?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Radical trust.&lt;/li&gt;
&lt;li&gt;Sincere respect.&lt;/li&gt;
&lt;li&gt;Consistent candor.&lt;/li&gt;
&lt;li&gt;Seen potential.&lt;/li&gt;
&lt;li&gt;Warm appreciation.&lt;/li&gt;
&lt;li&gt;Low expectations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s nothing particularly radical about this list (except the last one, I’ll get to that), but experiencing that kind of leadership was profoundly connecting. Not only do some of my fondest memories of work come from those times, but it also radically reshaped what I aspire to in my interactions with others.&lt;/p&gt;
&lt;h1 id="story-time"&gt;Story time&lt;/h1&gt;
&lt;p&gt;Here are five stories (and an observation) illustrating how these principles played out…&lt;/p&gt;
&lt;h2 id="ella-and-the-competitor"&gt;Ella and the competitor&lt;/h2&gt;
&lt;p&gt;When I interviewed with Ella, I also had an interview lined up at a scientific facility – the kind of place that sounds really fancy and makes for a unique interview opportunity. The timing was a bit awkward, but Ella’s response when I asked for a couple more days to respond to her offer so I could get a sense for the facility stuck with me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Certainly; you should absolutely interview there – it’s a really cool opportunity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, Ella got where I was coming from and supported me getting a chance at a rare opportunity&lt;sup id="fnref:hindsight"&gt;&lt;a class="footnote-ref" href="#fn:hindsight"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:choice"&gt;&lt;a class="footnote-ref" href="#fn:choice"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2 id="ella-and-waf"&gt;Ella and waf&lt;/h2&gt;
&lt;p&gt;Shortly after I started working for Ella, I was tech lead on a small team looking to resurrect an application (all the previous institutional knowledge had moved on) and add some key product features. After some investigation, I went to Ella with a pitch to spend a significant amount of time (a couple of months, as I recall) building out some build infrastructure for the application.&lt;/p&gt;
&lt;p&gt;I was really nervous about asking, and I wasn’t totally sure I could justify the ROI. After all, build infrastructure wasn’t exactly a new feature we could ship, and I wasn’t really sure that better build capabilities would help us ship the first feature sooner.&lt;/p&gt;
&lt;p&gt;But Ella simply said yes; she trusted my judgement. I still don’t know if that was the best technical call&lt;sup id="fnref:call"&gt;&lt;a class="footnote-ref" href="#fn:call"&gt;4&lt;/a&gt;&lt;/sup&gt;. But it was absolutely the right relational call.&lt;/p&gt;
&lt;p&gt;I ended up building a &lt;a href="https://waf.io/book/"&gt;waf-based system&lt;/a&gt; for the application. Waf&lt;sup id="fnref:waf"&gt;&lt;a class="footnote-ref" href="#fn:waf"&gt;5&lt;/a&gt;&lt;/sup&gt; would go on to be build framework for large portions of the company’s code base for over a decade. And for bonus points, the build system paid huge dividends early on as well, and the new feature shipped far ahead of Ella’s expectations.&lt;/p&gt;
&lt;h2 id="christmas-party"&gt;Christmas party&lt;/h2&gt;
&lt;p&gt;The final memory I have of Ella from that first year is the company Christmas party. I’d only been working with Ella a few months at that point, but she made a point to greet my wife and I, and to tell my wife how much she appreciated my presence and contributions at the company. That moment embodied the kind of sincere warmth and thoughtful presence that Ella so often exhibited in our conversations.&lt;/p&gt;
&lt;h2 id="emma-individualized"&gt;Emma, individualized&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“Why do you work here?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don’t recall how long it took for Emma to ask that question after she started managing me. Under a month. Possibly the second time we met.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“I don’t care why you work here, but I need to know why in order to be a good manager.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The question led into a really good conversation about what I valued directly (e.g., respect of co-workers) and how often what a company is willing to pay is an accurate signal of how much they value and respect a person’s work. This was the first of many good conversations with Emma. Beyond that, I learned that Emma cared about tailoring her management style on an individual basis. Case in point, I mentioned that I’d never gotten one of the company’s “above and beyond” thank yous (and we both knew that I’d more than earned a few). Not too long later, the company CEO dropped by to give me one.&lt;/p&gt;
&lt;h2 id="emmas-questions"&gt;Emma’s questions&lt;/h2&gt;
&lt;p&gt;Emma wasn’t a technical boss, but she made up for it by asking for my opinion about everything. Why was such-n-such a problem? How did this technology work? Would such-n-so an approach be faster? Why or why not? Why was testing a hard part of software development?&lt;/p&gt;
&lt;p&gt;And Emma was asking to learn. She knew she didn’t understand the technology, and it lead to great exchanges where we talked about trade-offs, implications, and costs. And Emma often brought up apparent contradictions (either ideas she’d learned from developers or something I’d said) and asked me about them. The conversations helped me to refine and grow my perspectives, but I always had the sense that Emma had a great respect for my views and understanding.&lt;/p&gt;
&lt;h2 id="emma-and-the-shadow-project-manager"&gt;Emma and the shadow project manager&lt;/h2&gt;
&lt;p&gt;One of the first projects that I tackled with Emma was rewriting the control software for some mission-critical company algorithms. I was officially tech lead for a small team and, on paper, Emma was both engineering and project manager.&lt;/p&gt;
&lt;p&gt;However, the project was a highly technical one where almost every story and prioritization choice involved a great deal of technical expertise. Emma saw this, saw that I was good at organization and structuring work, and said, “Go ahead and structure the work as you see fit.” So for a couple years, I basically got to be the shadow project manager as I organized, structured, and prioritized the work.&lt;/p&gt;
&lt;p&gt;A lesser project manager might have been threatened or territorial or wanted to be more in the loop, but Emma trusted me to bring up the choices that had business impact and to make the right technical decisions around the work.&lt;/p&gt;
&lt;p&gt;Beyond that, Emma believed that I could be a good manager and encouraged me that I could do it if I wanted to. At the time, I hadn’t had any managers who had modeled a style that felt like my style, but working with Emma, doing that kind of organizational project work, and having that kind of trust gave me a sense of how I could be an effective manager with my own style.&lt;/p&gt;
&lt;h2 id="candor-and-personalization"&gt;Candor and personalization&lt;/h2&gt;
&lt;p&gt;Finally, I recall two other attributes of my time with both Ella and Emma:&lt;/p&gt;
&lt;p&gt;First, they were straight with me about the hard questions. I got real answers to question like &lt;em&gt;“Why is the organization doing such-n-such?”&lt;/em&gt; or &lt;em&gt;“Is this-or-that really fulfilling our corporate values?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While they respected the necessary corporate privacy, they typically erred on the side of sharing more and trusting me to be discreet. There were at least a few times when I knew well ahead of time about a pending reorg or upcoming departure. Again, the idea of extending trust shows up.&lt;/p&gt;
&lt;p&gt;And finally, they had low expectations for me. They recognized, I believe, that I have incredibly high expectations for myself (some might say unrealistic) and that I do my best work when I’m not feeling pressured to do even more. And so they were able to find meaningful ways to tell me that I was doing great, which helped me to do even better.&lt;/p&gt;
&lt;p&gt;Clearly that exact strategy doesn’t apply to every employee, but the broader principle of understanding each employee and adjusting one’s approach accordingly is absolutely applicable. And I have yet to meet an employee who doesn’t like to know how their work is appreciated.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;I generally opt for a pretty simple management philosophy:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My goal is to make others shine.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If I can create a team where I’m not necessary, that’s fantastic. One of the best compliments of my management came after I’d been away from one of my teams for a while, when I was told, “They’re the team in the engineering department that least needs a manager.” In other words, they were highly productive and self-directing, regardless of whether I was around or not. Beyond that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be credible. I say what I mean, and I mean what I say. I may be mistaken, but people don’t need to worry that I’m snowing them.&lt;/li&gt;
&lt;li&gt;Manage by wandering around (perhaps virtually), chatting, and building relationships.&lt;/li&gt;
&lt;li&gt;Let others leverage their strengths to build the team. I’m not a natural encourager or connector, so I let others with those talents take the lead. While I do need to grow, I don’t need to do all the work myself, and I don’t need to be the one with all the answers (especially if I’m trying to make myself unnecessary).&lt;/li&gt;
&lt;li&gt;Be thoughtfully present.&lt;ul&gt;
&lt;li&gt;Can I tell you the unique contributions of each team member? Do the reviews I write reflect that I’m in touch with the employee’s successes, growth, and ambitions?&lt;/li&gt;
&lt;li&gt;Can I tell you how I’m utilizing their individual strengths and passions in how I’ve allocated work?&lt;/li&gt;
&lt;li&gt;When confronted with someone’s weakness, am I immediately reacting to that weakness, or am I seeking to understand what is leading to the expression of that weakness?&lt;/li&gt;
&lt;li&gt;If anything I’m going to write on someone’s review will surprise them, then I’m failing as a manager and need to adjust.&lt;/li&gt;
&lt;li&gt;If I’m going to write a bad review for someone&lt;sup id="fnref:review"&gt;&lt;a class="footnote-ref" href="#fn:review"&gt;6&lt;/a&gt;&lt;/sup&gt;, have I gone above and beyond to make sure it is the employee who is the problem and not the way I’m managing?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This certainly isn’t an exhaustive list; much of this is shaped by what I’m naturally weak at and thus needs extra attention. For example, I naturally bring about organization and structure; what I need to focus on is relationships and spontaneity. So managing by wandering around helps provide those opportunities and “structures” unstructured time for me.&lt;/p&gt;
&lt;p&gt;But in a nutshell, that captures an awful lot of what I’ve learned from my best managers. After all, good management is really pretty simple most of the time – the only hard part is living it out consistently.&lt;/p&gt;
&lt;h1 id="soapbox-bonus"&gt;Soapbox bonus&lt;/h1&gt;
&lt;p&gt;I posit three factors are behind the stark dichotomy between the plethora of management books and the shortage of good managers.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The head-knowledge for being a great leader is quite straightforward (thus, so many books).&lt;/li&gt;
&lt;li&gt;The character mastery for being a great leader is exceptionally challenging. As the saying goes, policy is for when one lacks either the character or the experience for the situation&lt;sup id="fnref:policy"&gt;&lt;a class="footnote-ref" href="#fn:policy"&gt;8&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;As a whole, businesses aren’t persuaded that great managers really make that much of a difference.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, while there is a no storage of lip service to the idea that great managers are essential, when rubber meets the road, other realities often win out.&lt;/p&gt;
&lt;p&gt;Too cynical? Perhaps.&lt;/p&gt;
&lt;p&gt;Maybe I’ll do a more in-depth reflection about the organizational challenges around great managers in the future.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:wander"&gt;
&lt;p&gt;I don’t even remember the book, but it introduced me to &lt;a href="https://www.mindtools.com/a79izhx/management-by-wandering-around-mbwa"&gt;management by wandering around&lt;/a&gt;. &lt;em&gt;First, Break All The Rules&lt;/em&gt; by Don Clifton also deserves a hat tip for articulating many of these ideas. &lt;a class="footnote-backref" href="#fnref:wander" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:hindsight"&gt;
&lt;p&gt;In hindsight, I probably could have accepted Ella’s offer and then gone to the interview anyway, so Ella’s response may have also just been good negotiation to make sure she got a real yes. &lt;a class="footnote-backref" href="#fnref:hindsight" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:choice"&gt;
&lt;p&gt;As it turned out, the other interview was catastrophically bad – like, “the hiring manager flagrantly violating EEOC regulations with off-hand comments to me during the interview” bad – so at the end of the day, the job choice was pretty easy. &lt;a class="footnote-backref" href="#fnref:choice" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:call"&gt;
&lt;p&gt;The decision worked out really well, so in hindsight it is easy to say it was the right one, but I ponder whether there was a better call with the information available at the time. &lt;a class="footnote-backref" href="#fnref:call" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:waf"&gt;
&lt;p&gt;At the time, waf clearly beat out the open source competition, especially choices like &lt;em&gt;make&lt;/em&gt; (shudder). I haven’t kept up with it for a number of years, but I suspect other tools such as &lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt; give it a run for its money today. &lt;a class="footnote-backref" href="#fnref:waf" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:review"&gt;
&lt;p&gt;While, yes, problem employees do exist, most of the time, most people respond really well to good management. So starting with the assumption that it’s on me to do better covers most situations really well. &lt;a class="footnote-backref" href="#fnref:review" title="Jump back to footnote 6 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:horror"&gt;
&lt;p&gt;Maybe I’ll do a follow-up along the lines of the &lt;em&gt;&lt;a href="https://www.goodreads.com/en/book/show/1310108"&gt;Bike Lesson&lt;/a&gt;&lt;/em&gt;, where I share the invaluable lessons I learned from watching my bosses do it wrong. &lt;a class="footnote-backref" href="#fnref:horror" title="Jump back to footnote 7 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:policy"&gt;
&lt;p&gt;That’s not to say that policy isn’t useful or necessary. But imagine a world where nearly every manager was an exceptional manager: How much policy would still be necessary? &lt;a class="footnote-backref" href="#fnref:policy" title="Jump back to footnote 8 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="management"></category></entry><entry><title>Measurement and Feedback Loops</title><link href="https://rayalan.github.io/reflection-feedback-loop.html" rel="alternate"></link><published>2022-06-27T00:00:00-04:00</published><updated>2022-06-27T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2022-06-27:/reflection-feedback-loop.html</id><summary type="html">
&lt;p&gt;Tim Cochran has a great writeup on &lt;a href="https://martinfowler.com/articles/developer-effectiveness.html"&gt;developers and feedback loops&lt;/a&gt; along with broader reflections on agile-oriented development.&lt;/p&gt;
&lt;p&gt;Implicit with the idea of feedback loops is the idea of measurement. After all, if one cannot measure how fast the feedback loop is, how is one going to decide if it …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Tim Cochran has a great writeup on &lt;a href="https://martinfowler.com/articles/developer-effectiveness.html"&gt;developers and feedback loops&lt;/a&gt; along with broader reflections on agile-oriented development.&lt;/p&gt;
&lt;p&gt;Implicit with the idea of feedback loops is the idea of measurement. After all, if one cannot measure how fast the feedback loop is, how is one going to decide if it needs improvement?&lt;/p&gt;
&lt;h1 id="measure-twice-cut-once"&gt;Measure Twice, Cut Once&lt;/h1&gt;
&lt;p&gt;Measurement is challenging, especially when it comes to people and coding problems. With lumber, cutting a board to length is pretty much the same process every time, which makes it relatively easy to measure how long it takes to cut the board.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Goodhart’s Law&lt;/strong&gt;: When a measure becomes a target, it ceases to be a good measure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With software, questions emerge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Is this scenario typical or a one-off?&lt;/em&gt; Almost by definition, one-off scenarios will take abnormally long and are often under the gun, so they tend to grab management attention. But if one only measures abnormal situations, the measurement won’t reflect typical behaviors.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Is it worth the overhead to measure every occurrence of a feedback loop?&lt;/em&gt; One way to avoid fixating on the abnormal is to always measure a feedback loop.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What am I actually measuring?&lt;/em&gt; For example, if I want to know how long it takes to find the root cause for a defect, I might measure when the developer starts work on finding the defect and when she finds the cause. But if the developer had many meetings, I might more be measuring how many meetings the developer has far more than the quality of software. Likewise, what if the developer identifies the wrong cause? I may be measuring how long it takes the developer to think they’ve found the root cause, not the actual time to find the root cause.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What do I need to measure?&lt;/em&gt; Maybe it is good enough to know what the worst case feedback loop is - when the developers have lots of meetings and the problem is really thorny. If the worst case tends to be 3-4 days, then maybe that’s enough to say my team has an effective ability to find root causes.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How will the measurement impact the team dynamics?&lt;/em&gt; Goodhart’s Law captures the danger of making targets out of measurement. Set a target number of lines of code written per developer, and the code becomes insanely verbose. Measure the number of commits, and developers fragment their work. So it’s important to integrate measurement in a way that creates the desired team dynamics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="deliver-value-not-metrics"&gt;Deliver Value, Not Metrics&lt;/h1&gt;
&lt;p&gt;At the end of the day, what matters is delivering value to customers (broadly defined&lt;sup id="fnref:customers"&gt;&lt;a class="footnote-ref" href="#fn:customers"&gt;1&lt;/a&gt;&lt;/sup&gt;). That is, it doesn’t matter whether the system reports no errors if customers can’t buy from the online store. And the shiny new build system that tells me in 5s that everything is broken isn’t much use if it can’t be fixed.&lt;/p&gt;
&lt;p&gt;In deciding what value to deliver, there are feedback loops just like in software. Here are three basic ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How long does it take the decision makers&lt;sup id="fnref:makers"&gt;&lt;a class="footnote-ref" href="#fn:makers"&gt;2&lt;/a&gt;&lt;/sup&gt; to know about the problem or pain?&lt;/li&gt;
&lt;li&gt;How long does it take the decision makers to know how much the change is worth?&lt;/li&gt;
&lt;li&gt;How long does it take the decision makers to know what the change will cost (including opportunity costs)?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consider these two decision-making paths:&lt;/p&gt;
&lt;div class="mermaid"&gt;
flowchart TD
  subgraph Option Two
    a(Developer spots typo)
    b(Developer commits change)
    c(Change automatically deploys with next release)
    a --&amp;gt; b --&amp;gt; c
  end

  subgraph Option One
    d(Developer spots typo)
    e(Developer asks manager if fixing it is a priority)
    f(Manager asks brand standards if it really is a typo)
    g(Manager tells developer to fix it after the current work)
    h(Developer makes a note to himself)
    i(Developer forgets for a while)
    j(Developer commits change)
    h(Change automatically deploys with next release)
    d --&amp;gt; e --&amp;gt; f --&amp;gt; g --&amp;gt; h --&amp;gt; i --&amp;gt; j
  end
&lt;/div&gt;
&lt;p&gt;The option one change is far more expensive: More people are more disrupted and the value takes far longer to roll out. However, the second option isn’t quite as straightforward as it might seem.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The developer needs to be able to recognize typos (within reasonable accuracy).&lt;/li&gt;
&lt;li&gt;The developer needs to recognize when a change is complicated enough to require outside expertise (e.g., it’s more than just a typo)&lt;/li&gt;
&lt;li&gt;The company needs to be willing to accept some misjudgments by the developer in exchange for faster fixes. If someone in brand standards is being evaluated based on “number of typos released,” he might prefer the option one approach because it makes his metrics look better (yes, Goodhart’s law again).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One last note here: I intentionally use the plural &lt;em&gt;decision makers&lt;/em&gt;, but the more people are in the mix, the more communication overhead there is. One way to effectively speed up these feedback loops is to reduce the number of people involved as much as possible. Of course, fewer people has other consequences.&lt;sup id="fnref:consequences"&gt;&lt;a class="footnote-ref" href="#fn:consequences"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="approximating-value"&gt;Approximating Value&lt;/h1&gt;
&lt;p&gt;As a rule of thumb, I prefer approaches that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trust and empower teams (and the individuals within) to make good choices.&lt;/li&gt;
&lt;li&gt;Minimize process overhead.&lt;/li&gt;
&lt;li&gt;Provide appropriate feedback to decision makers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the aspects of scrum that I’ve struggled with is the concepts of estimation and velocity. One reason for this is that velocity is not a measure of value delivered - that is, yes, 4 user stories worth 53 story points were delivered in the last month. But those 53 story points are an estimate of development effort, not an estimate of business value.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;So how might a company solve this problem in a way that minimizes overhead and aligns the development team’s work with the business objectives?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For some projects, it’s worth doing a detailed return-on-investment calculation. But often, that’s overkill or requires data that isn’t available and can’t be quickly collected&lt;sup id="fnref:anything"&gt;&lt;a class="footnote-ref" href="#fn:anything"&gt;5&lt;/a&gt;&lt;/sup&gt;. How else might the problem be solved?&lt;/p&gt;
&lt;p&gt;In European-style &lt;a href="https://boardgamegeek.com/"&gt;board gaming&lt;/a&gt;, there’s an argument that everything can be reduced to an auction. Imagine doing something similar and creating a value-driven reward system for development teams.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each decision maker gets a budget of N points per month.&lt;/li&gt;
&lt;li&gt;Each decision maker offers the team M points for achieving some outcome. This can be a single outcome worth N points, five outcomes worth N/5 points, or any other desired distribution.&lt;/li&gt;
&lt;li&gt;The team’s goal is to maximize the number of points they earn over time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="auction-based-value"&gt;Auction-Based Value&lt;/h2&gt;
&lt;p&gt;How might this system work?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The marketing director wants a new piece of data tracked, so he offers some points to add new behavior.&lt;/li&gt;
&lt;li&gt;The CIO wants various security metrics achieved, so she offers points for hitting those metrics.&lt;/li&gt;
&lt;li&gt;The customer service department wants a better way to report bugs, so they offer some points if bug reporting can be reduced to under 60 seconds, and far more points if it can be reduced to under 30 seconds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then the team can look at their incentives and pick the work they think will achieve the most value. At the end of the month, the team reports on how many points they earned.&lt;/p&gt;
&lt;h1 id="strengths-and-complications"&gt;Strengths and Complications&lt;/h1&gt;
&lt;p&gt;This system has a number of strengths. Consider these benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Measurable deliverables are tied to value.&lt;/li&gt;
&lt;li&gt;Teams have wide discretion in what to work on and how to achieve it.&lt;/li&gt;
&lt;li&gt;There is high flexibility in what outcomes are valued. If new skills are valued, points can be awarded for training; if uptime is valued, points can be awarded for uptime, and so on.&lt;/li&gt;
&lt;li&gt;ROI calculations are approximated without requiring complex coordination between decision makers and the team.&lt;/li&gt;
&lt;li&gt;Maintaining functionality over time becomes part of what earns teams points. Thus the maintenance overhead is visible to the decision makers – and if a feature isn’t worth maintaining, it likely will be removed as the team decides it isn’t worth the effort.&lt;/li&gt;
&lt;li&gt;Teams are incentivized to improve how they work in order to maximize their points.&lt;/li&gt;
&lt;li&gt;The incentive structure is clear to the decision makers and the team. If decision makers don’t like what is being shipped, it’s easy to explain why the team is making such choices.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, there are some complications with such a system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some outcomes may be fundamentally non-negotiable. A data breach may not be acceptable no matter what else is delivered. While there are ways of modeling this in the auction (e.g., the team gets 0 points if there is a data breach), such approaches may not adequately indicate the business consequences of such an outcome.&lt;/li&gt;
&lt;li&gt;Some outcomes may require a longer time horizon than a month. A move to cloud computing or a state-of-the-art CI/CD system may not be beneficial in 6 months or 12 months, but may be a 3 or 5 year strategic bet.&lt;sup id="fnref:short"&gt;&lt;a class="footnote-ref" href="#fn:short"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Destructive conflict can arise about whether or not an outcome was achieved if the decision makers and the team lack trust or a common understanding of work standards.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="final-thought"&gt;Final Thought&lt;/h1&gt;
&lt;p&gt;The idea of identifying feedback loops and optimizing the key ones makes a lot of sense, not just in the actual development of software, but the entire decision making process around software. Yes, there will be approximations and complications, but the smoother the process, the more developers can focus on delivering valuable software, which is good for the business.&lt;/p&gt;
&lt;script src="https://unpkg.com/mermaid/dist/mermaid.min.js"&gt;&lt;/script&gt;
&lt;script&gt;mermaid.initialize({startOnLoad:true});&lt;/script&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:customers"&gt;
&lt;p&gt;I’m using customers broadly here – the executives might be the customer for product performance metrics. The accounting team might be the customers for financial audits. The developers might be the customers for a more delightful development environment. &lt;a class="footnote-backref" href="#fnref:customers" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:makers"&gt;
&lt;p&gt;INSERT NOTE HERE &lt;a class="footnote-backref" href="#fnref:makers" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:consequences"&gt;
&lt;p&gt;Fewer people usually means fewer experts and fewer eyes to catch problems. For a typo, that’s likely not a big deal. But when it comes to the big new multi-million product initiative, that’s a much bigger deal. &lt;a class="footnote-backref" href="#fnref:consequences" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:short"&gt;
&lt;p&gt;In general, an agile philosophy often struggles to make long-term bets or improvements; switching the architecture over to AWS only to discover it is 2x more expensive is a really expensive mistake if it takes months to execute and longer to correct, but it may be hard to see the whole picture before the change is executed. &lt;a class="footnote-backref" href="#fnref:short" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:anything"&gt;
&lt;p&gt;Obligatory mention of &lt;em&gt;&lt;a href="https://www.amazon.com/How-Measure-Anything-Intangibles-Business/dp/1118539273"&gt;How To Measure Anything&lt;/a&gt;&lt;/em&gt;: it’s well worth reading for creative ideas on how to approximate many unknowns. &lt;a class="footnote-backref" href="#fnref:anything" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="agile"></category><category term="devops"></category><category term="strategy"></category></entry></feed>