<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Binary Adages</title><link href="https://rayalan.github.io/" rel="alternate"></link><link href="https://rayalan.github.io/feeds/all.atom.xml" rel="self"></link><id>https://rayalan.github.io/</id><updated>2024-03-20T00:00:00-04:00</updated><entry><title>Frictionless Change</title><link href="https://rayalan.github.io/frictionless-change-part-3.html" rel="alternate"></link><published>2024-03-20T00:00:00-04:00</published><updated>2024-03-20T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2024-03-20:/frictionless-change-part-3.html</id><summary type="html">
&lt;blockquote&gt;
&lt;p&gt;What if a company wanted speed to market to be one of its primary advantages?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://rayalan.github.io/frictionless-change-part-1.html"&gt;At first&lt;/a&gt;, I explored the idea that being able to quickly pivot and ship software to market can be a competitive advantage. &lt;a href="https://rayalan.github.io/frictionless-change-part-2.html"&gt;Last time&lt;/a&gt;, I started a thought experiment about the technical choices that might …&lt;/p&gt;</summary><content type="html">
&lt;blockquote&gt;
&lt;p&gt;What if a company wanted speed to market to be one of its primary advantages?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://rayalan.github.io/frictionless-change-part-1.html"&gt;At first&lt;/a&gt;, I explored the idea that being able to quickly pivot and ship software to market can be a competitive advantage. &lt;a href="https://rayalan.github.io/frictionless-change-part-2.html"&gt;Last time&lt;/a&gt;, I started a thought experiment about the technical choices that might make fast turnaround a true competitive advantage.&lt;/p&gt;
&lt;p&gt;Today, I’m continuing that thought experiment into the organizational choices that would complement the technical choices to achieve this kind of technical advantage.&lt;/p&gt;
&lt;h1 id="intentional-change"&gt;Intentional change&lt;/h1&gt;
&lt;p&gt;The technical practices I suggested last time (e.g., modularity, clearly established patterns, boring flexible technologies) won’t just happen. And despite our desires, technologies will change – Microsoft won’t maintain Windows 95 forever.&lt;/p&gt;
&lt;p&gt;This means we’ll want a careful, thoughtful approach to selecting and changing tooling - frameworks, libraries, tools, languages, and the like. How do we evaluate a technology? How do we begin to roll it out? How do we evaluate its effectiveness as we roll it out? When do we abort a rollout?&lt;/p&gt;
&lt;p&gt;In particular, we want to avoid the &lt;a href="https://exceptionnotfound.net/lava-flow-the-daily-software-anti-pattern/"&gt;lava flow anti-pattern&lt;/a&gt;, either choosing to move fully through with conversions or choosing to fully roll them back.&lt;/p&gt;
&lt;h1 id="cadence-ebb-and-flow"&gt;Cadence: ebb and flow&lt;/h1&gt;
&lt;p&gt;So far, I’ve posited two contradictory directions:
1. The company leverages quick feature turnaround as a competitive advantage.
2. The company carefully builds the capability to quickly turn deliver features.&lt;/p&gt;
&lt;p&gt;These ideas are in tension – as I discussed in my first article, many of the modern attempts to ship features fast to market result in technical debt that slows down future features.&lt;/p&gt;
&lt;p&gt;My solution is a rhythm between shipping features and refining capabilities. Yes, each round of quickly shipped features may add to the tech debt. Somewhere along the line, a developer will use that library maintained by that &lt;a href="https://xkcd.com/2347/"&gt;random person in Nebraska&lt;/a&gt;. That’s fine when we’re shipping quickly. But the refinement cycle needs to go back and find a sustainable solution.&lt;/p&gt;
&lt;p&gt;Likewise, some engineer will realize that the logging statements aren’t right, or that the metric latency is too low, or something. And there will need to be capability improvements in order to continue to rapidly ship features.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s like a sword – battle dulls the sword, but no one sharpens a sword just for looks.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Alan, reflecting on the balance between shipping software quickly and maintaining capabilities&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This sense of cadence needs to be more than an engineering goal; it needs to be a company goal. If the company leadership doesn’t understand and support the competitive advantage, engineering will constantly be tasked with other priorities – like shipping more features. The result is that if quick turnaround isn’t part of the company strategy, the engineering capability will gradually erode[^erode].&lt;/p&gt;
&lt;h1 id="employee-retention-turnover-and-the-peter-principle"&gt;Employee retention: turnover and the Peter principle&lt;/h1&gt;
&lt;p&gt;A large part of the company’s strategy for being able to roll out fast changes is well-defined patterns, careful technology transitions, and strong technical decision making. As with most companies, we want employees who learn from their experiences. However, we particularly want employees who have a long-term view to maintaining a key competitive advantage – the speed at which we can ship features.&lt;/p&gt;
&lt;p&gt;This means we want to think carefully about the &lt;a href="https://en.wikipedia.org/wiki/Peter_principle"&gt;Peter principle&lt;/a&gt; – employees get promoted to their level of incompetence. Suppose we have a manager, Jane, who excels at leading a small team on difficult technical projects. That’s an incredibly valuable skill, even if she doesn’t have the skills or temperament to be a director with a wide span of control. So we want to design a system where she isn’t constantly eyeing a promotion to a director position, either within our company or elsewhere. That starts with compensation, but also includes the kind of respect, latitude, and discretion a manager is given.&lt;/p&gt;
&lt;p&gt;As an example, suppose that a group of managers have a scheduled meeting with a director in a typical organization. The director likely feels far greater freedom to say “Let’s reschedule; something has come up” than any of the managers do. If it’s a group of developers and a director, this discrepancy is larger. Why does this tendency arise?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The director is assumed to have more important work to do, being higher in the organization.&lt;/li&gt;
&lt;li&gt;The director is assumed to have a better understanding of what is most important across the company.&lt;/li&gt;
&lt;li&gt;The director’s time is far harder to schedule because their calendar is busier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This kind of signaling – that one’s time would be more valuable if one had this other role – continually nudges motivated employees into looking elsewhere, even if the more prestigious role isn’t a great fit.&lt;/p&gt;
&lt;p&gt;Likewise, many companies communicate that having a larger span of control is better than having a smaller one. That means that leaders are motivated to grow their headcount, regardless of whether it is actually good for the company. I’ve seen one company, for example, where a department grew tenfold. Each time it grew, there were excellent metrics for how much was getting done – how many tickets were being handled, how heavy the department’s load was, and how great the need for more personnel was. Yet nobody questioned why the there were so many tickets or why the load was heavy; those were simply accepted as givens. Yet behind the scenes, the department was taking on more work and designing workflows that increased their workload. In a different company where importance wasn’t linked to size, conversations could have happened about what work the department actually needed to do, and whether different practices could have reduced the overall workload rather than constantly growing the department.&lt;/p&gt;
&lt;p&gt;At a company that wants to sustain a long-term competitive advantage by having knowledgeable, long-term employees in many positions, we want to carefully consider how we’re going to communicate about the relative importance of roles. We don’t want people to be motivated to grow a department except when it actually benefits the company to do so. We don’t want people motivated to seek promotions outside of their skills.&lt;/p&gt;
&lt;p&gt;As an aside, I’m not suggesting that every employee needs to be a long-term employee, but the organization also needs to be very good at recognizing and developing talent, all the better to keep it.&lt;/p&gt;
&lt;h1 id="profit-margins-and-market-landscape"&gt;Profit margins and market landscape&lt;/h1&gt;
&lt;p&gt;So far, we’ve repeatedly made expensive decisions in order to support speed to market. We’re paying non-standard salaries to employees. We’re retaining employees over the long haul. We’ve chosen common tools that don’t necessarily offer economies of scale. We’re spending a lot of time to remove tech debt and obstacles to speed. All of these choices take money.&lt;/p&gt;
&lt;p&gt;And the corollary is that we need to be able to afford it. Assuming we’re not able to print money or run a deficit more or less consequence free like the United States government, that means we need profit margins. We need to be doing software development in a space where there are large profit margins that can be capitalized on for a long time – and have a need for being able to swiftly ship new features.&lt;/p&gt;
&lt;p&gt;Not every &lt;a href="https://www.blueoceanstrategy.com/tools/red-ocean-vs-blue-ocean-strategy/"&gt;market landscape&lt;/a&gt; needs both of these criteria. This business approach is probably best situated for a marketplace with low barriers to entry that can’t sustain many competitors. The lack of competitors makes it profitable, and our ability to swiftly deliver new features when needed allows us to undercut emerging competitors with a unique offering.&lt;/p&gt;
&lt;h1 id="minimize-obstacles-to-change"&gt;Minimize obstacles to change&lt;/h1&gt;
&lt;p&gt;One of the most successful collaborations I have had was with an information architect/designer who knew HTML. I was working with him on a project that needed to communicate highly technical detail to non-technical customers. Our process ended up looking like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We hammered out the key concepts together.&lt;/li&gt;
&lt;li&gt;He’d implement or change the layouts.&lt;ul&gt;
&lt;li&gt;Often, this step completed the work because the underlying information was already available to the page; it just needed to be displayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;He’d mark any places where he didn’t know how to get the information he wanted.&lt;/li&gt;
&lt;li&gt;I’d implement the code that provided the necessary information.&lt;ul&gt;
&lt;li&gt;Often, this step completed the work because the design and formatting was already in place.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If necessary, he’d go back and do a second formatting pass, especially if the information wasn’t exactly in the format he’d anticipated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Why did this strategy work so well? Because it was often a 0-person handoff process, sometimes a 1-person process, and occasionally a 2-person process.&lt;/p&gt;
&lt;p&gt;Why did this approach work in this case but not in many other situations?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The information architect was enthusiastic about learning an unusual skillset (HTML/Angular) for the work.&lt;/li&gt;
&lt;li&gt;I designed the project so that it was trivial for the information architect to make changes directly to code. For example, I set up a very simple Git workflow just for the architect that bypassed a lot of the normal developer complexities.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In software development, handoffs and collaboration are expensive. That’s not to say they aren’t vitally important, but if our goal is fast feature development, we want to think carefully about where and when they are necessary.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are there non-standard skills we could give certain roles that would streamline work?&lt;/li&gt;
&lt;li&gt;Could certain collaborations be delayed until after features ship?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, the goal is to reduce the obstacles to shipping quality features, not eliminate collaboration or minimize interaction.&lt;/p&gt;
&lt;h1 id="user-expectations-and-change-management"&gt;User expectations and change management&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;How quickly can we drop or change features?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;“Let’s stop collecting the date of their first pet’s birth so that we can drop the Python 2.3 analysis module. It’ll let us ship the new pet friendship feature six months earlier.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“We can’t do that without a feature-equivalent alternative. CustomerUno depends on that capability.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I’ve lost track of how often the ability to make fast changes is sidelined by an old feature that just happens to be critical to one particular customer that’s important to someone in marketing. In short, once a feature gets released and adopted by a customer, it tends to be unremovable.&lt;/p&gt;
&lt;p&gt;On the one hand, this is understandable. Customers buy a product, and seeing features go away feels bad. Seeing them just disappear without notice is worse. On the other hand, this friction is bad for our goals as a company of being able to move fast.&lt;/p&gt;
&lt;p&gt;So what might we do?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make it really easy to write feature help, onboarding, and change documentation&lt;sup id="fnref:change"&gt;&lt;a class="footnote-ref" href="#fn:change"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Make significant changes frequently so customers expect it of us.&lt;/li&gt;
&lt;li&gt;Publicize popularity stats for our features so that changes are foreseeable by customers. (I considered making longevity guarantees, but that likely conflicts with our key competitive advantage of being able to ship new features quickly).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The overall goal is to condition customers to expect change and a certain amount of disruption, and develop a relationship with our customers where they are clear that the disruption with new functionality is a net win for them.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;Somewhere I read that you can’t beat the industry by following standard industry practices. That is, by definition, standard industry practices produce standard industry results. That doesn’t make standard practices bad. They are, after all, standard for a reason. But sometimes it’s beneficial to take a step back and say, “If our goal was really to do such-n-such, how might we structure our company to achieve that goal?”&lt;/p&gt;
&lt;p&gt;I’m certain what I’ve outlined here isn’t the exhaustive list of approaches to achieving fast feature delivery, but I hope readers have enjoyed the thought exercise. What else would you do to optimize for lightning-quick feature delivery?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:change"&gt;
&lt;p&gt;I see very few live services that do this well. The most common approach seems to be popups that introduce me to new features when I’m in a hurry to get something done, which is, well, suboptimal. This topic probably deserves an article of its own. &lt;a class="footnote-backref" href="#fnref:change" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="software design"></category><category term="knowledge"></category><category term="uncertainty"></category><category term="smart goals"></category></entry><entry><title>Frictionless Change</title><link href="https://rayalan.github.io/frictionless-change-part-2.html" rel="alternate"></link><published>2024-03-06T00:00:00-05:00</published><updated>2024-03-06T00:00:00-05:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2024-03-06:/frictionless-change-part-2.html</id><summary type="html">
&lt;blockquote&gt;
&lt;p&gt;What if a company wanted speed to market to be one of its primary advantages?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://rayalan.github.io/frictionless-change-part-1.html"&gt;Last time&lt;/a&gt;, I explored the idea that being able to quickly pivot and ship software to market can be a competitive advantage. I touched on the idea that languages that are better able to represent …&lt;/p&gt;</summary><content type="html">
&lt;blockquote&gt;
&lt;p&gt;What if a company wanted speed to market to be one of its primary advantages?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://rayalan.github.io/frictionless-change-part-1.html"&gt;Last time&lt;/a&gt;, I explored the idea that being able to quickly pivot and ship software to market can be a competitive advantage. I touched on the idea that languages that are better able to represent complex concepts – such as &lt;a href="https://en.wikipedia.org/wiki/MapReduce"&gt;MapReduce&lt;/a&gt; – might offer a technical advantage. And I looked at three business pressures that tend to undermine a company’s speed to market.&lt;/p&gt;
&lt;p&gt;Today, I want to do a thought experiment – suppose a business really wanted its time to market for software features to be a competitive advantage – what might it do? This article focuses on the necessary technical choices, and &lt;a href="https://rayalan.github.io/frictionless-change-part-3.html"&gt;part 3&lt;/a&gt; will examine the corresponding employee and business decisions.&lt;/p&gt;
&lt;h1 id="boring-technology"&gt;Boring technology&lt;/h1&gt;
&lt;p&gt;First, &lt;a href="https://mcfunley.com/choose-boring-technology"&gt;choose boring technology&lt;/a&gt;, as described by Dan McKinley. Learning new technologies is expensive. Strange failure modes are expensive. Unknowns are expensive. And since we’re building our company for being able to push features really quickly to market, technological unknowns are really bad. Instead, we want a set of common tools that can reliably and robustly solve any problem that we’re likely to encounter – and quite a few problems that we’re not likely to encounter.&lt;/p&gt;
&lt;p&gt;And yes, this means our solutions may not be performant. They don’t have to be – after all, the competitive advantage we’re after is sustainable speed, not economy of scale.&lt;/p&gt;
&lt;h1 id="change-agnostic-technology"&gt;Change agnostic technology&lt;/h1&gt;
&lt;p&gt;Related to the previous point, we want to choose tools that can be used flexibly.&lt;/p&gt;
&lt;p&gt;Git, for example, excels at this. At its core, it’s a data store organized as a file system with time-oriented sequences and optimized for text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why, yes, I’ve used Git as a makeshift database.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Alan, on how he’s horrified various coworkers&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It can store code. But it can also store configuration data. Or logs. Or large binaries. Or even function as a makeshift database&lt;sup id="fnref:database"&gt;&lt;a class="footnote-ref" href="#fn:database"&gt;1&lt;/a&gt;&lt;/sup&gt;. I’ve occasionally done all of these, sometimes to the horror of my coworkers. (And we won’t talk about my coworker’s reaction when I suggested turning Stripe’s key:value data storage into an arbitrary data store by splitting JSON strings across multiple keys.)&lt;/p&gt;
&lt;p&gt;My point here is not that Git (or Stripe) &lt;em&gt;should&lt;/em&gt; be used in these ways. But these kinds of generic tools are incredibly flexible, which makes it easy to adapt them to a particular problem.&lt;/p&gt;
&lt;p&gt;In contrast, GitHub is a bad choice here. Yes, it is boring technology. But it also supports very particular workflows. Suppose, for example, that one wants to support reviewing code after it merges? Or a two-staged review process? Or even something “simple” such as unifying tickets and pull requests into a single object?&lt;/p&gt;
&lt;p&gt;All of these changes are hard to do with GitHub. And we want more control over the developer experience so that we can optimize the process for quick turnarounds. This doesn’t mean GitHub is a bad product – it excels at what it does – it just makes it a bad fit for our goals.&lt;/p&gt;
&lt;h1 id="security-and-data-writing-approach"&gt;Security and data writing approach&lt;/h1&gt;
&lt;p&gt;Anytime a company keeps customer-specific data in a centralized location, there are two big risks with shipping a new feature:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What if those changes give unintended access to some other data?&lt;/li&gt;
&lt;li&gt;What if those changes change how data is written?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After all, a problem displaying data can easily be corrected with a new software update. But if a change goes out and starts writing data incorrectly, then bad data persists even with an update. And if that change also ensured that the correct data isn’t getting written, that’s likely a PR nightmare.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Company loses week’s worth of data&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Alan, on how &lt;strong&gt;not&lt;/strong&gt; to earn customer confidence&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So in order to quickly turn around new features, we’re going to want guarantees that our changes don’t alter how we write data (and thus potentially break features) and that they don’t open up privilege escalation or other security vulnerabilities.&lt;/p&gt;
&lt;p&gt;Ideally, we’re going to want those guarantees to be provable through automation. We don’t want to take the time for a human to validate each change, or to risk that the human makes a mistake. Better yet, reliable automated checks here mean that we need less code review before changes are made – if a change can be certified to only impact how data is displayed, then many of the risks to a change go away.&lt;/p&gt;
&lt;p&gt;This implies that we want a very clear architecture for writing and storing data. Perhaps a data store that knows about the individual permissions for each row of data. Each query comes with the intended user, and so a query is incapable of returning results that should not be displayed to the user.&lt;/p&gt;
&lt;p&gt;No doubt that this is a hard problem – that is, in part why there are so many security vulnerabilities – but it’s the kind of problem that we’d solve in order to make truly quick turnaround a competitive advantage.&lt;/p&gt;
&lt;h1 id="established-patterns"&gt;Established patterns&lt;/h1&gt;
&lt;p&gt;The idea of modularity and well-established patterns extends beyond security and data protection. For example, if one is shipping a new feature, there need to be metrics – is the feature working as expected? Is anyone using it? Does anyone like it?&lt;/p&gt;
&lt;p&gt;In a fast turnaround environment, the way that these questions {{{VERB}}} can’t be recreated each time. Instead, the very act of writing a new feature should add the necessary dashboards and metrics. When I write code like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;if FEATURE_FLAG_COOL_NEW_THING:
  page.add(myNewFeature(options))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then that needs to result in the a dashboard for CoolNewThing showing page loads, errors, latency, user interactions, and customer satisfaction – as well as details for how the feature is being used. Maybe there’s even a number correlating the NPS score for users who interact with my feature vs. those who don’t. If there are significant business costs associated with my feature, those should be visible, too. If there are asynchronous behaviors such as outgoing events or generated reports, those should likewise be tracked in the dashboard.&lt;/p&gt;
&lt;p&gt;Likewise, when there is a problem, logging, data lineage, and other debugging resources should have been naturally been populated just by writing the new feature.&lt;/p&gt;
&lt;h1 id="modularity"&gt;Modularity&lt;/h1&gt;
&lt;p&gt;One implication of this approach is careful modularity – the deep awareness of which data writes are going to be affected by a change or the ability to be certain that code only impacts users with a particular feature flag enabled implies a careful attention to the modularity of the software. Pages are going to be written in a particular way so that it is easy to tell – via automated tooling – that these changes only impact one feature’s flags. Data writes are going to be written in a particular way so that code inspection can guarantee that only particular records will be written differently. Certain classes will be used in very particular ways to ensure the right metrics are properly generated.&lt;/p&gt;
&lt;p&gt;And of course, these features need to be easy to use. If they aren’t, the whole idea of fast turnaround for features goes out the window.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;So far, I’ve looked at a few of the technical aspects of speed as a competitive advantage. &lt;a href="https://rayalan.github.io/frictionless-change-part-3.html"&gt;Next time&lt;/a&gt;, I’ll look at some of the underlying business considerations.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:database"&gt;
&lt;p&gt;High volume throughput won’t work, of course, and one does need an approach for conflict resolution, preferably one that naturally works with Git’s merge strategies. Or, of course, write one’s own merge strategy. &lt;a class="footnote-backref" href="#fnref:database" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="software design"></category><category term="knowledge"></category><category term="uncertainty"></category><category term="smart goals"></category></entry><entry><title>Frictionless Change</title><link href="https://rayalan.github.io/frictionless-change-part-1.html" rel="alternate"></link><published>2024-02-25T00:00:00-05:00</published><updated>2024-02-25T00:00:00-05:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2024-02-25:/frictionless-change-part-1.html</id><summary type="html">
&lt;blockquote&gt;
&lt;p&gt;Being first to market doesn’t matter if you can replicate your competitors’ features instantly.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Joel Spolsky?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A long time ago, someone&lt;sup id="fnref:article"&gt;&lt;a class="footnote-ref" href="#fn:article"&gt;1&lt;/a&gt;&lt;/sup&gt; –&lt;a href="https://www.joelonsoftware.com/"&gt;Joel Spolsky&lt;/a&gt;, if I recall correctly – made a basic point about being in a software business:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;He didn’t worry about competitors rolling out new features.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;He …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">
&lt;blockquote&gt;
&lt;p&gt;Being first to market doesn’t matter if you can replicate your competitors’ features instantly.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Joel Spolsky?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A long time ago, someone&lt;sup id="fnref:article"&gt;&lt;a class="footnote-ref" href="#fn:article"&gt;1&lt;/a&gt;&lt;/sup&gt; –&lt;a href="https://www.joelonsoftware.com/"&gt;Joel Spolsky&lt;/a&gt;, if I recall correctly – made a basic point about being in a software business:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;He didn’t worry about competitors rolling out new features.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;He worried about competitors who could quickly copy his new features.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Corollary: What matters in one’s own software is the ability to quickly implement the same functionality that a competitor rolls out&lt;sup id="fnref:copy"&gt;&lt;a class="footnote-ref" href="#fn:copy"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;After all, if one can announce the release of feature &lt;em&gt;boil-chicken-with-dumplings&lt;/em&gt; a couple weeks after it makes a big splash, one can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep one’s existing customers (after all, is anyone really leaving over having a new feature two weeks later?)&lt;/li&gt;
&lt;li&gt;Gain new customers who are interested in the feature&lt;/li&gt;
&lt;li&gt;Benefit from the competitor’s hype and marketing around this new capability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, pivoting and reacting quickly mattered. And the main point of Joel’s article was that selecting tools and approaches that enabled that reactivity was a competitive advantage.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Selecting tools and approaches that enabled that reactivity was a competitive advantage.”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;My premise&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.joelonsoftware.com/2006/08/01/can-your-programming-language-do-this/"&gt;This article&lt;/a&gt; about Lisp, also by Spolsky, makes a similar point – the more easily one’s language can express complex concepts, the faster one can develop.&lt;/p&gt;
&lt;p&gt;In a rudimentary sense, the whole art of software development is about how to quickly make a computer system do what we want. After all, all software can be reduced to a set of inputs, a set of transformations, and the corresponding outputs. And a &lt;a href="https://en.wikipedia.org/wiki/Turing_machine"&gt;Turing machine&lt;/a&gt; executes every known program.&lt;/p&gt;
&lt;p&gt;But since writing machine instructions on punch cards isn’t fast, a whole industry of tools has emerged: assembly languages, compilers, high-level languages, libraries, memory management and garbage collectors, editors and IDEs, virtual machines, cloud computing – companies adopt these in an attempt to make writing correct software faster&lt;sup id="fnref:faster"&gt;&lt;a class="footnote-ref" href="#fn:faster"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:exception"&gt;&lt;a class="footnote-ref" href="#fn:exception"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="is-development-faster-a-shifting-goalpost"&gt;Is development faster? A shifting goalpost&lt;/h1&gt;
&lt;p&gt;In the years since I’ve read that article, I’ve often encountered the ideas of speed and agility. In fact, I’ve never met a software executive who wanted engineering to ship features slower or take longer to fix a bug&lt;sup id="fnref:marketing"&gt;&lt;a class="footnote-ref" href="#fn:marketing"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;So has software development gotten faster?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I don’t know – trying to answer that question is beyond the scope of this article. But there are at least three trends the push in the opposite direction:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Increased expectations.&lt;/li&gt;
&lt;li&gt;Software as a service and vendor lock-in.&lt;/li&gt;
&lt;li&gt;Short-term change with long-term costs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And I want to posit a fourth emergent problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Expecting frictionless agility from friction-based tooling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the rest of this article, I’ll break down these three trends pushing against faster development and then explore the emergent problem in the next entry.&lt;/p&gt;
&lt;h1 id="increased-expectations"&gt;Increased expectations&lt;/h1&gt;
&lt;p&gt;As technology has advanced, expectations have increased for software. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Customers expect responsive designs that adapt to their device rather than everyone running a universal 640x480 resolution.&lt;/li&gt;
&lt;li&gt;Developers expect meaningful compiler errors, not cryptic “program encountered an error somewhere” messages.&lt;/li&gt;
&lt;li&gt;Gamers expect to easily connect with their online friends, not fight through hours of network configuration menus.&lt;/li&gt;
&lt;li&gt;Designers expect to refresh the look of an application after a few years when it is looking tired.&lt;/li&gt;
&lt;li&gt;Sales expects to be able to create sandbox environments for their prospective enterprise customers to try out.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On top of that, software has become ubiquitous everywhere - doctors and dentists have them, truckers have them, police officers have them, plumbers have them. And that means software needs to be accessible to almost anyone, not experts who have dedicated their lives to using computers.&lt;/p&gt;
&lt;p&gt;And finally, expectations have increased as people see more what software can do. Once I realize how convenient it is to be able to track packages online, I want that ability from every shipping provider. Once I realize how convenient online banking is, I want all my financial institutions to support it. And so on.&lt;/p&gt;
&lt;p&gt;All of these increased expectations makes software harder and slower to develop.&lt;/p&gt;
&lt;h1 id="software-as-a-service-and-vendor-lock-in"&gt;Software-as-a-service and vendor lock-in&lt;/h1&gt;
&lt;p&gt;Every business wants recurring customers. But this creates some weird incentives – if I invent a light bulb that never burns out, how many of them can I sell?&lt;/p&gt;
&lt;p&gt;Maybe 5 per person? Maybe more if I can identify an industrial use for them? But ultimately, the longevity of my lightbulb will cap how many of them I can sell. And so it’s far more profitable for my light bulb to last longer than my competitors’ bulbs…but not forever.&lt;/p&gt;
&lt;p&gt;In many cases, software has hit a similar point. How much better can document writing be? How much better can presentation software be? How much better can home budgeting software be? The reality is that in most cases, the incremental improvements just don’t justify the upgrade price.&lt;/p&gt;
&lt;p&gt;And so many companies, being run by sensible people, have moved to software-as-a-service. And since these companies aren’t interested in losing customers, they’re motivated to make it hard to leave, but not so hard that customers won’t sign up. Sometimes it is forcing people to call rather than being able to cancel a service online. Sometimes it is Apple’s walled garden. Sometimes it is the friction of adapting one’s internal systems.&lt;/p&gt;
&lt;p&gt;Whatever the case, it creates friction to change.&lt;/p&gt;
&lt;p&gt;For example, suppose that my company is currently using GitHub and someone discovers that we will ship software three times as fast if do reviews after code is merged. How quickly can we roll out that change?&lt;/p&gt;
&lt;p&gt;Not very fast. GitHub’s offering is fundamentally rooted in the assumption that pull requests and reviews happen prior to merging. So I basically have three options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Switch providers.&lt;/li&gt;
&lt;li&gt;Hack together a custom system using various GitHub capabilities.&lt;/li&gt;
&lt;li&gt;Don’t improve the speed we deliver software at.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;None of these are great solutions – (1) and (2) are time consuming and expensive, while (3) doesn’t realize the benefit.&lt;/p&gt;
&lt;h1 id="short-term-changes-with-long-term-costs"&gt;Short-term changes with long-term costs&lt;/h1&gt;
&lt;p&gt;Finally, a lot of software engineering is driven by short-term needs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The key question is often: How quickly can this feature ship? Time is money, after all.&lt;/li&gt;
&lt;li&gt;Performance reviews often cover six or possibly twelve months – not the cumulative effects of years of decisions.&lt;/li&gt;
&lt;li&gt;People rarely stay at a company – let alone a single position – for more than a few years.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Almost by definition, this creates a situation where there is very little incentive for engineers to make decisions with long-term ramifications in mind. And bizarrely, I’m incentivized to hope that my predecessor left some easy-to-resolve problems so that I can chalk up some easy wins.&lt;/p&gt;
&lt;p&gt;I’ve certainly put others in this situation. In one scenario, for example, I introduced &lt;a href="https://waf.io/book/"&gt;waf&lt;/a&gt; as a non-Makefile solution for complex build patterns. At the time, it was a fantastic solution. But as the company shifted directions over the years, there wasn’t much need for a cross-language Makefile alternative that excelled at minimizing local build times with excellent dependency graphs. The result was that waf slowed down development – too expensive and time consuming to remove, but also too complicated and convoluted for developers to easily make their desired changes.&lt;/p&gt;
&lt;p&gt;There’s even a common architectural anti-pattern that results from this – &lt;a href="https://exceptionnotfound.net/lava-flow-the-daily-software-anti-pattern/"&gt;lava flow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And while lava flows can happen in many different ways, here’s a common large-scale pattern I’ve observed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Observe that a current framework or library is difficult to develop in.&lt;/li&gt;
&lt;li&gt;Propose a new approach that will be far easier and faster to develop in.&lt;/li&gt;
&lt;li&gt;Develop a cost comparison showing that for six months of developer effort, we can save years and years of labor.&lt;/li&gt;
&lt;li&gt;Because backporting all of our existing systems is too time consuming, we’ll only backport a few key systems and do the rest on an as-needed basis.&lt;/li&gt;
&lt;li&gt;Management signs off on the effort.&lt;/li&gt;
&lt;li&gt;The initiative mostly succeeds&lt;sup id="fnref:succeeds"&gt;&lt;a class="footnote-ref" href="#fn:succeeds"&gt;6&lt;/a&gt;&lt;/sup&gt;, although only about 70% of the porting gets done and some promised functionality ends up getting cut for scope.&lt;/li&gt;
&lt;li&gt;Priorities shift, personnel changes, and someone notices that there’s a framework or library that’s difficult to develop in…&lt;/li&gt;
&lt;li&gt;Repeat the process.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The reality is that each initiative never achieves the expected benefits because it is being constantly sabotaged by the next attempt at improvement.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Alan, assessing actual vs. expected benefit&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;A cynic might look at this evidence and ask: Do companies really believe that speed of delivery is essential to their success?&lt;/p&gt;
&lt;p&gt;Yes, practices such as DevOps, continuous integration, continuous deployment, infrastructure as code, and feature flags are all big steps forward. All too often, though, pressures&lt;sup id="fnref:pressures"&gt;&lt;a class="footnote-ref" href="#fn:pressures"&gt;7&lt;/a&gt;&lt;/sup&gt; such as increased expectations, limited tooling options, and short-term business needs overwhelm the ability to quickly pivot.&lt;/p&gt;
&lt;p&gt;And perhaps the cynic has a point – after all, most public companies are set up to reward quarterly or yearly profits, not decades of sustained profit. Likewise, when was the last time an employee offer included a significant bonus for hitting a decade-long performance metric? How many performance metrics even last a decade?&lt;/p&gt;
&lt;p&gt;But suppose a company really wanted to hone speed to market as a competitive advantage. What might they do? That’s what I’ll consider in &lt;a href="https://rayalan.github.io/frictionless-change-part-2.html"&gt;part 2&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:article"&gt;
&lt;p&gt;I can’t find the original article; the article on Lisp I reference later is related, but not the one I’m thinking of. &lt;a class="footnote-backref" href="#fnref:article" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:copy"&gt;
&lt;p&gt;The assumption here is that the features being copied are worthwhile and valuable. &lt;a class="footnote-backref" href="#fnref:copy" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:faster"&gt;
&lt;p&gt;I’d categorize security as a form of correct software – software that can be abused for nefarious purposes isn’t correct software. Likewise, since the cost of developers is one of the main costs of development, writing software faster is one of the main ways to reduce costs. &lt;a class="footnote-backref" href="#fnref:faster" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:exception"&gt;
&lt;p&gt;There is exception to this claim that comes to mind, which I’ll address a bit later. &lt;a class="footnote-backref" href="#fnref:exception" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:marketing"&gt;
&lt;p&gt;Emphasis on engineering taking longer; I’ve certainly seen marketing or other business reasons for a feature getting delayed. &lt;a class="footnote-backref" href="#fnref:marketing" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:succeeds"&gt;
&lt;p&gt;Let’s assume success. Such projects can be a complete disaster, too, of course. &lt;a class="footnote-backref" href="#fnref:succeeds" title="Jump back to footnote 6 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:pressures"&gt;
&lt;p&gt;This list isn’t exhaustive either. Software validation (i.e., testing) and personnel turnover are at least two more areas that push against rapid development. &lt;a class="footnote-backref" href="#fnref:pressures" title="Jump back to footnote 7 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="software design"></category><category term="knowledge"></category><category term="uncertainty"></category><category term="smart goals"></category></entry><entry><title>Annual Performance Reviews (Part 2)</title><link href="https://rayalan.github.io/annual-reviews-part-2.html" rel="alternate"></link><published>2024-01-29T00:00:00-05:00</published><updated>2024-01-29T00:00:00-05:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2024-01-29:/annual-reviews-part-2.html</id><summary type="html">&lt;p&gt;Last time, I wrote about &lt;a href="https://rayalan.github.io/annual-reviews.html"&gt;the problem of annual reviews&lt;/a&gt; and started rethinking the problem if we were solving it for the first time with modern technology. By the end of the thought experiment, we were a company designing a new product, SmartReviews, with four key features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Regular, low-effort collection …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Last time, I wrote about &lt;a href="https://rayalan.github.io/annual-reviews.html"&gt;the problem of annual reviews&lt;/a&gt; and started rethinking the problem if we were solving it for the first time with modern technology. By the end of the thought experiment, we were a company designing a new product, SmartReviews, with four key features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Regular, low-effort collection of feedback from employees.&lt;/li&gt;
&lt;li&gt;Trend-based alerting for management.&lt;/li&gt;
&lt;li&gt;Directed prompts for specific feedback.&lt;/li&gt;
&lt;li&gt;AI-assisted writing (because everything is cooler with AI).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Today I want to go through each of these features in detail, exploring how they streamline the annual performance review process.&lt;/p&gt;
&lt;p&gt;How would each of these features work?&lt;/p&gt;
&lt;h1 id="low-effort-feedback-collection"&gt;Low-effort feedback collection&lt;/h1&gt;
&lt;p&gt;In the places I&amp;rsquo;ve worked, feedback collection is hard. Every few months, I&amp;rsquo;m asked to give feedback on some people. But do I remember specifics? Was I paying particular attention to their work? Often, I have this bland &amp;ldquo;they were a good employee &amp;ndash; what else do I say?&amp;rdquo; reaction. Meanwhile, there are employees who I have very clear praise or insight about, and I&amp;rsquo;m not prompted to submit any feedback there. Sure, I could go the extra mile to do so&amp;hellip;but the system doesn&amp;rsquo;t make it easy.&lt;/p&gt;
&lt;p&gt;SmartReviews would solve this by being tied into all the systems. It would look at tickets, pull requests, emails, instant messages, documents, and calendars to see who had been interacting. And then it would prompt each individual for notes or observations about those interactions. It&amp;rsquo;d provide handy links to the relevant artifacts.&lt;/p&gt;
&lt;p&gt;Feedback could either be one of two types:
  * &lt;em&gt;An observation point&lt;/em&gt;: When Jane did such-n-such, it came across as unprofessional because of this-n-that.
  * &lt;em&gt;A hypothesis of a trend&lt;/em&gt;: I suspect that when Joe is frustrated, he expects others to solve his problem, leading him to post terse messages in Slack.&lt;/p&gt;
&lt;p&gt;At this stage, the feedback wouldn&amp;rsquo;t be shared. The goal is collecting feedback; it will be synthesized later. The goal is to help people understand long-term trends. Individuals are prompted for feedback every couple weeks&lt;sup id="fnref:tune"&gt;&lt;a class="footnote-ref" href="#fn:tune"&gt;1&lt;/a&gt;&lt;/sup&gt; based on their interactions with others &amp;ndash; and, of course, they can make notes about other people. For trends, the individual is prompted if they&amp;rsquo;ve had any noteworthy interactions. Was the hypothesis supported? Or was there a conflicting example?&lt;/p&gt;
&lt;p&gt;As an added bonus to SmartReviews &amp;ndash; we can roughly track how much time people are spending on feedback, which artifacts people reference, and how helpful that feedback is to individuals. Because we sell this product to lots of companies, we can see how different designs of our software lead to different outcomes, and select the best review processes&lt;sup id="fnref:privacy"&gt;&lt;a class="footnote-ref" href="#fn:privacy"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Then when the actual review period rolls around, each employee has all of these pre-populated data points on each employee, along with any hypotheses they created about bigger behavior patterns. Now it is clear who should be writing reviews for whom, based on what each employee observed over the past months. An employee can look over lots of individual interactions and ask, &amp;ldquo;What broader pattern emerges?&amp;rdquo; Or an employee can revisit a hypothesis, see if it was supported by the evidence, and refine or abandon it as necessary. Since all of this feedback was initially created in the context of artifacts such as messages, calendar appointments, and pull requests, reviewers don&amp;rsquo;t need to go hunting for that data &amp;ndash; it&amp;rsquo;s already included.&lt;/p&gt;
&lt;p&gt;As an added bonus, we can give employees some help writing reviews with AI (see that feature later on) to further streamline this process.&lt;/p&gt;
&lt;h1 id="trend-based-alerting-for-management"&gt;Trend-based alerting for management&lt;/h1&gt;
&lt;p&gt;Typically, review systems want everyone to get reviewed. Often, this means someone gets asked to write a review about Joe who is a complete loner, and it&amp;rsquo;s really hard to know what to say. Joe wasn&amp;rsquo;t a problem. But nobody really knows what Joe did. And so Joe&amp;rsquo;s review is very bland.&lt;/p&gt;
&lt;p&gt;With SmartReviews, this problem can be spotted during the year, without waiting until the review period rolls around. SmartReviews can look at which individuals aren&amp;rsquo;t generating any feedback &amp;ndash; or generating lots of negative feedback &amp;ndash; and alert managers to problematic trends.&lt;/p&gt;
&lt;p&gt;Note that the managers aren&amp;rsquo;t getting specific feedback from SmartReview &amp;ndash; the effectiveness of our system hinges on users knowing that their individual observations are private until they share them. But we can do an aggregate analysis and alert managers that they may need to pay more attention in a particular area&lt;sup id="fnref:scale"&gt;&lt;a class="footnote-ref" href="#fn:scale"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="directed-prompts-for-specific-feedback"&gt;Directed prompts for specific feedback&lt;/h1&gt;
&lt;p&gt;In addition to collecting feedback from individuals, SmartReviews can give directed prompts to people who interact with a certain person. For example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You recently read some documentation [link]. How would you evaluate it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These prompts can have a variety of sources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Individuals wanting to grow.&lt;/li&gt;
&lt;li&gt;Managers looking for feedback about a specific habit.&lt;/li&gt;
&lt;li&gt;System owners looking for feedback about their systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an advanced feature, SmartReview could use sentiment analysis to generate smart prompts. For example, if one individual is giving a lot of negative feedback about a particular system, it might generate a prompt for other users of the system, specifically soliciting their experience.&lt;/p&gt;
&lt;h1 id="ai-assisted-writing"&gt;AI-assisted writing&lt;/h1&gt;
&lt;p&gt;Finally, writing reviews is hard. What&amp;rsquo;s hard about them?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sometimes it&amp;rsquo;s hard to have anything concrete. The person is a generic good employee. They work hard, communicate decently, and ship quality code. It&amp;rsquo;s good work. There&amp;rsquo;s not much to critique. But there&amp;rsquo;s also not many specifics to praise.&lt;/li&gt;
&lt;li&gt;Sometimes it&amp;rsquo;s hard to get the tone right. I want this feedback to be taken as a strong trait that could get stronger, not as a weakness. I really want some other feedback to be taken as a long-term concern, but not an immediate problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In both these cases, we can introduce an AI-assisted review assistant (ARA). For good employees, ARA can understand the characteristics that make a good employee. Then ARA can give prompts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How often have you observed this behavior?&lt;/li&gt;
&lt;li&gt;When is a time when they illustrated this behavior?&lt;/li&gt;
&lt;li&gt;Have you ever seen them not exhibit this behavior?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By asking these questions, ARA can help draw out and help construct a far better review than &amp;ldquo;I really like Jane&amp;rsquo;s work.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Similarly, when I&amp;rsquo;m just frustrated, I can enter my rant into ARA, and ARA can help me turn that into helpful feedback:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prompt for more details (as above).&lt;/li&gt;
&lt;li&gt;Prompt for other considerations, such as what the employee has done well (as above).&lt;/li&gt;
&lt;li&gt;Help me understand how the feedback is likely to be received. &amp;ldquo;This feedback is likely to be seen as an unprofessional personal conflict because of these factors&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Understand how I want to categorize my feedback (praise, possible long-term concern, growth opportunity, immediately problematic behavior).&lt;/li&gt;
&lt;li&gt;Rewrite my review with a professional tone, according to my intent.&lt;/li&gt;
&lt;li&gt;Iterate on the above feedback until I&amp;rsquo;ve generated some professional and helpful feedback.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This feature is hard to get right (AI hallucinations could be all sorts of headaches), but it could also really help feedback to be shared with the right context. As an added bonus, since we&amp;rsquo;re dealing in a closed system (both the employees and managers are using SmartReview), we can add some tags or other metadata to help indicate the intent of the feedback, which can help everyone be on the same page when they read it.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;At this point, we&amp;rsquo;ve got a system that is really cool:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a minimal hassle when reviews come around; most of the reviews are being generated in real time on an ongoing basis.&lt;/li&gt;
&lt;li&gt;Feedback is being given based on actual interactions, not based on who is selected to give reviews.&lt;/li&gt;
&lt;li&gt;Managers can be aware in real time of problems or employees who may not be interacting. In particular, the system may be able to surface scenarios where everyone is struggling, but each individual thinks it is just them that is struggling, and thus nobody is speaking up.&lt;/li&gt;
&lt;li&gt;The system still integrates into a traditional annual or semi-annual review cycle. (This characteristic is important for adoption of our new product.)&lt;/li&gt;
&lt;li&gt;There is visibility into how much time and effort goes into generating feedback. Furthermore, it&amp;rsquo;s possible to close the loop on that feedback and whether it was helpful or worth the time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It won&amp;rsquo;t do everything &amp;ndash; it won&amp;rsquo;t, for example, force employees to give feedback or change a company culture where open feedback isn&amp;rsquo;t welcomed.&lt;/p&gt;
&lt;p&gt;However, it follows the DevOps principle of &amp;ldquo;that which is done often is done well&amp;rdquo; and turns feedback from a irregular activity into a regularly recurring activity.&lt;/p&gt;
&lt;p&gt;What do you think &amp;ndash; is this a good modernization of the annual review process? What else could SmartReview do?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:tune"&gt;
&lt;p&gt;We can tune the frequency based on what gets the best responses.&amp;#160;&lt;a class="footnote-backref" href="#fnref:tune" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:privacy"&gt;
&lt;p&gt;We will need to be very clear with users about which data will be visible just to SmartReviews as a company to make the product better vs. which data will be visible to others. Telling SmartReviews &amp;ldquo;this feedback wasn&amp;rsquo;t helpful&amp;rdquo; is &lt;em&gt;very&lt;/em&gt; different than telling a co-worker &amp;ldquo;this feedback wasn&amp;rsquo;t helpful.&amp;rdquo;&amp;#160;&lt;a class="footnote-backref" href="#fnref:privacy" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:scale"&gt;
&lt;p&gt;To help employees feel comfortable with their individual observations being used as sentiment, we might introduce a perspective for negative feedback. For example, Jane generating a lot of feedback about how they can grow is very different than Joe generating lots of feedback about how they are creating a hostile work environment.&amp;#160;&lt;a class="footnote-backref" href="#fnref:scale" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="systems"></category><category term="brainstorming"></category></entry><entry><title>Annual Performance Reviews (Part 1)</title><link href="https://rayalan.github.io/annual-reviews.html" rel="alternate"></link><published>2024-01-15T00:00:00-05:00</published><updated>2024-01-15T00:00:00-05:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2024-01-15:/annual-reviews.html</id><summary type="html">&lt;p&gt;Annual performance reviews are one of those staples of American corporations. As far as I can tell, they haven&amp;rsquo;t changed much in decades.&lt;/p&gt;
&lt;p&gt;Sometimes they&amp;rsquo;re done semiannually. More recently it&amp;rsquo;s popular to do the &amp;ldquo;360-degree&amp;rdquo; reviews to get feedback from peers and direct reports, not just one …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Annual performance reviews are one of those staples of American corporations. As far as I can tell, they haven&amp;rsquo;t changed much in decades.&lt;/p&gt;
&lt;p&gt;Sometimes they&amp;rsquo;re done semiannually. More recently it&amp;rsquo;s popular to do the &amp;ldquo;360-degree&amp;rdquo; reviews to get feedback from peers and direct reports, not just one&amp;rsquo;s boss. They&amp;rsquo;re typically linked to compensation adjustments and promotions. Occasionally, they&amp;rsquo;re integrated with practices such as &lt;a href="https://insight.kellogg.northwestern.edu/article/performance-review-ranking-system-best"&gt;stack ratings&lt;/a&gt;, making it easy for employers to cull the &amp;ldquo;bottom&amp;rdquo; performers&lt;sup id="fnref:mystery"&gt;&lt;a class="footnote-ref" href="#fn:mystery"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can we do better than the traditional performance review?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Beyond that, they often cause a massive amount of work for people in writing reviews. Worse yet, that work often seems disproportional to the benefit. I mean, when was the last time someone wrote &amp;ldquo;writes great performance reviews&amp;rdquo; in their review of someone?&lt;/p&gt;
&lt;p&gt;So with decades of corporate experience, the modern internet, and a bit of thought, can we do better than the traditional performance review?&lt;/p&gt;
&lt;h1 id="the-goal"&gt;The goal&lt;/h1&gt;
&lt;p&gt;As is often the case, it&amp;rsquo;s worth asking &amp;ldquo;What&amp;rsquo;s the purpose of performance reviews?&amp;rdquo; Or perhaps better yet: &amp;ldquo;What should the purpose of performance reviews be?&amp;rdquo; I find companies often have a multitude of goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Formally document unofficial sentiment. Everyone knows Jane has been doing a good job, but the review gives a way to document it and acknowledge it at a corporate level.&lt;/li&gt;
&lt;li&gt;Give valuable feedback for employees to grow and learn from.&lt;/li&gt;
&lt;li&gt;See the forest for the trees. Periodic reviews can be a chance to look at trends and patterns, not just individual moments. This helps us avoid the fallacies such as &lt;a href="https://en.wikipedia.org/wiki/Fallacy_of_composition"&gt;composition&lt;/a&gt;, looking instead of whether the sum of the many moments is more &amp;ndash; or perhaps less &amp;ndash; than the individual moments.&lt;/li&gt;
&lt;li&gt;Force managers to give feedback. Ideally, of course, an employee knows at all times what is thought of their performance, especially with regard to their boss. But sometimes that communication doesn&amp;rsquo;t go very well for whatever reason, and formal reviews force feedback to at least at some frequency.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="the-struggles"&gt;The struggles&lt;/h1&gt;
&lt;p&gt;At their worst, employee reviews become a performative dance where the question of &amp;ldquo;How much does my boss like me?&amp;rdquo; gets translated in a corporate justification. If the employee is liked, then corresponding weight is given to the employee&amp;rsquo;s accolades. A disliked employee finds more attention given to their shortcomings. And given the complexity of software development, it&amp;rsquo;s pretty easy to justify either perspective.&lt;/p&gt;
&lt;p&gt;Nobody wants to say this; it&amp;rsquo;s the stuff of law suits and HR nightmares. But it can be really easy to create a review system that sanitizes the manager&amp;rsquo;s opinion rather than giving real feedback.&lt;/p&gt;
&lt;p&gt;What else can go wrong?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many (most?) people aren&amp;rsquo;t good at tracking trends over time. This gives many reviews a heavy recency bias. (And there&amp;rsquo;s often very little training on this topic.)&lt;/li&gt;
&lt;li&gt;Many people lack the full picture when they give feedback. For example, suppose I notice that John seems courteous but distant when I interact with him. Is that because he&amp;rsquo;s busy prioritizing more important work? Is that because he doesn&amp;rsquo;t want to help me more? Is that because he has a different baseline for what friendly looks like?&lt;/li&gt;
&lt;li&gt;People are often implicitly pressured not to give critical feedback. People may avoid high-quality criticism for a number of reasons, from a fear of feedback being blown out of proportion in the review to a fear of breaking social expectations.&lt;/li&gt;
&lt;li&gt;360-style reviews often allow employees to choose their peer reviewers. Given the impact reviews can have on performance and compensation, there&amp;rsquo;s heavy incentive to select those who seem most likely to give a positive review &amp;ndash; not necessarily those who will give the most thoughtful feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="the-ideal-systems"&gt;The ideal system(s)&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s imagine we&amp;rsquo;re starting a new company that is recreating performance reviews from scratch. We want to create a product &amp;ndash; and a system of reviews &amp;ndash; that&amp;rsquo;s tailored to the modern business world. What would would we want?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As a business owner, I want a way to formally document performance that informs compensation adjustments and promotions&lt;sup id="fnref:departures"&gt;&lt;a class="footnote-ref" href="#fn:departures"&gt;2&lt;/a&gt;&lt;/sup&gt; so that quality employees are appropriately recognized and legal entanglements are avoided.&lt;/li&gt;
&lt;li&gt;As a business owner, I want my managers to have timely and relevant feedback so they can make good decisions around employee growth.&lt;/li&gt;
&lt;li&gt;As a manager, I want reviews to be straightforward and low hassle.&lt;/li&gt;
&lt;li&gt;As an employee, I want my review to highlight my strengths and best work.&lt;/li&gt;
&lt;li&gt;As an employee, I don&amp;rsquo;t want to be surprised by negative feedback.&lt;/li&gt;
&lt;li&gt;As an employee, I want a chance to correct negative perceptions before they influence my annual review.&lt;/li&gt;
&lt;li&gt;As a company selling this product, I want there to be a simple transition path for new customers from their current system so that we can gain customers.&lt;/li&gt;
&lt;li&gt;As a company selling this product, I want our product to be profitable so that I make a profit.&lt;/li&gt;
&lt;li&gt;As a company selling this product, I want companies to stick with my product so that I&amp;rsquo;m confident the product is at least good enough to retain its current users.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part of the challenge is that different parts of the system have different goals. Managers would like to know everything as soon as possible, but employees often don&amp;rsquo;t want to prematurely escalate concerns. As someone giving feedback, I want my experience to be taken seriously. But as someone receiving feedback, I don&amp;rsquo;t want a single person&amp;rsquo;s critique to unfairly dominate my review. And with each company and individual having their own style for how quickly and vocally to speak about issues, conflicting objectives easily arise, such as a manager wanting faster feedback, but individuals wanting to give more time for patterns to play out.&lt;/p&gt;
&lt;p&gt;However, as a company wanting to sell a product, we&amp;rsquo;d prefer to develop a product that is culture agnostic. Not only does this approach give us a broader customer base, but changing company culture is a hard problem &amp;ndash; and it&amp;rsquo;s far more complex if we&amp;rsquo;re selling a review system paired with a particular cultural approach.&lt;/p&gt;
&lt;h1 id="the-product"&gt;The product&lt;/h1&gt;
&lt;p&gt;So what might our product do? Let&amp;rsquo;s give it a set of features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Regular, low-effort collection of feedback from employees.&lt;/li&gt;
&lt;li&gt;Trend-based alerting for management.&lt;/li&gt;
&lt;li&gt;Directed prompts for specific feedback.&lt;/li&gt;
&lt;li&gt;AI-assisted writing (because everything is cooler with AI).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;rsquo;s call our product SmartReviews.&lt;/p&gt;
&lt;p&gt;Next time, in &lt;a href="https://rayalan.github.io/annual-reviews-part-2.html"&gt;part 2&lt;/a&gt;, I&amp;rsquo;ll unpack more of my ideas of how these features would work.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:mystery"&gt;
&lt;p&gt;Stack rankings seem like a terrible idea because one is incentivized to be the best person on a terrible team. I&amp;rsquo;m sure that there is more to it than that, but a bit of marketing to make the upsides more obvious would go a long way. After all, engineers are generally known for understanding complex systems and problem solving; does one really want them gaming the performance evaluation system?&amp;#160;&lt;a class="footnote-backref" href="#fnref:mystery" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:departures"&gt;
&lt;p&gt;And when employees need to be let go, the business wants a documentation trail that avoids lawsuits and similar unpleasantness.&amp;#160;&lt;a class="footnote-backref" href="#fnref:departures" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="systems"></category><category term="brainstorming"></category></entry><entry><title>One idea, many interpretations</title><link href="https://rayalan.github.io/one-feature-many-ways-blueprint-study.html" rel="alternate"></link><published>2023-11-14T00:00:00-05:00</published><updated>2023-11-14T00:00:00-05:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-11-14:/one-feature-many-ways-blueprint-study.html</id><summary type="html">&lt;p&gt;&lt;em&gt;How many ways are there to implement a feature?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sometimes I think about a feature like &amp;ldquo;tagging&amp;rdquo; or &amp;ldquo;billing for software as a service&amp;rdquo; or &amp;ldquo;webhooks&amp;rdquo; and think: How many ways could there really be to implement these features? Yes, there are different technical architectures with corresponding non-functional tradeoffs. But …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;How many ways are there to implement a feature?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sometimes I think about a feature like &amp;ldquo;tagging&amp;rdquo; or &amp;ldquo;billing for software as a service&amp;rdquo; or &amp;ldquo;webhooks&amp;rdquo; and think: How many ways could there really be to implement these features? Yes, there are different technical architectures with corresponding non-functional tradeoffs. But assuming all those approaches are correctly implemented, how much difference can it make to the customer?&lt;/p&gt;
&lt;p&gt;I thought it&amp;rsquo;d be fun to answer this by looking at a feature (blueprints) implemented, roughly at the same time, by three very similar games: &lt;a href="https://www.captain-of-industry.com/"&gt;Captain of Industry&lt;/a&gt;, &lt;a href="https://store.steampowered.com/app/1366540/Dyson_Sphere_Program/"&gt;Dyson Sphere Project&lt;/a&gt;, and &lt;a href="https://www.satisfactorygame.com/"&gt;Satisfactory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All three focus on building and automation.&lt;/p&gt;
&lt;p&gt;All three implement blueprints as a way to speed up building and reduce the tedium of large-scale construction.&lt;/p&gt;
&lt;p&gt;All three are very positively reviewed by users.&lt;/p&gt;
&lt;p&gt;All three share a core concept for blueprints: Blueprints can be created, saved to disk, sorted into categories (folders), and used to rapidly build structures in the game.&lt;/p&gt;
&lt;p&gt;So how much variation can there be in the implementations? Well, let&amp;rsquo;s take a look&amp;hellip;&lt;/p&gt;
&lt;h1 id="satisfactory"&gt;Satisfactory&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Example blueprint in Satisfactory" src="images/blueprint-satisfactory.png" title="Blueprints: Satisfactory" /&gt;&lt;/p&gt;
&lt;p&gt;Satisfactory starts out being unique in a couple of ways. It is a first-person view, played from the perspective of a person, rather than presenting an overhead view. As such, it fully embraces building upward, layering factory floor on top of factory floor.&lt;/p&gt;
&lt;p&gt;In this implementation, blueprints are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Restricted to a 4x4 unit square (length and width), but up to 8 units high.&lt;/li&gt;
&lt;li&gt;Do not automatically connect belts, pipes, or power when built; those must be manually connected.&lt;/li&gt;
&lt;li&gt;Only created or modified in a special building.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For context, 16 unit squares means something like 1-8 machines per level, but the 8-unit height allows for blueprints to have 2-4 levels. Combined with the lack of automatic connectivity for pipes, belts, and power, this approach encourages two types of blueprints:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Highly compact builds. Some players have made builds filled with far more machines than expected.&lt;/li&gt;
&lt;li&gt;Decorative builds &amp;ndash; a section of straight roadway that can be repeated over and over or a particular aesthetic for doors and corridors.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The dedicated building for creating or modifying blueprints makes it really easy to edit blueprints, but the limits on size and manual connections make it really hard to use blueprints to build at scale.&lt;/p&gt;
&lt;h1 id="dyson-sphere-program"&gt;Dyson Sphere Program&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Example blueprint in Dyson Sphere Program" src="images/blueprint-dyson-sphere-program.png" title="Blueprints: Dyson Sphere Program" /&gt;&lt;/p&gt;
&lt;p&gt;Dyson Sphere Program, in contrast, focuses on large-scale blueprints. As a game with a scope that grows from a single planet to a galactic scale, there&amp;rsquo;s corresponding research to unlock larger blueprints, eventually leading to planetary-scale blueprints.&lt;/p&gt;
&lt;p&gt;The blueprint implementation is a simple one:
* Select some buildings to save them as a blueprint.
* Select the blueprint to build the exact same buildings somewhere else.&lt;/p&gt;
&lt;p&gt;Notably, it&amp;rsquo;s not easy to modify existing blueprints. Blueprints are specified by filename, with existing filenames not visible when saving blueprints. And until very recently, metadata such as the blueprint names or images had to be re-entered each time the blueprint was saved.&lt;/p&gt;
&lt;p&gt;The implementation here is designed to support plopping large-scale blueprints onto planets. And it works fantastically for that. But when it comes to modifying or tweaking blueprints, this approach struggles.&lt;/p&gt;
&lt;h1 id="captain-of-industry"&gt;Captain of Industry&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Example blueprint in Captain of Industry" src="images/blueprint-captain-of-industry.png" title="Blueprints: Captain of Industry" /&gt;&lt;/p&gt;
&lt;p&gt;Captain of Industry takes an entirely different approach. In addition to a blueprint feature, it has a full-fledged planning layer, where buildings and layouts can be planned, modified, and tweaked before actually being built. This planning layer makes it easy to modify blueprints before implementing them &amp;ndash; or to modify them and then save them again.&lt;/p&gt;
&lt;p&gt;The planning layer also supports cut and paste, so it&amp;rsquo;s easy to design a layout when one isn&amp;rsquo;t sure about the final size, and then relocate that layout into the available space once everything is planned out.&lt;/p&gt;
&lt;p&gt;Because terrain matters for more in Captain of Industry than other games, there are some effective limitations on how big a useful blueprint can be. But there&amp;rsquo;s no forced limit such as in Satisfactory.&lt;/p&gt;
&lt;p&gt;Of the three, Captain of Industry&amp;rsquo;s implementation is the best, but primarily because of another feature: The planning layer.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;Three lessons stand out to me:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When I can&amp;rsquo;t think of an alternate implementation, it probably means I have tunnel vision on a particular implementation.&lt;/li&gt;
&lt;li&gt;Features don&amp;rsquo;t stand alone; they interact with the other features. Satisfactory&amp;rsquo;s limited blueprint sizes or manual connections would be intolerable in Dyson Sphere Program, for example.&lt;/li&gt;
&lt;li&gt;Some features are just good ideas. All three games, for example, would heavily benefit from a planning layer. But the cost might be too high for the benefit given the different contexts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What other lessons should I have learned?&lt;/p&gt;</content><category term="user experience"></category><category term="knowledge"></category><category term="uncertainty"></category><category term="case study"></category></entry><entry><title>Blame Free Retrospectivs</title><link href="https://rayalan.github.io/blame-free-retros.html" rel="alternate"></link><published>2023-11-07T00:00:00-05:00</published><updated>2023-11-07T00:00:00-05:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-11-07:/blame-free-retros.html</id><summary type="html">&lt;p&gt;I&amp;rsquo;m a huge fan of &lt;a href="https://www.blameless.com/blog/what-are-blameless-postmortems-do-they-work-how"&gt;blame-free retrospectives / postmortems&lt;/a&gt;. Why?&lt;/p&gt;
&lt;p&gt;Because I believe that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;High-trust environments are incredibly important to productivity in fields such as software development that involve a high degree of both judgement and technical complexity&lt;sup id="fnref:complex"&gt;&lt;a class="footnote-ref" href="#fn:complex"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;An essential part of high-trust environments is the assumption of good …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I&amp;rsquo;m a huge fan of &lt;a href="https://www.blameless.com/blog/what-are-blameless-postmortems-do-they-work-how"&gt;blame-free retrospectives / postmortems&lt;/a&gt;. Why?&lt;/p&gt;
&lt;p&gt;Because I believe that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;High-trust environments are incredibly important to productivity in fields such as software development that involve a high degree of both judgement and technical complexity&lt;sup id="fnref:complex"&gt;&lt;a class="footnote-ref" href="#fn:complex"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;An essential part of high-trust environments is the assumption of good intent by all parties.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In contrast, it&amp;rsquo;s really hard to understand what is happening in a world where everyone is trying to cover for themselves. And even worse is a world where management is using the guise of blame-free conversations to covertly gather evidence against specific individuals with a goal of blaming them for outcomes. I&amp;rsquo;ve been on the receiving end of that, and, unsurprisingly, it&amp;rsquo;s incredibly toxic.&lt;/p&gt;
&lt;h1 id="scope-or-lack-thereof"&gt;Scope (or lack thereof)&lt;/h1&gt;
&lt;p&gt;Even when postmortems are conducted blame free with the best intentions, though, there&amp;rsquo;s often a more subtle problem: &lt;em&gt;All of the players aren&amp;rsquo;t in the room.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;All of the players aren&amp;rsquo;t in the room.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, all of the team is in the room. But consider who else likely made decisions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Did the team have complete control over architecture?&lt;/li&gt;
&lt;li&gt;Did the team have complete control over their own priorities?&lt;/li&gt;
&lt;li&gt;If there were any inter-team dependencies, did the team have complete control over how those were resolved?&lt;/li&gt;
&lt;li&gt;Did the team choose their own budget and timelines?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In most companies, teams don&amp;rsquo;t have complete autonomy. There are company standards. There are pressing business priorities. Product needs new features to ship. A key initiative will be blocked if such-n-such doesn&amp;rsquo;t ship. Money is tight. Management wants to see results.&lt;/p&gt;
&lt;p&gt;And that means that teammates aren&amp;rsquo;t the only people who made decisions contributing to the outage. Someone decided that the increasingly complex monolith wasn&amp;rsquo;t worth splitting as the company grew. Someone decided that hiring more teammates wasn&amp;rsquo;t important. Someone decided that the company wasn&amp;rsquo;t going to offer 6 weeks of vacation a year as an incentive to attract the best people. Someone decided that the company focus was going to be the new feature launch, not testing and quality. Someone decided not to challenge the cultural norms around what was acceptable redundancy and prevention.&lt;/p&gt;
&lt;p&gt;Some of these decisions are certainly made by the team. And the team certainly could manage upward better. But, in every company I&amp;rsquo;ve heard of, some of those decisions are beyond the team. And yet I find blame-free retros rarely step into the bigger picture, instead focusing on the tactical decisions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Blame-free retros rarely step into the bigger picture, instead focusing on the tactical decisions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="was-the-failure-a-bad-outcome"&gt;Was the failure a bad outcome?&lt;/h1&gt;
&lt;p&gt;I once had a conversation with the C-suite that went like this:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Me: My team released a bug that cost us a five-figure amount from such-n-such date to such-n-so date, when we corrected the bug. Here&amp;rsquo;s a bit of technical background on what happened&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;C-suite: So what actions are being taken to prevent this from recurring in the future?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Me: Nothing. Here&amp;rsquo;s why&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So why no changes?&lt;/p&gt;
&lt;p&gt;From the postmortem, we&amp;rsquo;d released a software change where customers hadn&amp;rsquo;t been billed, resulting in a five-figure loss. There was no viable way of recouping those losses&lt;sup id="fnref:recoup"&gt;&lt;a class="footnote-ref" href="#fn:recoup"&gt;2&lt;/a&gt;&lt;/sup&gt;. And conveniently, customers don&amp;rsquo;t get upset with not being charged, so this was probably the most straight-forward cost calculation I&amp;rsquo;ve encountered.&lt;/p&gt;
&lt;p&gt;As is often the case, there was a complex history behind this bug &amp;ndash; prior decisions stacking on top of one another that contributed. I&amp;rsquo;d made my own contributions as team lead, such as incorrectly assuming what was common knowledge and focusing on more delegation. And there were other factors as well.&lt;/p&gt;
&lt;p&gt;The greater context of the bug was that company wanted a particular feature to market as soon as possible. And by cutting some corners, we&amp;rsquo;d successfully gotten the feature to market at least a month, possibly two months, earlier than expected. And each month earlier was worth about what the bug cost to the company. So it&amp;rsquo;s pretty easy to put together a chart summarizing possible outcomes:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time to market&lt;/th&gt;
&lt;th&gt;Shipped bug&lt;/th&gt;
&lt;th&gt;Net outcome&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-2 months&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2x profit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-2 months&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;1x profit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-1 months&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;1x profit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-1 months&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No profit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0 months&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No profit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0 months&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;1x loss&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So if we&amp;rsquo;d taken another week to ship the feature, that week needed to generate at least a 25% reduction in the chance the bug would ship in order to pay for itself. If we&amp;rsquo;d taken another 2 weeks to ship, those two weeks needed to generate at least a 50% chance to not ship the bug. And so on.&lt;/p&gt;
&lt;p&gt;Now clearly in hindsight, knowing exactly what to look for and why the bug was missed, the bug could have been easily caught. But in foresight, I think it&amp;rsquo;s pretty likely we could have taken a couple more months to ship and still missed the bug.&lt;/p&gt;
&lt;p&gt;And given that scenario, the most profitable decision was to ship the feature as soon as possible. Normally, there are other considerations, such as whether the bug was likely to repeat and how to avoid it in the future. However, given the particulars of the bug, it wasn&amp;rsquo;t likely to recur.&lt;/p&gt;
&lt;p&gt;Admittedly, this situation was atypical. But it highlights a really important question for a blame-free retrospective: Was this bug worth paying the price to prevent?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Was this bug worth paying the price to prevent?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;First, &lt;a href="https://about.gitlab.com/blog/2017/02/10/postmortem-of-database-outage-of-january-31/"&gt;some scenarios&lt;/a&gt; are so bad for the company that the risk needs to be basically zero. For comparison, there&amp;rsquo;s an &lt;a href="https://www.osti.gov/servlets/purl/1426902"&gt;interesting article&lt;/a&gt; about nuclear weapon tolerances and the complexity of calculating the actual risk. Most of us don&amp;rsquo;t handle nuclear weapons, but certain failure modes &amp;ndash; e.g., data leaks, data loss, prolonged outages &amp;ndash; may be just as catastrophic for a company. If so, I suggest it&amp;rsquo;s worth architecting the necessary protections, redundancies, and verifications deeply into the systems. That way, instead of being an afterthought vulnerable to being lost in the quest for speed, those checks are a &amp;ldquo;given&amp;rdquo; for the company&lt;sup id="fnref:givens"&gt;&lt;a class="footnote-ref" href="#fn:givens"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Secondly, the overall postmortem process shouldn&amp;rsquo;t just be about the team&amp;rsquo;s choices, but the context into which the team was placed.&lt;/p&gt;
&lt;p&gt;Finally, despite my reflections about a broader context, a blame-free mindset shared across the company is still essential to effectively evaluating what happened and what could go better next time.&lt;/p&gt;
&lt;p&gt;What else should have been my lessons learned?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:complex"&gt;
&lt;p&gt;Ideas like the &lt;a href="https://www.sixsigmadaily.com/what-is-an-andon-cord/"&gt;Andon cord&lt;/a&gt; suggest a similar idea is more broadly true, but speaking about best practices for postmortems at a cracker factory or in a political campaign is a bit beyond my expertise.&amp;#160;&lt;a class="footnote-backref" href="#fnref:complex" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:recoup"&gt;
&lt;p&gt;Basically, losses couldn&amp;rsquo;t be readily recouped because charging the customers retroactively would have led to bad publicity and far more customer service calls. It was better to eat the loss than to compound the problem.&amp;#160;&lt;a class="footnote-backref" href="#fnref:recoup" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:givens"&gt;
&lt;p&gt;This is, of course, very hard to do. Many companies don&amp;rsquo;t have an actual understanding of how much risk they are prepared to tolerate, and that tolerance can rapidly shift based on market conditions or personnel changes. I&amp;rsquo;ve found &lt;a href="https://www.amazon.com/How-Measure-Anything-Cybersecurity-Risk/dp/1119085292"&gt;&lt;em&gt;How to Measure Anything in Cybersecurity Risk&lt;/em&gt;&lt;/a&gt; a fantastic study on how to normalize the conversation.&amp;#160;&lt;a class="footnote-backref" href="#fnref:givens" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="knowledge"></category><category term="uncertainty"></category></entry><entry><title>A Tool -- Or a Puzzle?</title><link href="https://rayalan.github.io/silent-failures.html" rel="alternate"></link><published>2023-10-30T00:00:00-04:00</published><updated>2023-10-30T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-10-30:/silent-failures.html</id><summary type="html">&lt;p&gt;The other day I went to run my local blog server and got this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; pelican -r -l
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s not the normal output. Normally it spews some text about building articles, maybe a few lines about syntax errors, and a message about listening on port 8000.&lt;/p&gt;
&lt;p&gt;This time it just …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The other day I went to run my local blog server and got this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; pelican -r -l
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s not the normal output. Normally it spews some text about building articles, maybe a few lines about syntax errors, and a message about listening on port 8000.&lt;/p&gt;
&lt;p&gt;This time it just failed silently. No error. No message. Just returning to the prompt.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ugh.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After a moment&amp;rsquo;s thought, I remembered that I&amp;rsquo;d recently upgraded Python from 3.10 to 3.12, which probably had broken something. No worries, I have this handy-dandy readme that explains how to install the prerequisites for my blog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;snip&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fantastic, everything is updated. Let&amp;rsquo;s run the server again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; pelican -r -l
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Wait, what? Still nothing?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Eventually, after some more poking, I discovered that my path still contained the path to the old Python 3.10 scripts. And although the Python 3.12 path was primary, I assume &lt;em&gt;something&lt;/em&gt; about the old install was interfering with running everything in 3.12.&lt;/p&gt;
&lt;p&gt;The main evidence? After I removed the old 3.10 path, everything started working. Hurray!&lt;/p&gt;
&lt;h1 id="tool-vs-puzzle"&gt;Tool vs. puzzle&lt;/h1&gt;
&lt;p&gt;Sometimes, I love these challenges. Can I carefully follow the cryptic instructions to make the technology work on not-quite-standard system?&lt;/p&gt;
&lt;p&gt;Success is a sign of expertise; something I can brag about with my fellow programmers when we&amp;rsquo;re discussing what bizarre realms we&amp;rsquo;ve traveled.&lt;/p&gt;
&lt;p&gt;But as I&amp;rsquo;ve studied user experience, the more I&amp;rsquo;ve grown to ponder: Why does software behave like this?&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t mean the specifics of this problem, the way that paths and imports and libraries intersected to produce this particular bizarre behavior. I mean, who wants this sort of complexity from their software?&lt;/p&gt;
&lt;p&gt;Has any developer ever sat down and thought &amp;ldquo;Now that I&amp;rsquo;ve upgraded my language, I want some bizarre interactions between the old and new installations so that my command silently fails with no error output? For that matter, has any developer ever wanted to mix library imports between Python versions?&lt;/p&gt;
&lt;p&gt;Yes, probably somewhere that&amp;rsquo;s a very useful capability for some scenario. But most of the time, &lt;a href="https://www.nngroup.com/articles/ten-usability-heuristics/"&gt;basic UX heuristics&lt;/a&gt; like &lt;em&gt;error prevention&lt;/em&gt; and &lt;em&gt;visibility of system status&lt;/em&gt; are far more important.&lt;/p&gt;
&lt;p&gt;After all, I&amp;rsquo;m trying to use my computer as a tool to accomplish work, not to entertain myself for an afternoon.&lt;/p&gt;
&lt;h1 id="a-modern-medieval-guild"&gt;A modern medieval guild&lt;/h1&gt;
&lt;p&gt;I don&amp;rsquo;t mean to pick on Python libraries &amp;ndash; although these are certainly easy targets. Not too long ago, I discovered that some operating systems don&amp;rsquo;t ship Python with pip &amp;ndash; and that it can&amp;rsquo;t be readily installed without &lt;code&gt;sudo&lt;/code&gt; because &lt;em&gt;distutils&lt;/em&gt; also isn&amp;rsquo;t shipped with the operating system. Again, I&amp;rsquo;m sure there&amp;rsquo;s a good reason for this &amp;ndash; security or modularity or intellectual property rights or something. But as an end user, it&amp;rsquo;s just pain and complexity for me (and, I suppose, gainful employment).&lt;/p&gt;
&lt;p&gt;Every language has its own collection of pain and misery, whether it is figuring out how to configure webpack or specifying the TypeScript configuration or passing library parameters to the C++ compiler.&lt;/p&gt;
&lt;p&gt;However, the frequency of this kind of pain, even in more modern tools&lt;sup id="fnref:modern"&gt;&lt;a class="footnote-ref" href="#fn:modern"&gt;1&lt;/a&gt;&lt;/sup&gt;, sometimes leads me to wonder if computer science is actually a medieval guild that carefully guards its knowledge through lots of obscure hoops. And once one masters enough hoops in a particular area, one can be a gainfully employeed guild member.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;And that, in turn, leads me to wonder what software development that was more fully centered on the user experience might look like&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The interface would deal with inputs, outputs, and costs, seamlessly covering over technical complexities such as databases, data types, CSS, parallelism, or CAP theorems. No &lt;a href="https://en.wikipedia.org/wiki/Leaky_abstraction"&gt;leaky abstractions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Simulate and visualize the software in any state (including errors or outages), making real-time adjustments to the behavior.&lt;/li&gt;
&lt;li&gt;Interact in natural human language with a deep understanding of real-world relationships. &amp;ldquo;Display the user&amp;rsquo;s address in a standard format&amp;rdquo; rather than having to deal with all the different ways that states, counties, oblasts, or even post office boxes are handled across the world.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately for software developers, even the most recent versions of Copilot don&amp;rsquo;t seem capable of offering that kind of help. At least, not yet.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:modern"&gt;
&lt;p&gt;Yes, there are advancements. More meaningful error messages. Automatic garbage collection. Widespread IntelliSense. But that&amp;rsquo;s not to say that there aren&amp;rsquo;t a lot of sharp edges.&amp;#160;&lt;a class="footnote-backref" href="#fnref:modern" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="knowledge"></category><category term="uncertainty"></category></entry><entry><title>Vocabulary</title><link href="https://rayalan.github.io/vocabulary.html" rel="alternate"></link><published>2023-10-23T00:00:00-04:00</published><updated>2023-10-23T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-10-23:/vocabulary.html</id><summary type="html">&lt;p&gt;One of my favorite jokes is that there are only &lt;a href="https://martinfowler.com/bliki/TwoHardThings.html"&gt;two hard problems in programming&lt;/a&gt; &amp;ndash; naming things, caching, and off-by-one errors.&lt;/p&gt;
&lt;h1 id="a-problem-discovered"&gt;A problem - discovered&lt;/h1&gt;
&lt;p&gt;I particularly identify with that first problem &amp;ndash; how do you name something well? A few years into my career, I realized that I&amp;rsquo;d picked up …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my favorite jokes is that there are only &lt;a href="https://martinfowler.com/bliki/TwoHardThings.html"&gt;two hard problems in programming&lt;/a&gt; &amp;ndash; naming things, caching, and off-by-one errors.&lt;/p&gt;
&lt;h1 id="a-problem-discovered"&gt;A problem - discovered&lt;/h1&gt;
&lt;p&gt;I particularly identify with that first problem &amp;ndash; how do you name something well? A few years into my career, I realized that I&amp;rsquo;d picked up a bad habit: I wasn&amp;rsquo;t thoroughly learning vocabulary. I knew the concepts well, but I wasn&amp;rsquo;t understanding what a &lt;em&gt;monad&lt;/em&gt; was or the difference between a &lt;em&gt;statement&lt;/em&gt; and an &lt;em&gt;expression&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This didn&amp;rsquo;t bother me in day-to-day programming &amp;ndash; the compiler certainly never complained about my ignorance. And most documentation is completely comprehensible without understanding a closure and an anonymous function.&lt;/p&gt;
&lt;p&gt;I did find, though, two problems.&lt;/p&gt;
&lt;p&gt;First, it hampered my ability to communicate precisely with my colleagues. It&amp;rsquo;s a whole lot less precise to say &amp;ldquo;implement our tools in a standalone fashion so they can be upgraded independently&amp;rdquo; than it is to say something like &amp;ldquo;implement a hermetically sealed approach to tooling.&amp;rdquo; Both statements may communicate approximately the same intent, but using the precise vocabulary links my intent to similar work done by others rather than leaving my co-workers guessing about whether I&amp;rsquo;m referencing my own idea, a standard industry practice, or something else.&lt;/p&gt;
&lt;p&gt;Second, search engines are terrible when vague common words are substituted for industry terminology. The search results for &amp;ldquo;monorepo tooling&amp;rdquo; and &amp;ldquo;support multiple projects in one repo&amp;rdquo; are radically different. And the former one is far more useful, tapping far more quickly into the resources written by experts &amp;ndash; and who, because they are experts, use the right terminology.&lt;/p&gt;
&lt;p&gt;When I was lucky, my amateur lingo would find a critical word in one of the results, and I could refine my search. When I wasn&amp;rsquo;t lucky, I&amp;rsquo;d live happily oblivious to answers that could have dramatically improved my work.&lt;/p&gt;
&lt;h1 id="a-problem-solved"&gt;A problem - solved?&lt;/h1&gt;
&lt;p&gt;So I did what any diligent engineer would do &amp;ndash; I knuckled down and worked on my vocabulary. I paid attention to what others said, read more, and practiced using the terms in context, even if it was just explaining them to myself.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Problem solved, right?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Not so fast. First, I realized that terms are often used with varying levels of precision. For some people, a unit test means &amp;ldquo;a fast low-dependency test&amp;rdquo;. For others, it means specifically testing a single function or method with no outside dependency.&lt;sup id="fnref:unit"&gt;&lt;a class="footnote-ref" href="#fn:unit"&gt;1&lt;/a&gt;&lt;/sup&gt; For some people, invoking a specific technical term meant &amp;ldquo;something along these lines.&amp;rdquo; For others, the same technical term meant a very exact implementation &amp;ndash; &lt;em&gt;this&lt;/em&gt; and only &lt;em&gt;this&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Compounding the issue is that the use of technical jargon masks the differing ideas. After all, the use of the technical term implies knowledge and precision, right? Nobody would every use a technical term if it wasn&amp;rsquo;t appropriately precise and meaningful, right? And certainly nobody would ever use a term that they didn&amp;rsquo;t fully understand, right?&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;Three quick takeaways from this journey for me:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I still ask &amp;ldquo;What do you mean by &lt;em&gt;term&lt;/em&gt;?&amp;rdquo; all the time. But now I ask less because I don&amp;rsquo;t know what I would mean by the term, and more because I&amp;rsquo;m not sure what others mean.&lt;/li&gt;
&lt;li&gt;Knowing vocabulary has made me more conversant in a number of concepts and thus helped me be a better engineer.&lt;/li&gt;
&lt;li&gt;Naming things &amp;ndash; a.k.a. vocabulary &amp;ndash; really is one of the two hard problems of computer science.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What other lessons come to mind?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:unit"&gt;
&lt;p&gt;And no, those aren&amp;rsquo;t the only definitions. Given the multitude of definitions for types of tests, I&amp;rsquo;ve really grown fond of the &lt;a href="https://medium.com/tsengineering/fast-and-slow-tests-bbaa3d7267e8"&gt;fast or slow differentiation&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:unit" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="knowledge"></category><category term="uncertainty"></category></entry><entry><title>Sustainable Complexity</title><link href="https://rayalan.github.io/sustainable-complexity.html" rel="alternate"></link><published>2023-10-16T00:00:00-04:00</published><updated>2023-10-16T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-10-16:/sustainable-complexity.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Just use 0.0.0.0.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hypothetical pragmatic engineer, on the fastest solution.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Suppose you and a friend are doing a small startup, coding away on a prototype. It&amp;rsquo;s late at night at the local coffee shop. Your co-founder &amp;ndash; Janet &amp;ndash; wants to see your prototype feature page so she …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Just use 0.0.0.0.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hypothetical pragmatic engineer, on the fastest solution.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Suppose you and a friend are doing a small startup, coding away on a prototype. It&amp;rsquo;s late at night at the local coffee shop. Your co-founder &amp;ndash; Janet &amp;ndash; wants to see your prototype feature page so she can grab some screenshots for some fundraising efforts. What&amp;rsquo;s the fastest way to share so you can get back to coding?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why, host the website on 0.0.0.0 and point Janet at your public IP address, of course.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(My apologies for the heart attack I probably just gave to any security-minded folks&lt;sup id="fnref:security"&gt;&lt;a class="footnote-ref" href="#fn:security"&gt;1&lt;/a&gt;&lt;/sup&gt;.)&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s how quickly one moves into the complexity of juggling speed vs. sustainability. It might be reasonable to argue that any particular custom website publicly open for a few minutes at any particular coffee shop isn&amp;rsquo;t a particularly high risk. Then again, what&amp;rsquo;s the plan if a ransomware attack finds an opening and encrypts the disk? How much does the startup have backed up?&lt;/p&gt;
&lt;p&gt;The problem, of course, is that this decision likely isn&amp;rsquo;t just for a few minutes now. It&amp;rsquo;s likely to become a habit. &lt;code&gt;0.0.0.0&lt;/code&gt; gets added to a configuration script somewhere and forgotten about. The startup is successful, adds in a few more employees. The startup gets a VPN. Everybody&amp;rsquo;s busy, nobody thinks about why it is so easy to see one another&amp;rsquo;s work. And then one day, someone makes some other misconfiguration. Or perhaps a vulnerability in the underlying web application framework is discovered. Maybe the surface area of the attack hasn&amp;rsquo;t quite reached critical mass. Maybe it will take one more step &amp;ndash; maybe someone puts a version of the prototype on the web for an important customer to try out &amp;ndash; before all individual vulnerabilities tie together to create a exploitable hole. But the risk is accumulating.&lt;/p&gt;
&lt;h1 id="tradeoffs"&gt;Tradeoffs&lt;/h1&gt;
&lt;p&gt;Security isn&amp;rsquo;t the only non-functional requirement that has this trade-off. Here are a few more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Maintainability&lt;/em&gt;: As long as there&amp;rsquo;s no employee turnover, the team can move faster by not writing down institutional knowledge. And much of the documentation becomes outdated almost as soon as the commit is merged.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Testability&lt;/em&gt;: How much of the code needs to be tested? How much do the expectations of third-party libraries need to be tested? On an Agile, fast-moving team, how much of that code will actually last long enough for tests to matter? Will the right things even be tested?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Permanence&lt;/em&gt;: How long is the solution intended to last anyway? Maybe the whole goal is to prove to investors that this idea has legs. In that case, vendor lock-in really doesn&amp;rsquo;t matter. But if the idea really does have legs, will the company have the discipline to go back and create a longer-term solution? When the company is worth millions, will anyone even remember those vendor-specific dependencies or the risk they pose to the company?&lt;sup id="fnref:graveyard"&gt;&lt;a class="footnote-ref" href="#fn:graveyard"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="architecture"&gt;Architecture&lt;/h1&gt;
&lt;p&gt;Even architecture itself is one of these non-functional requirements with trade-offs. Consider how the classic spaghetti monolith comes to be. At first, it&amp;rsquo;s easy to build:&lt;/p&gt;
&lt;div class="mermaid"&gt;

flowchart TD

subgraph System
  e[Everything goes here]
end
&lt;/div&gt;

&lt;p&gt;But over time, that approach starts getting more and more complex until we&amp;rsquo;re well on our way to classic &lt;a href="https://en.wikipedia.org/wiki/Spaghetti_code"&gt;spaghetti code&lt;/a&gt; where everything is highly interconnected and it&amp;rsquo;s hard to modify or add pieces without understanding all the other pieces.&lt;/p&gt;
&lt;div class="mermaid"&gt;

flowchart TD

subgraph System
  a[The first features]
  b[An initial UI layer]
  c[A second UI for bulk uploads]
  d[Scripts for backing up and restoring]
  e[Data processing for a new vendor]
  f[Data processing for another incompatible vendor]
end

a --&gt; b
b --&gt; c
b --&gt; e
b --&gt; f
d --&gt; a
d --&gt; e
f --&gt; e
f --&gt; d
e --&gt; d
&lt;/div&gt;

&lt;p&gt;And now every time anyone changes anything, there are side effects. The whole system might come down just because some developer updated the way the system interacts with the proprietary system and that has an unexpected side effect on another data system, which cascades into a rendering layer that wasn&amp;rsquo;t properly isolated.&lt;/p&gt;
&lt;p&gt;Hrm, that&amp;rsquo;s not looking so promising. What if we start off with a different architecture? Maybe using light-weight lambdas? Maybe we get a first pass of a system like this:&lt;/p&gt;
&lt;div class="mermaid"&gt;

flowchart TD

subgraph APIs
  a[Route 1]
  b[Route 2]
  c[Route 3]
  d[Route 4]
end

subgraph Data storage
  mq&gt;Message queue]
  db[(Data storage)]
end

subgraph Backend processing
  ba[Backend function 1]
  bb[Backend function 2]
  bc[Backend function 3]
end

a --&gt;|publish| mq
b --&gt;|publish| mq
c --&gt;|publish| mq
d --&gt;|publish| mq
a &lt;--&gt; db
b &lt;--&gt; db
c &lt;--&gt; db
d &lt;--&gt; db

mq --&gt;|via subscription| ba
mq --&gt;|via subscription| bb
mq --&gt;|via subscription| bc
ba &lt;--&gt; db
bb &lt;--&gt; db
bc &lt;--&gt; db
&lt;/div&gt;

&lt;p&gt;So this looks pretty manageable at first. Maybe a bit more complex, but not bad. At least there are clearly defined interface layers.&lt;/p&gt;
&lt;p&gt;But how is this approach going to scale? If this is the first feature, what&amp;rsquo;s it going to look like after a second feature? A third? A tenth? Even this pretty simple mockup with a few APIs, a few back-end behaviors, a database, and a message queue for coordinating is starting to look like &lt;a href="https://medium.com/codex/managing-serverless-spaghetti-c2fb1a7db73e"&gt;serverless spaghetti&lt;/a&gt;. Sure, each piece can be modified, built, tested, and deployed individually. But because it is their orchestrated unified behavior that matters, a change to any part can disrupt the whole. Moving the interconnection from within a giant monolith to being distributed across a serverless architecture hasn&amp;rsquo;t actually solved the problem; it&amp;rsquo;s just transformed where the complexity lies.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;I don&amp;rsquo;t believe there are any easy answers. There&amp;rsquo;s no up-front architecture that matches every step in an application&amp;rsquo;s life journey, from prototype to first release to massive hit to sunset. Nor is ChatGPT going to introduce a &amp;ldquo;refactor architecture&amp;rdquo; button anytime soon.&lt;/p&gt;
&lt;p&gt;But I do believe there are a few guiding principles. Here are two:&lt;/p&gt;
&lt;h2 id="budgeting-for-changing-non-functional-requirements"&gt;Budgeting for changing non-functional requirements&lt;/h2&gt;
&lt;p&gt;Business leadership needs to understand and budget for changing non-functional requirements. Architectural choices should be tightly calibrated against the business objectives. If the company wants a prototype for internal purposes, it may not need any formal architecture. But when it becomes a paid service that needs 24-7 reliability, that prototype architecture won&amp;rsquo;t work any more.&lt;/p&gt;
&lt;p&gt;Business leadership also need to understand that, by and large, the cost is an unknown. When the decision is made to build for aesthetics and not worry about load time, the non-functional requirement becomes &amp;ldquo;load time doesn&amp;rsquo;t really matter as long as nobody complains.&amp;rdquo; After a year of developing, what will it take to achieve highly responsive load times of sub-200 milliseconds? Is it just a matter of optimizing a few routes? Or perhaps adding a cache? Or will the whole data pipeline need to be redesigned? Perhaps the choice of a single-page application is too slow for this problem, and a new approach is needed?&lt;/p&gt;
&lt;p&gt;This understanding isn&amp;rsquo;t easy; business leadership often focuses on tangibles like features, monthly active users, and revenue. But it&amp;rsquo;s essential for them to understand that every non-functional requirement adds complexity, and changing the non-functional requirements typically adds a cost that must be paid.&lt;sup id="fnref:debt"&gt;&lt;a class="footnote-ref" href="#fn:debt"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id="architect-for-no-red-tape"&gt;Architect for no red tape&lt;/h2&gt;
&lt;p&gt;One of the great strengths of well-functioning Agile is that it gives teams the power to execute. Handoffs between humans are inherently slow, and eliminating them is one of the best ways to make everything move faster.&lt;/p&gt;
&lt;p&gt;The problem is that modern software engineering has a lot of domain-specific knowledge. How many software engineers are top-notch security engineers? Kubernetes specialists? With Helm and Terraform knowledge? What about the CI/CD system? Internationalization? And fluent in diagnostics through OpenTelemetry and the ELK stack?&lt;/p&gt;
&lt;p&gt;And this specialization means some sort of coordination is required. I&amp;rsquo;m a huge fan of &lt;a href="https://teamtopologies.com/key-concepts"&gt;Team Topologies&lt;/a&gt; which reverse engineers &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_law"&gt;Conway&amp;rsquo;s Law&lt;/a&gt;. That is, instead of how a company works being decided by its org chart, the org chart is decided by how the company should work.&lt;/p&gt;
&lt;p&gt;And this is where architecture comes in. What specializations need to exist within the company? And how will they interact with each team in a way that lets the team quickly deliver changes while still making use of their specialized knowledge?&lt;/p&gt;
&lt;p&gt;One particular idea comes to mind here: I&amp;rsquo;m a huge fan of &amp;ldquo;bottleneck&amp;rdquo; points in architecture that are hard to change, but provide certain guarantees. For example, &lt;a href="https://docs.nginx.com/nginx-management-suite/nim/previous-versions/v1/getting-started/auth/#jwt-auth"&gt;teach nginx to use JWT authentication&lt;/a&gt; and then require nginx as an intermediary before each application. Now there&amp;rsquo;s a guarantee for each application that all calls have validated JWT tokens. This isn&amp;rsquo;t the only guarantee needed to operate securely&lt;sup id="fnref:only"&gt;&lt;a class="footnote-ref" href="#fn:only"&gt;4&lt;/a&gt;&lt;/sup&gt;, but a few such bottlenecks can go a long way to simplify the day-to-day cognitive load of development while also providing a robust non-functional requirement &amp;ndash; in this case, around security authentication.&lt;/p&gt;
&lt;p&gt;How else can engineers juggle the complexities of non-functional requirements in a sustainable manner?&lt;/p&gt;
&lt;script src="https://unpkg.com/mermaid/dist/mermaid.min.js"&gt;&lt;/script&gt;
&lt;script&gt;mermaid.initialize({startOnLoad:true});&lt;/script&gt;

&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:security"&gt;
&lt;p&gt;For those who don&amp;rsquo;t know, the 0.0.0.0 mask makes the site accessible to anyone who can reach the computer. A small startup operating out of a coffee shop likely doesn&amp;rsquo;t have a VPN or other airgap, making the website &amp;ndash; and any associated vulnerabilities &amp;ndash; accessible to anyone on the coffee shop&amp;rsquo;s network &amp;ndash; or anyone who has compromised the network.&amp;#160;&lt;a class="footnote-backref" href="#fnref:security" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:graveyard"&gt;
&lt;p&gt;The &lt;a href="https://killedbygoogle.com/"&gt;Google Graveyard&lt;/a&gt; is infamous, but I&amp;rsquo;m surprised how many other popular libraries and tools don&amp;rsquo;t make it. They get supplanted, abandoned, or acquired. Perhaps someone decides the current open source model isn&amp;rsquo;t profitable. Or maybe someone just decides to take their marbles and go home.&amp;#160;&lt;a class="footnote-backref" href="#fnref:graveyard" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:debt"&gt;
&lt;p&gt;Sometimes this cost is paid in technical debt, which typically manifests with slower teams over time making more mistakes.&amp;#160;&lt;a class="footnote-backref" href="#fnref:debt" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:only"&gt;
&lt;p&gt;Solving authentication, for example, doesn&amp;rsquo;t guarantee authorization to see particular data or take a particular action.&amp;#160;&lt;a class="footnote-backref" href="#fnref:only" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="uncertainty"></category><category term="architecture"></category></entry><entry><title>The Three Questions</title><link href="https://rayalan.github.io/the-three-questions.html" rel="alternate"></link><published>2023-10-09T00:00:00-04:00</published><updated>2023-10-09T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-10-09:/the-three-questions.html</id><summary type="html">&lt;p&gt;I&amp;rsquo;m a bit of a natural contrarian.&lt;/p&gt;
&lt;p&gt;A few years back, a coworker gave an enthusiastic presentation over how amazing Pixar&amp;rsquo;s approach to innovation was, and by implication, how our software development department should adapt the same approach that Pixar described in the book &lt;a href="https://www.amazon.com/Innovate-Pixar-Way-Corporate-Playground/dp/0071638938"&gt;&lt;em&gt;Innovate the Pixar Way …&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;rsquo;m a bit of a natural contrarian.&lt;/p&gt;
&lt;p&gt;A few years back, a coworker gave an enthusiastic presentation over how amazing Pixar&amp;rsquo;s approach to innovation was, and by implication, how our software development department should adapt the same approach that Pixar described in the book &lt;a href="https://www.amazon.com/Innovate-Pixar-Way-Corporate-Playground/dp/0071638938"&gt;&lt;em&gt;Innovate the Pixar Way&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t know much about Pixar, and I&amp;rsquo;d never read the book. So my question was: Did the book discuss any prerequisites or requirements for this approach to work? in other words, is this approach really a one-size-fits-all solution for both large movie companies and small software development companies?&lt;/p&gt;
&lt;p&gt;In the years since then, the vaunted &amp;ldquo;Pixar Way&amp;rdquo; hasn&amp;rsquo;t been nearly so successful (see &lt;a href="https://screenrant.com/pixar-movies-what-went-wrong-problems-explained/"&gt;this article&lt;/a&gt; for one take).&lt;/p&gt;
&lt;p&gt;I still know almost nothing about Pixar, but I&amp;rsquo;ve pondered what the right response is. Here are three takes:&lt;/p&gt;
&lt;h1 id="selection-sampling-bias"&gt;Selection (sampling) bias&lt;/h1&gt;
&lt;p&gt;A classic example of sampling bias is to interview a hundred successful startups about how they survived when others fail, look for similarities, and then attribute the startups&amp;rsquo; success to those attitudes and behaviors. Sounds great, right?&lt;/p&gt;
&lt;p&gt;Not so fast; it&amp;rsquo;s possible that all the failed startups also exhibited those same qualities. So unless failed startups are also surveyed, it&amp;rsquo;s easy to report a characteristic that both successful and failed startups share as a characteristic of a successful startup.&lt;/p&gt;
&lt;p&gt;Another variation of this is to e-mail 50,000 people that the stock market will go up next week, and another 50,000 people that the stock market will go down. The next week, look at what the stock market did. Drop the people who received the mistaken prediction. Then e-mail half of the remaining people that the stock market will go up, and the other half that it will go down.&lt;/p&gt;
&lt;p&gt;Repeat this step a few times, and there will be several hundred people who you can reach out to and say &amp;ldquo;Look at my track record; I correctly predicted the stock market every week for two months &amp;ndash; wouldn&amp;rsquo;t you like to invest your money with me?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;By hiding the entirety of the track record, it&amp;rsquo;s easy to generate the illusion of expertise.&lt;/p&gt;
&lt;h1 id="correlation-is-not-causation"&gt;Correlation is not causation&lt;/h1&gt;
&lt;p&gt;There&amp;rsquo;s a &lt;a href="https://en.wikipedia.org/wiki/Questionable_cause"&gt;whole page for logical fallacies linked to correlation and causation on Wikipedia&lt;/a&gt;. There are also some fascinating studies on how powerful the illusion of doing something can be for causing change &amp;ndash; for example, there&amp;rsquo;s an &lt;a href="https://www.medicalnewstoday.com/articles/306437"&gt;article&lt;/a&gt; discussing the effectiveness of placebo drugs.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll just add that many corporate structures incentivize turning correlation into causation. After all, if a leader isn&amp;rsquo;t successfully making decisions, why keep them on the payroll? And so leaders are heavily motivated to find causal relationships between their actions and good outcomes &amp;ndash; and to neglect correlation between their actions and suboptimal changes.&lt;/p&gt;
&lt;p&gt;And, of course, I imagine it&amp;rsquo;s a lot more fun to write about how my brilliant decisions led a company to greatness than to write the sequel about how those same decisions just happened to work for those particular circumstances but might not be more widely applicable.&lt;/p&gt;
&lt;h1 id="mark-twain"&gt;Mark Twain&lt;/h1&gt;
&lt;p&gt;And then there&amp;rsquo;s the underlying problem that data is just messy, even with the best intentions. Reality is often complex and doesn&amp;rsquo;t tell neat stories. It&amp;rsquo;s fun to write the blog article where the trend line on a major metric changes at the exact moment, but that&amp;rsquo;s not always the story.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are three kinds of lies: lies, damned lies, and statistics.&lt;/p&gt;
&lt;p&gt;Maybe Mark Twain (&lt;a href="https://en.wikipedia.org/wiki/Lies,_damned_lies,_and_statistics"&gt;source&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There&amp;rsquo;s the question of how accurate the underlying data is. Maybe the reworked Android app doesn&amp;rsquo;t report data through the old system any more. Maybe the graph only tracks error rates from the server point of view, not from the client point of view. Or maybe the system is throwing out large values as being &amp;ldquo;unrealistic,&amp;rdquo; masking a key system problem. I&amp;rsquo;ve seen all of these &amp;ndash; and more &amp;ndash; happen.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;One of my favorite engineering jokes is that an engineer has two excuses to avoid work they don&amp;rsquo;t like. First, the idea is technically impossible. And secondly, if that excuse fails, it is technically possible &amp;ndash; but the solution will cost way too much.&lt;/p&gt;
&lt;p&gt;Sometime I wonder if an emphasis on data-driven decision making has replaced &amp;ldquo;it&amp;rsquo;s technically impossible&amp;rdquo; with &amp;ldquo;the data doesn&amp;rsquo;t support it,&amp;rdquo; where data is being unconscientiously selected to support the opinion I already have.&lt;/p&gt;
&lt;p&gt;To counter-act this, my three favorite questions are:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;So what?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But is that really the case?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first two are exploratory, seeking out the causation and correlation. But the third one is my nudge to step back and consider the bigger picture: Does the picture make sense? Do I have the right data? What technical choices might be distorting the data? It&amp;rsquo;s the attempt to not just accept an answer because it is the accepted wisdom, but actually evaluate if and how the common wisdom applies to my scenario.&lt;/p&gt;
&lt;p&gt;And as a final note, I want to highly recommend &lt;em&gt;&lt;a href="https://www.amazon.com/How-Measure-Anything-Intangibles-Business/dp/1118539273"&gt;How to Measure Anything&lt;/a&gt;&lt;/em&gt; by Douglas Hubbard. The book helped me change how I measure in many business contexts.&lt;/p&gt;
&lt;p&gt;With that, I encourage my readers to ponder if what I&amp;rsquo;ve said is really the case.&lt;/p&gt;</content><category term="practices and principles"></category><category term="management"></category><category term="knowledge"></category><category term="uncertainty"></category></entry><entry><title>Calibrating Expectations</title><link href="https://rayalan.github.io/calibrating-terms.html" rel="alternate"></link><published>2023-10-02T00:00:00-04:00</published><updated>2023-10-02T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-10-02:/calibrating-terms.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;You&amp;rsquo;re all doing amazing work. I can&amp;rsquo;t believe how much is getting done and everything you are accomplishing.&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Some engineering leader in some context, fairly routinely.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My thought process goes something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has the definition of amazing changed recently? &lt;em&gt;Checks Google.&lt;/em&gt; Nope, still &amp;ldquo;causing great surprise or …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;You&amp;rsquo;re all doing amazing work. I can&amp;rsquo;t believe how much is getting done and everything you are accomplishing.&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Some engineering leader in some context, fairly routinely.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My thought process goes something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has the definition of amazing changed recently? &lt;em&gt;Checks Google.&lt;/em&gt; Nope, still &amp;ldquo;causing great surprise or wonder; astonishing.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Okay, recent brain injury or trauma?&lt;/li&gt;
&lt;li&gt;No? Unfamiliar with the field of software engineering?&lt;/li&gt;
&lt;li&gt;Still no? Perhaps the &lt;a href="https://en.wikipedia.org/wiki/Pod_People_(Invasion_of_the_Body_Snatchers)"&gt;pod people&lt;/a&gt; invaded?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, so aliens aside, what&amp;rsquo;s happening here?&lt;/p&gt;
&lt;h1 id="low-wonder"&gt;Low wonder&lt;/h1&gt;
&lt;p&gt;First, I&amp;rsquo;m simply a low wonder person, especially in areas that I understand.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Reusable rockets.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yep, I find recoverable rockets amazing. Shoot them far away, land them without a fireball or metal pancake, and then do it again and again? That&amp;rsquo;s amazing!&lt;/p&gt;
&lt;p&gt;Of course, I know very little about rockets &amp;ndash; I know a few basic physics principles like &amp;ldquo;go up ==&amp;gt; come down&amp;rdquo; and &amp;ldquo;go far up ==&amp;gt; come down fast&amp;rdquo; and &amp;ldquo;fast thing + earth ==&amp;gt; earth + not much left.&amp;rdquo; And perhaps that for most of my parents&amp;rsquo; lifetime, rockets were largely (entirely?) single use, and often reentry vehicles landed in the ocean.&lt;/p&gt;
&lt;p&gt;So it&amp;rsquo;s pretty easy to impress me with these rockets making precise landings at precise locations such as the middle of a barge. Is it actually hard? I don&amp;rsquo;t know (but probably &amp;ndash; it is rocket science, after all).&lt;/p&gt;
&lt;p&gt;Software engineering, on the other hand, is not a mystery to me. I know what I can do. I have a lively imagination. And I can multiply. So I can easily envision what thirty or fifty or a hundred of me could achieve&lt;sup id="fnref:ego"&gt;&lt;a class="footnote-ref" href="#fn:ego"&gt;1&lt;/a&gt;&lt;/sup&gt;. And usually whatever the company has done is less than what I can envision a horde of Alan-clones achieving.&lt;/p&gt;
&lt;p&gt;Beyond that, though, I also know all the holes. I know that despite &amp;ldquo;graceful degradation&amp;rdquo; being one of the requirements, there are 153 ways that it can fail without any degradation, graceful or otherwise. I know that the graphics aren&amp;rsquo;t scalable, so they only look right at the demo resolutions. I know that the whole data storage approach will have to be rewritten before launch because it can&amp;rsquo;t handle much more than the demo load. And I know that half the metrics are missing key information.&lt;/p&gt;
&lt;p&gt;So while the product looks good, the actual product isn&amp;rsquo;t exactly what is being seen. Whether or not that matters is a different question, which brings us to&amp;hellip;&lt;/p&gt;
&lt;h1 id="world-class"&gt;&amp;ldquo;World class&amp;rdquo;&lt;/h1&gt;
&lt;p&gt;What is meant when we describe software as &amp;ldquo;excellent&amp;rdquo; or &amp;ldquo;world class&amp;rdquo;? Well, a world-class athlete is one who competes on a world stage &amp;ndash; maybe in the Olympics or the World Cup. A world-class chef is one who makes the tastiest food &amp;ndash; perhaps a five-star Michelin chef.&lt;/p&gt;
&lt;p&gt;Even here, the definition is a bit fuzzy &amp;ndash; what if someone competes in the Olympics, but always places last? Could the runners-up to the Olympics be considered world class? What if I really like Joe&amp;rsquo;s taco truck and dislike foie gras? Does a bunch of people disagreeing with me really make the taco any less a world-class dish?&lt;/p&gt;
&lt;p&gt;But the idea of a world-class athlete or dish is really clear, even if the specifics are a bit fuzzy.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The field of software is far worse.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What does it mean for software to be the best in the world? Cost? Low time to develop? Working as designed? Working as expected? Working as desired? Easy to modify? Easy to understand? Reliable? Reliable in extreme conditions? Something else?&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve never had to design software, for example, that reliably worked in Antarctica when operated by shivering people in thick gloves. And yet, I bet that some software is designed for those conditions. Does that mean that such software is more world class than what I&amp;rsquo;ve written? Would my software even be better if designed for such an environment, or would the compromises needed to function in such extremes undermine other aspects of my work?&lt;/p&gt;
&lt;p&gt;Worse yet, the definition of excellence in software changes frequently, often on the same project. Sometimes leaders will talk about the push for excellence. Then the budget cuts come, a new leader takes over, and the push is for delivering whatever value has been achieved and moving on to the next project.&lt;/p&gt;
&lt;h1 id="variations"&gt;Variations&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;All of you should watch this video.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Alan&amp;rsquo;s re-creation of an excited coworker, after learning something awesome.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This style of communication isn&amp;rsquo;t just about praise. For example, has a coworker ever said something like?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;Everyone should read this book.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But is that really the case? Almost certainly not. The book may have been a great book. It may have really connected with someone. Does that really mean it changed that coworker&amp;rsquo;s work? Probably not.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a table summarizing my observations:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Observation&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Coworkers who read books&lt;/td&gt;
&lt;td&gt;Lots and lots&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Coworkers who read lots of books&lt;/td&gt;
&lt;td&gt;Many&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Coworkers significantly changed by a book&lt;/td&gt;
&lt;td&gt;0ish&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In short, my observation is that people often believe that the short-term impact of learning is far higher than it actually is.&lt;/p&gt;
&lt;p&gt;Of course, sometimes it isn&amp;rsquo;t just individuals giving their opinion, but part of a group narrative. One time, my company implemented a recurring &amp;ldquo;vital&amp;rdquo; training for aspiring leaders (basically, anyone in management plus a few others). Executives frequently spoke about how &amp;ldquo;essential&amp;rdquo; this training was. The presenters highlighted how &amp;ldquo;incredibly valuable&amp;rdquo; this opportunity was. And my boss thought it was &amp;ldquo;really important&amp;rdquo; (and mandatory) that I attend.&lt;/p&gt;
&lt;p&gt;The material was solid, but I already had an intellectual understanding of most of it, and the company&amp;rsquo;s training process didn&amp;rsquo;t provide needed support for learning to apply the material well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No psychologically safe space to talk about specific challenges or struggles or concerns.&lt;/li&gt;
&lt;li&gt;No reduced workload so that attendees had the necessary time to practice the skills being taught.&lt;/li&gt;
&lt;li&gt;None of the managers or senior leadership (including my boss) seemed to actually care if the attendees grew in these areas; they had their own priorities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Meanwhile, the feedback I was getting from those around me was that I needed to work on other areas &amp;ndash; like having too much on my plate&lt;sup id="fnref:growth"&gt;&lt;a class="footnote-ref" href="#fn:growth"&gt;2&lt;/a&gt;&lt;/sup&gt;. So I tried to convince my boss to let me skip the trainings. Oh no, it was critically important that I be there &amp;ndash; but irrelevant whether not I was actually growing or well-supported in mastering these concepts.&lt;/p&gt;
&lt;p&gt;Looking back, my assessment was on point: For most of the people in that meeting, it wasn&amp;rsquo;t important or vital or essential. No one I knew visibly changed how they led or managed because of that time.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;&lt;a href="./learning-to-learn.md"&gt;Intentional directed learning&lt;/a&gt; and growth matters. Likewise, communication is a challenge, especially when mixing cultures, generations, and backgrounds. It&amp;rsquo;s a wonder it works at all.&lt;/p&gt;
&lt;p&gt;Here are a few adjustments I make to better align in these situations:&lt;/p&gt;
&lt;h2 id="communication-calibration"&gt;Communication calibration&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Some people like to use hyperbolic praise; give them space to do so.&lt;/li&gt;
&lt;li&gt;Cultivate a vocabulary of praise and encouragement that is not dependent on wonder. I&amp;rsquo;ve written &lt;a href="/my-best-managers.md"&gt;elsewhere&lt;/a&gt; about the importance of thoughtful reviews, and that principle applies more broadly here: Can I point to specific praiseworthy behaviors and connect the dots to specific praiseworthy outcomes?&lt;/li&gt;
&lt;li&gt;Do not fake wonder or hyperbolic praise. It comes across insincerely (because I am insincere when I do it) and undermines one of my main strengths &amp;ndash; being a thoughtful straight shooter.&lt;/li&gt;
&lt;li&gt;Intentionally lower my expectations, especially when they are stratospherically high, and concretely verbalize my expectations&lt;sup id="fnref:goals"&gt;&lt;a class="footnote-ref" href="#fn:goals"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Let people know when I&amp;rsquo;m struggling to recalibrate. It&amp;rsquo;s easy for people to read my hesitation as disapproval of their plan when I&amp;rsquo;m actually trying to rapidly assess an unanticipated approach and decide if there&amp;rsquo;s any blockers to moving forward.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="learning-calibration"&gt;Learning calibration&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Again, recognize that just because someone says something is essential doesn&amp;rsquo;t make it so, even if they have a really important title&lt;sup id="fnref:social"&gt;&lt;a class="footnote-ref" href="#fn:social"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Ask clarifying questions.&lt;ul&gt;
&lt;li&gt;What idea(s) from the book/training resonated with you? When is a time you wish you had applied them? What would that have looked like / how would things have gone differently?&lt;/li&gt;
&lt;li&gt;How have you applied these ideas to your daily work? How long have you been applying these ideas? What have been the upsides and downsides of the change for you?&lt;/li&gt;
&lt;li&gt;If you were in my shoes, which ideas would you focus on? What do you think it might look like if I really applied myself to those ideas?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consider following up on the impact in a few months. Are they still doing the new practice? How is that working out&lt;sup id="fnref:remember"&gt;&lt;a class="footnote-ref" href="#fn:remember"&gt;5&lt;/a&gt;&lt;/sup&gt;? What additional adjustments have they made? What kind of people would most benefit from the idea? Is there anybody who might not benefit?&lt;/li&gt;
&lt;li&gt;Learn to recognize when growth is not the primary goal. Take advantage of the opportunity to learn something, but it&amp;rsquo;s okay to stick to your well-considered plan for growth.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And I&amp;rsquo;d love to get other people&amp;rsquo;s take on what style of enthusiasm they appreciate in leaders. Maybe I need to add comment support to this blog so I can end with discussion questions.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:ego"&gt;
&lt;p&gt;A bit of ego and an overestimation of what I can accomplish probably inflate the estimate as well.&amp;#160;&lt;a class="footnote-backref" href="#fnref:ego" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:growth"&gt;
&lt;p&gt;At this point in my career, I simply had too much on my plate, and so much of my learning and growth was around prioritization and intentional choices about opportunity costs, the return on my (time) investment, and delegation. Just because someone thought that this material needed to be presented didn&amp;rsquo;t mean it needed to jump to the top of my list. And the flip side is that sometimes I&amp;rsquo;ve had to grow in skills that nobody thought it was worthwhile to train me on.&amp;#160;&lt;a class="footnote-backref" href="#fnref:growth" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:goals"&gt;
&lt;p&gt;This topic could be its own article. There are different kinds of expectations (e.g., important immediate goals, important long-term goals that I&amp;rsquo;m afraid will slip away if they aren&amp;rsquo;t addressed but aren&amp;rsquo;t necessarily central to the work, beliefs I have about the work that I&amp;rsquo;m very certain of, beliefs I suspect are true, etc.). Often, my expectations will shift based on feedback. For example, I&amp;rsquo;ve often had developers tell me something like, &amp;ldquo;I looked into such-n-such technology, and we can&amp;rsquo;t do this, but it solves a bunch of our other problems and gives us this cool new capability.&amp;rdquo; And that&amp;rsquo;s enough ROI for me to change my expectations. Beyond that, there&amp;rsquo;s another whole topic about expressing reservations about a path and equipping others to recognize the wrong path while still genuinely giving them the freedom to make their own choices and supporting the outcome.&amp;#160;&lt;a class="footnote-backref" href="#fnref:goals" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:social"&gt;
&lt;p&gt;On the other hand, people with important titles often like to feel important: Telling them that their recommendation was really meaningful to you is often a great approach, especially if they don&amp;rsquo;t have the attention span to realize that you aren&amp;rsquo;t actually applying said lessons any better than before.&amp;#160;&lt;a class="footnote-backref" href="#fnref:social" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:remember"&gt;
&lt;p&gt;Do they actually remember anything about the book?&amp;#160;&lt;a class="footnote-backref" href="#fnref:remember" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="vocabulary"></category></entry><entry><title>Learning to Learn</title><link href="https://rayalan.github.io/learning-to-learn.html" rel="alternate"></link><published>2023-09-25T00:00:00-04:00</published><updated>2023-09-25T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-09-25:/learning-to-learn.html</id><summary type="html">&lt;p&gt;Learning is a strange topic in software. On the one hand, everyone talks about how essential it is, especially with technology changing so fast. And on the other hand, nobody really talks about how to learn what to learn&lt;sup id="fnref:close"&gt;&lt;a class="footnote-ref" href="#fn:close"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Consider a few different scenarios&amp;hellip;&lt;/p&gt;
&lt;h1 id="largely-ignorant"&gt;Largely ignorant&lt;/h1&gt;
&lt;p&gt;In some circumstances …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Learning is a strange topic in software. On the one hand, everyone talks about how essential it is, especially with technology changing so fast. And on the other hand, nobody really talks about how to learn what to learn&lt;sup id="fnref:close"&gt;&lt;a class="footnote-ref" href="#fn:close"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Consider a few different scenarios&amp;hellip;&lt;/p&gt;
&lt;h1 id="largely-ignorant"&gt;Largely ignorant&lt;/h1&gt;
&lt;p&gt;In some circumstances, we&amp;rsquo;re largely ignorant of what we need to know. As a young child, we are guided by parents and teachers into basic knowledge such as reading, writing, and arithmetic. Similarly, vocational training and college degrees provide significant guidance in what skills need to be mastered. Sometimes these choices are good &amp;ndash; my college classes on information theory, statistics, and game theory have been referenced throughout my career.&lt;/p&gt;
&lt;p&gt;Others, less so &amp;ndash; did Calculus IV help me be a great software developer? Well, I&amp;rsquo;ve never used it and forgotten most of it by now, so at most it serves as a way to score points on how smart I am or how tough my education was. (And strangely, scoring points is often an anti-social behavior, aside from job interviews and professional bios, so even there Calculus IV hasn&amp;rsquo;t been very practical.)&lt;/p&gt;
&lt;p&gt;Assuming one&amp;rsquo;s education leads into one&amp;rsquo;s career&lt;sup id="fnref:career"&gt;&lt;a class="footnote-ref" href="#fn:career"&gt;2&lt;/a&gt;&lt;/sup&gt;, one&amp;rsquo;s first job introduces a whole bunch more skills - some just missed by education, others that just come from real-world scenarios that school can&amp;rsquo;t replicate. Some of these skills are technical (e.g., source control wasn&amp;rsquo;t taught back in my day), but others are more professional skills &amp;ndash; real-world software development is very different from coursework. For example, in a class, the solution and complexity to problems are always well-known. But on the job, nothing forces the customer to ask for something that can be delivered in a week.&lt;/p&gt;
&lt;h1 id="professional-sponge"&gt;Professional sponge&lt;/h1&gt;
&lt;p&gt;I encourage people to think of their early career as a sponge &amp;ndash; one finally has the tools to start learning their field in depth, and to observe and learn about related professions. At a job with user experience? Grab lunch with someone and ask them to tell you about it, how it interacts with software development, what they wish software developers would do to make user experience better. Just about everyone has opinions, and it&amp;rsquo;s a fantastic way to create connections, build a repertoire of knowledge, and assemble a reading list.&lt;/p&gt;
&lt;p&gt;If one is lucky, they&amp;rsquo;ll get a thoughtful boss who will get to know them well and give detailed, specific feedback on how to grow. If not, working alongside thoughtful coworkers and actively soliciting feedback can be a a great source of input&lt;sup id="fnref:habits"&gt;&lt;a class="footnote-ref" href="#fn:habits"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="independent-thinker"&gt;Independent thinker&lt;/h1&gt;
&lt;p&gt;At some point, though, learning becomes harder. I see three big reasons for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The difficulty of application significantly increases.&lt;/li&gt;
&lt;li&gt;The difficulty of discerning what to learn increases.&lt;/li&gt;
&lt;li&gt;The difficulty of discerning style from wisdom increases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="difficulty-of-application"&gt;Difficulty of application&lt;/h2&gt;
&lt;p&gt;The classic dilemma for new graduates is that they need experience in order to find a job. And how does one find experience without a job? The same problem applies to major jumps in career:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do you demonstrate that you can effectively direct a 200-person engineering team? Well, by effectively directing a large engineering team.&lt;/li&gt;
&lt;li&gt;How do you demonstrate that you can effectively architect maintainable software systems? Well, by doing so.&lt;/li&gt;
&lt;li&gt;How do you demonstrate that you can effectively run a large project? Well, by running one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In some areas of software development, it&amp;rsquo;s easy to bridge from one area into another. If one can write a few functions, one is probably dabbling in writing classes. One can start debugging easy problems, try their hand at harder bugs, and eventually prove their debugging skills.&lt;/p&gt;
&lt;p&gt;But other jumps are more 0 to 1 jumps. Effectively running a small or medium team is very different than running a large department. Effectively designing a small internal application is very different than designing a company-wide microservice architecture. And these jumps are far harder because much of the knowledge comes from doing, and the ability to do often requires being in the right position.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been fortunate to work at a number of smaller, understaffed companies where I could drift into this kind of work. For example, I ended up as both architect and project manager on a major initiative when my co-leader (who I had worked with before) saw me taking the lead, thought I was doing great, and decided he had more important work to do. So now I can point to that experience and say &amp;ldquo;I&amp;rsquo;ve done that, and I got awards for doing so.&amp;rdquo; So while that worked out great for me, it&amp;rsquo;s not an easy way that anyone can demonstrate their capabilities.&lt;/p&gt;
&lt;p&gt;And even in that work, my head knowledge exceeds what I&amp;rsquo;ve applied. There are industry standards for APIs that I know about but have never done. So when some hiring manager goes and writes out a job description wanting architects who have done this practice and that practice and this other practice, I don&amp;rsquo;t exactly have the right experience.&lt;/p&gt;
&lt;h1 id="difficulty-of-what-to-learn"&gt;Difficulty of what to learn&lt;/h1&gt;
&lt;p&gt;At some point, I realized that there&amp;rsquo;s basically an infinite amount to learn and improve. I can get better at almost any skill, and there are countless skills that would make me better at what I do. The question becomes: Where do I focus my energy?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On shoring up my weaknesses?&lt;/li&gt;
&lt;li&gt;On amplifying my strengths?&lt;/li&gt;
&lt;li&gt;On a skill that seems largely absent in my current job?&lt;/li&gt;
&lt;li&gt;On a skill that is highly valued in my current job?&lt;/li&gt;
&lt;li&gt;On a skill that I expect will be highly valued in my next job?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&amp;rsquo;t have a good answer. Here&amp;rsquo;s what my current plan looks like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have a plan and at least small action steps for whatever feedback I&amp;rsquo;ve gotten from my boss and close workers, regardless of whether I agree with the feedback. If I agree with the feedback, this is easy to focus on. Otherwise, it&amp;rsquo;s a way of experimenting with a change to see what happens while showing that I&amp;rsquo;m taking them seriously.&lt;/li&gt;
&lt;li&gt;I strive to be attentive to my perennial weaknesses (e.g., coming off as brusque) and follow up in scenarios where I may not have done well.&lt;/li&gt;
&lt;li&gt;Up to 20% of my time working on my weaknesses. Sometimes these are the perennial ones (especially if feedback suggests they are problem areas again). At other times, I&amp;rsquo;ll tackle a common practice that I&amp;rsquo;ve never been able to implement (like &lt;a href="https://obsidian.md/"&gt;Obsidian&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The rest of my effort goes to learning to better do what I love and excel at.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, I mostly work on amplifying my strengths, while being conscientious of my weaknesses.&lt;/p&gt;
&lt;h1 id="difficulty-of-discerning-wisdom-from-style"&gt;Difficulty of discerning wisdom from style&lt;/h1&gt;
&lt;p&gt;Finally, I&amp;rsquo;ve learned that people are very bad at distinguishing their style from best practice.&lt;/p&gt;
&lt;p&gt;At one point in my career, I joined a company where many developers, including those who I worked closely with, were deeply into object-oriented design. And I wasn&amp;rsquo;t. While I certainly appreciated the value of a good class, I wasn&amp;rsquo;t an object-oriented purist. They didn&amp;rsquo;t want to engage in a conversation on the topic, though, and I significantly altered my style (or who I requested to do my code reviews) to accommodate their style.&lt;/p&gt;
&lt;p&gt;Fast forward a couple years, and I no longer worked closely with those individuals. I also became more aware of other schools of thought and realized that there were many professionals who would agree with me. In the years since then, I&amp;rsquo;ve largely worked with similarly minded individuals, and my lack of object-oriented purity has never come up.&lt;/p&gt;
&lt;p&gt;Looking back, I overestimated the level of experience of those who wanted to guide me down a route of object-oriented purity and confused their preferences for wisdom&lt;sup id="fnref:purity"&gt;&lt;a class="footnote-ref" href="#fn:purity"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;In another case (before I was a manager), I had a reviewer write about me that &amp;ldquo;my people skills limit how &amp;lsquo;managerial&amp;rsquo; my role is, both in managing people and in interacting with other teams.&amp;rdquo; Ouch! And yet within a couple years of that review, I was managing a small team, getting glowing reviews from those who reported to me, and architecting critical software systems that had an eight-figure impact on the company.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He really cares about his team members as people and is genuinely open to working with them through their individual concerns and goals.&lt;/p&gt;
&lt;p&gt;Anonymous upward feedback on Alan&amp;rsquo;s top strengths&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Did I radically overhaul my approach to dealing with people? Was the reviewer wrong? What happened?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;No, not exactly, and circumstances changed.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I certainly continued to work on my people skills. I got bit smarter about when &amp;ldquo;What do you think?&amp;rdquo; wasn&amp;rsquo;t really an invitation to share my opinion. And I got a bit better at phrasing questions so they wouldn&amp;rsquo;t be heard as having critical implication. But I don&amp;rsquo;t think much changed in my actual style &amp;ndash; certainly nothing significant enough that anyone commented on it, for example.&lt;/p&gt;
&lt;p&gt;Instead, I think the reviewer confused his style (which definitely conflicted with mine) with my broader people skills. I also strongly suspect that the extent to which I could have been an effective manager under him was indeed severely limited.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;One final caveat&lt;/em&gt;: My point in both these stories is not &amp;ldquo;I was right, ignore feedback.&amp;rdquo; In both instances, the feedback was valuable, and I was better off for having it and growing from it. But in both cases, the feedback wasn&amp;rsquo;t a full view of the situation. Had I simply taken the feedback and said &amp;ldquo;Ah, I too must be an object-oriented purist,&amp;rdquo; I would have stunted my growth and limited my engineering abilities.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;As with many complex issues, there aren&amp;rsquo;t many silver bullets here. But here are a few of my takeaways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be quick to learn new skills from 0 to 1 whenever possible. And beware &lt;a href="https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect"&gt;the Dunning-Kruger effect&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Grow skills from 1 to 2 when convenient.&lt;/li&gt;
&lt;li&gt;Learn many variants for core skills.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The purpose of the last point is to achieve mastery of the concept independent of the implementation. By the 5th or 6th software language, the concept of a loop is really clear, even if one language has &lt;code&gt;while&lt;/code&gt; and another doesn&amp;rsquo;t. It also makes comparison and contrast far easier &amp;ndash; how does C++&amp;rsquo;s value vs. reference system compare to the de facto reference approach used by many modern languages? How does having a &lt;code&gt;const&lt;/code&gt; keyword change how one programs? Or, in the case of JavaScript, how does it turn out to have a &lt;code&gt;const&lt;/code&gt; keyword in an object-based language that doesn&amp;rsquo;t prevent the object from being changed?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Finally, think deeply about the feedback you receive, and seek out feedback from multiple thoughtful sources.&lt;/em&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:close"&gt;
&lt;p&gt;This topic is closely related to last week&amp;rsquo;s topic on &lt;a href="https://rayalan.github.io/recognizing-expertise.html"&gt;recognizing expertise&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:close" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:career"&gt;
&lt;p&gt;This certainly isn&amp;rsquo;t the case for many, and the way that people end up in degrees without a good sense of whether that career trajectory is a good match for their strengths would make for a fascinating social commentary. But that&amp;rsquo;s a bit beyond this blog at the moment.&amp;#160;&lt;a class="footnote-backref" href="#fnref:career" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:habits"&gt;
&lt;p&gt;Both of these habits (soliciting feedback and sitting down with others) are great career habits to maintain. But their purpose morphs slightly over time. Often the feedback, especially the positive feedback, gets repetitive. In that case, it serves as more of a reality check that you are still coming across as you expect, rather than novel information. Likewise, the 100th conversation about user experience probably won&amp;rsquo;t tell you that much more about the field &amp;ndash; but it&amp;rsquo;ll tell you a lot about the individual and the specific challenges facing the company and be a great connection-building opportunity.&amp;#160;&lt;a class="footnote-backref" href="#fnref:habits" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:purity"&gt;
&lt;p&gt;Looking back, I also wish I had more carefully considered my choice to adapt my style. It may have been the right choice to get along, especially as the new person at the company. But that preference led to some unfortunate expectations at the company, such as interview questions focused on one&amp;rsquo;s understanding of object-oriented design. In hindsight, pushing against that expectation, as uncomfortable as it would have been, might have been better for the engineering culture and hiring high-quality candidates.&amp;#160;&lt;a class="footnote-backref" href="#fnref:purity" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="growth"></category></entry><entry><title>Recognizing Expertise</title><link href="https://rayalan.github.io/recognizing-expertise.html" rel="alternate"></link><published>2023-09-18T00:00:00-04:00</published><updated>2023-09-18T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-09-18:/recognizing-expertise.html</id><summary type="html">&lt;p&gt;Suppose someone sends you a beautifully hand-crafted letter&lt;sup id="fnref:email"&gt;&lt;a class="footnote-ref" href="#fn:email"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I can double your company&amp;rsquo;s profits in six months. My going rate is $100,000 per month.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Joe, an expert in the field of quarks, charms, and particle entanglement.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What would it take for you to hire Joe?&lt;/p&gt;
&lt;p&gt;First, we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Suppose someone sends you a beautifully hand-crafted letter&lt;sup id="fnref:email"&gt;&lt;a class="footnote-ref" href="#fn:email"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I can double your company&amp;rsquo;s profits in six months. My going rate is $100,000 per month.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Joe, an expert in the field of quarks, charms, and particle entanglement.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What would it take for you to hire Joe?&lt;/p&gt;
&lt;p&gt;First, we&amp;rsquo;d do some back-of-the-napkin math to see how long it&amp;rsquo;d take for doubling our company&amp;rsquo;s profits to pay off a $600,000 bill. Let&amp;rsquo;s assume that hiring Joe would be a good deal and that the business has the money &amp;ndash; it won&amp;rsquo;t destroy our cash flow or anything like that.&lt;/p&gt;
&lt;p&gt;That brings us to a second question: Is Joe legit? Does he really know how to make the company profitable? Is he trying to scam us? Or perhaps, worse yet, he&amp;rsquo;s just deluded &amp;ndash; a madman.&lt;/p&gt;
&lt;h1 id="the-dilemma"&gt;The dilemma&lt;/h1&gt;
&lt;p&gt;So what now?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We could look for signs of credibility. Does he have a university degree? Or some training certificates? Do other experts recognize his knowledge in some way?&lt;/li&gt;
&lt;li&gt;We could ask about past results - has he done this sort of work in the past? What kind of results has he had?&lt;/li&gt;
&lt;li&gt;We could rely on our own experience. Have we seen this practice anywhere? How did it work out?&lt;/li&gt;
&lt;li&gt;We could ask our business connections if they&amp;rsquo;ve heard of particle physicists increasing business profits; have they hired anyone like this?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;References are a bit tricky these days. If Joe is at all smart, he&amp;rsquo;ll likely cherry-pick contacts who think the world of him. And then there&amp;rsquo;s the question of the strangers&amp;rsquo; judgement: Would they actually recognize business-revolutionizing particle physics?&lt;/p&gt;
&lt;p&gt;Self-experience is clearly a better approach &amp;ndash; after all, most of what I know has been taught to me by others. And I&amp;rsquo;m still striving to &lt;a href="https://rayalan.github.io/pages/unlinked-hidden.html"&gt;learn&lt;/a&gt;, which usually means either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learning from others in some form (e.g., book, video, conversation)&lt;/li&gt;
&lt;li&gt;A mixture of staring at the computer screen and intermittently bashing my head against the wall, trying to figure why the computer is undertaking some undesirable and bizarre behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="credentials"&gt;Credentials&lt;/h3&gt;
&lt;p&gt;Certification is a tricky beast. On the one hand, it&amp;rsquo;s a fairly objective&lt;sup id="fnref:fair"&gt;&lt;a class="footnote-ref" href="#fn:fair"&gt;2&lt;/a&gt;&lt;/sup&gt; way to evaluate someone&amp;rsquo;s expertise. On the other hand, there are a few problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plenty of accused criminals and scam artists have excellent qualifications. See, for example, &lt;a href="https://en.wikipedia.org/wiki/Elizabeth_Holmes"&gt;Elizabeth Holmes&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Bernie_Madoff"&gt;Bernie Madoff&lt;/a&gt; , or &lt;a href="https://en.wikipedia.org/wiki/Sam_Bankman-Fried"&gt;Sam Bankman-Fried&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In many fields, such as software development, self-taught individuals are just as skilled if not more so than accredited ones.&lt;/li&gt;
&lt;li&gt;There can be quite a gap between an individual&amp;rsquo;s academic ability and their day-to-day performance. My scores on a number of graduate school engineering exams were significantly better than my actual understanding of electromagnetic fields.&lt;/li&gt;
&lt;li&gt;The lack of certification doesn&amp;rsquo;t say much &amp;ndash; in many software fields, many qualified people can do the work, or learn to do the work (thanks Google + StackOverflow), without ever earning the credential.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But the big problem is this:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Knowing how to do something right isn&amp;rsquo;t the same as knowing the right thing to do.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Huh?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say I have a problem and a certified AWS expert. The AWS expert is likely to tell me that the solution to my problem is to use AWS. They&amp;rsquo;ll likely give me exactly the right way to solve my problem with AWS.&lt;/p&gt;
&lt;p&gt;But is that the right solution for my company? Should I commit to having a permanent AWS expert on staff? What ramifications will that have on the company&amp;rsquo;s ability to update the product? Or make it accessible in remote locations?&lt;/p&gt;
&lt;p&gt;Perhaps the problem could be solved differently with a chemist. Or by marketing acquiring a telegenic eight-year-old and livestreaming her using the product. Or by overhauling the manufacturing process.&lt;/p&gt;
&lt;p&gt;And certification says nothing about a person&amp;rsquo;s ability to assess a problem in the broader business context and make a good decision.&lt;/p&gt;
&lt;p&gt;For example, I&amp;rsquo;ve seen fantastic database designs &amp;ndash; that didn&amp;rsquo;t match the company&amp;rsquo;s desired development pace, align with the kinds of employees that the company could hire, or give the kind of product flexibility that the product managers wanted. The designs were not a bad solution in a vacuum; they were just a bad solution for that company at that time.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;First, signals do matter. They aren&amp;rsquo;t everything, but a person&amp;rsquo;s credentials, references, and communication skills all matter.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What would it take for this to work?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Second, it&amp;rsquo;s worth taking even crazy ideas and thinking through &amp;ldquo;What would have to happen for this to work well?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;For example, one of the major sources of delay in shipping code to production is code reviews. There are good reasons for this &amp;ndash; ensuring quality code, knowledge sharing, preventing malicious code injection, etc. But it&amp;rsquo;s still a bottleneck. And the easiest way of improving the situation &amp;ndash; getting developers to do reviews sooner &amp;ndash; is highly disruptive to developers&amp;rsquo; work habits.&lt;/p&gt;
&lt;p&gt;So what would it take to do code reviews after code was shipped to production rather than before? Feature flags? State-of-the-art code scanners? Every line of code covered by a test? Rigorous static typing and API contracts? Doubling software salaries and only hiring the best of the best? Some combination? The answer probably varies by industry&lt;sup id="fnref:heart"&gt;&lt;a class="footnote-ref" href="#fn:heart"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Or as someone once said: You don&amp;rsquo;t get world-class results by following industry-standard operating procedures; you get standard results. If you want non-standard results, you need non-standard practices&lt;sup id="fnref:until"&gt;&lt;a class="footnote-ref" href="#fn:until"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="soapbox-bonus"&gt;Soapbox bonus&lt;/h1&gt;
&lt;p&gt;A crafty owner might try to carefully negotiate a results-based contract with Joe. &amp;ldquo;We&amp;rsquo;ll pay you $600,000 in six months if the profits are at least double, plus 5% of any profit gain beyond that.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Joe, knowing that business results aren&amp;rsquo;t guaranteed, is likely to want guarantees. &amp;ldquo;Okay, but if you don&amp;rsquo;t do exactly what I tell you, then I get my $100,000/month regardless of results.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Of course, the owner probably isn&amp;rsquo;t comfortable with having to do everything Joe says to avoid invoking the fallback clause. And this brings us to the fun topic of structuring incentives, which shall have to remain to consider at another time.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:email"&gt;
&lt;p&gt;Or an email. But we know in this day and age that all strange email is a scam, so that doesn&amp;rsquo;t work for this illustration.&amp;#160;&lt;a class="footnote-backref" href="#fnref:email" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:fair"&gt;
&lt;p&gt;Not be confused with &lt;em&gt;objectively fair&lt;/em&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:fair" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:heart"&gt;
&lt;p&gt;I&amp;rsquo;m not sure I&amp;rsquo;d ever want this approach with, say, my pacemaker.&amp;#160;&lt;a class="footnote-backref" href="#fnref:heart" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:until"&gt;
&lt;p&gt;At least until they become the new industry standard, at which point it is time to innovate again.&amp;#160;&lt;a class="footnote-backref" href="#fnref:until" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="management"></category><category term="knowledge"></category><category term="uncertainty"></category></entry><entry><title>Two Great Managers</title><link href="https://rayalan.github.io/my-best-managers.html" rel="alternate"></link><published>2023-09-11T00:00:00-04:00</published><updated>2023-09-11T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-09-11:/my-best-managers.html</id><summary type="html">
&lt;h1 id="intro"&gt;Intro&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;95% of what I’ve learned about great management comes from two managers and a book&lt;sup id="fnref:wander"&gt;&lt;a class="footnote-ref" href="#fn:wander"&gt;1&lt;/a&gt;&lt;/sup&gt;.
Me, reflecting about my management style&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ve had plenty of bosses over the years – some good, a few too busy to pay attention to me, a few not so good&lt;sup id="fnref:horror"&gt;&lt;a class="footnote-ref" href="#fn:horror"&gt;7 …&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</summary><content type="html">
&lt;h1 id="intro"&gt;Intro&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;95% of what I’ve learned about great management comes from two managers and a book&lt;sup id="fnref:wander"&gt;&lt;a class="footnote-ref" href="#fn:wander"&gt;1&lt;/a&gt;&lt;/sup&gt;.
Me, reflecting about my management style&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’ve had plenty of bosses over the years – some good, a few too busy to pay attention to me, a few not so good&lt;sup id="fnref:horror"&gt;&lt;a class="footnote-ref" href="#fn:horror"&gt;7&lt;/a&gt;&lt;/sup&gt;. And I’ve probably read – or at least skimmed – dozens of books on leadership.&lt;/p&gt;
&lt;p&gt;So how did Ella and Emma make such an impression?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Radical trust.&lt;/li&gt;
&lt;li&gt;Sincere respect.&lt;/li&gt;
&lt;li&gt;Consistent candor.&lt;/li&gt;
&lt;li&gt;Seen potential.&lt;/li&gt;
&lt;li&gt;Warm appreciation.&lt;/li&gt;
&lt;li&gt;Low expectations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s nothing particularly radical about this list (except the last one, I’ll get to that), but experiencing that kind of leadership was profoundly connecting. Not only do some of my fondest memories of work come from those times, but it also radically reshaped what I aspire to in my interactions with others.&lt;/p&gt;
&lt;h1 id="story-time"&gt;Story time&lt;/h1&gt;
&lt;p&gt;Here are five stories (and an observation) illustrating how these principles played out…&lt;/p&gt;
&lt;h2 id="ella-and-the-competitor"&gt;Ella and the competitor&lt;/h2&gt;
&lt;p&gt;When I interviewed with Ella, I also had an interview lined up at a scientific facility – the kind of place that sounds really fancy and makes for a unique interview opportunity. The timing was a bit awkward, but Ella’s response when I asked for a couple more days to respond to her offer so I could get a sense for the facility stuck with me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Certainly; you should absolutely interview there – it’s a really cool opportunity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, Ella got where I was coming from and supported me getting a chance at a rare opportunity&lt;sup id="fnref:hindsight"&gt;&lt;a class="footnote-ref" href="#fn:hindsight"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:choice"&gt;&lt;a class="footnote-ref" href="#fn:choice"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2 id="ella-and-waf"&gt;Ella and waf&lt;/h2&gt;
&lt;p&gt;Shortly after I started working for Ella, I was tech lead on a small team looking to resurrect an application (all the previous institutional knowledge had moved on) and add some key product features. After some investigation, I went to Ella with a pitch to spend a significant amount of time (a couple of months, as I recall) building out some build infrastructure for the application.&lt;/p&gt;
&lt;p&gt;I was really nervous about asking, and I wasn’t totally sure I could justify the ROI. After all, build infrastructure wasn’t exactly a new feature we could ship, and I wasn’t really sure that better build capabilities would help us ship the first feature sooner.&lt;/p&gt;
&lt;p&gt;But Ella simply said yes; she trusted my judgement. I still don’t know if that was the best technical call&lt;sup id="fnref:call"&gt;&lt;a class="footnote-ref" href="#fn:call"&gt;4&lt;/a&gt;&lt;/sup&gt;. But it was absolutely the right relational call.&lt;/p&gt;
&lt;p&gt;I ended up building a &lt;a href="https://waf.io/book/"&gt;waf-based system&lt;/a&gt; for the application. Waf&lt;sup id="fnref:waf"&gt;&lt;a class="footnote-ref" href="#fn:waf"&gt;5&lt;/a&gt;&lt;/sup&gt; would go on to be build framework for large portions of the company’s code base for over a decade. And for bonus points, the build system paid huge dividends early on as well, and the new feature shipped far ahead of Ella’s expectations.&lt;/p&gt;
&lt;h2 id="christmas-party"&gt;Christmas party&lt;/h2&gt;
&lt;p&gt;The final memory I have of Ella from that first year is the company Christmas party. I’d only been working with Ella a few months at that point, but she made a point to greet my wife and I, and to tell my wife how much she appreciated my presence and contributions at the company. That moment embodied the kind of sincere warmth and thoughtful presence that Ella so often exhibited in our conversations.&lt;/p&gt;
&lt;h2 id="emma-individualized"&gt;Emma, individualized&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“Why do you work here?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don’t recall how long it took for Emma to ask that question after she started managing me. Under a month. Possibly the second time we met.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“I don’t care why you work here, but I need to know why in order to be a good manager.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The question led into a really good conversation about what I valued directly (e.g., respect of co-workers) and how often what a company is willing to pay is an accurate signal of how much they value and respect a person’s work. This was the first of many good conversations with Emma. Beyond that, I learned that Emma cared about tailoring her management style on an individual basis. Case in point, I mentioned that I’d never gotten one of the company’s “above and beyond” thank yous (and we both knew that I’d more than earned a few). Not too long later, the company CEO dropped by to give me one.&lt;/p&gt;
&lt;h2 id="emmas-questions"&gt;Emma’s questions&lt;/h2&gt;
&lt;p&gt;Emma wasn’t a technical boss, but she made up for it by asking for my opinion about everything. Why was such-n-such a problem? How did this technology work? Would such-n-so an approach be faster? Why or why not? Why was testing a hard part of software development?&lt;/p&gt;
&lt;p&gt;And Emma was asking to learn. She knew she didn’t understand the technology, and it lead to great exchanges where we talked about trade-offs, implications, and costs. And Emma often brought up apparent contradictions (either ideas she’d learned from developers or something I’d said) and asked me about them. The conversations helped me to refine and grow my perspectives, but I always had the sense that Emma had a great respect for my views and understanding.&lt;/p&gt;
&lt;h2 id="emma-and-the-shadow-project-manager"&gt;Emma and the shadow project manager&lt;/h2&gt;
&lt;p&gt;One of the first projects that I tackled with Emma was rewriting the control software for some mission-critical company algorithms. I was officially tech lead for a small team and, on paper, Emma was both engineering and project manager.&lt;/p&gt;
&lt;p&gt;However, the project was a highly technical one where almost every story and prioritization choice involved a great deal of technical expertise. Emma saw this, saw that I was good at organization and structuring work, and said, “Go ahead and structure the work as you see fit.” So for a couple years, I basically got to be the shadow project manager as I organized, structured, and prioritized the work.&lt;/p&gt;
&lt;p&gt;A lesser project manager might have been threatened or territorial or wanted to be more in the loop, but Emma trusted me to bring up the choices that had business impact and to make the right technical decisions around the work.&lt;/p&gt;
&lt;p&gt;Beyond that, Emma believed that I could be a good manager and encouraged me that I could do it if I wanted to. At the time, I hadn’t had any managers who had modeled a style that felt like my style, but working with Emma, doing that kind of organizational project work, and having that kind of trust gave me a sense of how I could be an effective manager with my own style.&lt;/p&gt;
&lt;h2 id="candor-and-personalization"&gt;Candor and personalization&lt;/h2&gt;
&lt;p&gt;Finally, I recall two other attributes of my time with both Ella and Emma:&lt;/p&gt;
&lt;p&gt;First, they were straight with me about the hard questions. I got real answers to question like &lt;em&gt;“Why is the organization doing such-n-such?”&lt;/em&gt; or &lt;em&gt;“Is this-or-that really fulfilling our corporate values?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While they respected the necessary corporate privacy, they typically erred on the side of sharing more and trusting me to be discreet. There were at least a few times when I knew well ahead of time about a pending reorg or upcoming departure. Again, the idea of extending trust shows up.&lt;/p&gt;
&lt;p&gt;And finally, they had low expectations for me. They recognized, I believe, that I have incredibly high expectations for myself (some might say unrealistic) and that I do my best work when I’m not feeling pressured to do even more. And so they were able to find meaningful ways to tell me that I was doing great, which helped me to do even better.&lt;/p&gt;
&lt;p&gt;Clearly that exact strategy doesn’t apply to every employee, but the broader principle of understanding each employee and adjusting one’s approach accordingly is absolutely applicable. And I have yet to meet an employee who doesn’t like to know how their work is appreciated.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what&lt;/h1&gt;
&lt;p&gt;I generally opt for a pretty simple management philosophy:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My goal is to make others shine.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If I can create a team where I’m not necessary, that’s fantastic. One of the best compliments of my management came after I’d been away from one of my teams for a while, when I was told, “They’re the team in the engineering department that least needs a manager.” In other words, they were highly productive and self-directing, regardless of whether I was around or not. Beyond that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be credible. I say what I mean, and I mean what I say. I may be mistaken, but people don’t need to worry that I’m snowing them.&lt;/li&gt;
&lt;li&gt;Manage by wandering around (perhaps virtually), chatting, and building relationships.&lt;/li&gt;
&lt;li&gt;Let others leverage their strengths to build the team. I’m not a natural encourager or connector, so I let others with those talents take the lead. While I do need to grow, I don’t need to do all the work myself, and I don’t need to be the one with all the answers (especially if I’m trying to make myself unnecessary).&lt;/li&gt;
&lt;li&gt;Be thoughtfully present.&lt;ul&gt;
&lt;li&gt;Can I tell you the unique contributions of each team member? Do the reviews I write reflect that I’m in touch with the employee’s successes, growth, and ambitions?&lt;/li&gt;
&lt;li&gt;Can I tell you how I’m utilizing their individual strengths and passions in how I’ve allocated work?&lt;/li&gt;
&lt;li&gt;When confronted with someone’s weakness, am I immediately reacting to that weakness, or am I seeking to understand what is leading to the expression of that weakness?&lt;/li&gt;
&lt;li&gt;If anything I’m going to write on someone’s review will surprise them, then I’m failing as a manager and need to adjust.&lt;/li&gt;
&lt;li&gt;If I’m going to write a bad review for someone&lt;sup id="fnref:review"&gt;&lt;a class="footnote-ref" href="#fn:review"&gt;6&lt;/a&gt;&lt;/sup&gt;, have I gone above and beyond to make sure it is the employee who is the problem and not the way I’m managing?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This certainly isn’t an exhaustive list; much of this is shaped by what I’m naturally weak at and thus needs extra attention. For example, I naturally bring about organization and structure; what I need to focus on is relationships and spontaneity. So managing by wandering around helps provide those opportunities and “structures” unstructured time for me.&lt;/p&gt;
&lt;p&gt;But in a nutshell, that captures an awful lot of what I’ve learned from my best managers. After all, good management is really pretty simple most of the time – the only hard part is living it out consistently.&lt;/p&gt;
&lt;h1 id="soapbox-bonus"&gt;Soapbox bonus&lt;/h1&gt;
&lt;p&gt;I posit three factors are behind the stark dichotomy between the plethora of management books and the shortage of good managers.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The head-knowledge for being a great leader is quite straightforward (thus, so many books).&lt;/li&gt;
&lt;li&gt;The character mastery for being a great leader is exceptionally challenging. As the saying goes, policy is for when one lacks either the character or the experience for the situation&lt;sup id="fnref:policy"&gt;&lt;a class="footnote-ref" href="#fn:policy"&gt;8&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;As a whole, businesses aren’t persuaded that great managers really make that much of a difference.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, while there is a no storage of lip service to the idea that great managers are essential, when rubber meets the road, other realities often win out.&lt;/p&gt;
&lt;p&gt;Too cynical? Perhaps.&lt;/p&gt;
&lt;p&gt;Maybe I’ll do a more in-depth reflection about the organizational challenges around great managers in the future.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:wander"&gt;
&lt;p&gt;I don’t even remember the book, but it introduced me to &lt;a href="https://www.mindtools.com/a79izhx/management-by-wandering-around-mbwa"&gt;management by wandering around&lt;/a&gt;. &lt;em&gt;First, Break All The Rules&lt;/em&gt; by Don Clifton also deserves a hat tip for articulating many of these ideas. &lt;a class="footnote-backref" href="#fnref:wander" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:hindsight"&gt;
&lt;p&gt;In hindsight, I probably could have accepted Ella’s offer and then gone to the interview anyway, so Ella’s response may have also just been good negotiation to make sure she got a real yes. &lt;a class="footnote-backref" href="#fnref:hindsight" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:choice"&gt;
&lt;p&gt;As it turned out, the other interview was catastrophically bad – like, “the hiring manager flagrantly violating EEOC regulations with off-hand comments to me during the interview” bad – so at the end of the day, the job choice was pretty easy. &lt;a class="footnote-backref" href="#fnref:choice" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:call"&gt;
&lt;p&gt;The decision worked out really well, so in hindsight it is easy to say it was the right one, but I ponder whether there was a better call with the information available at the time. &lt;a class="footnote-backref" href="#fnref:call" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:waf"&gt;
&lt;p&gt;At the time, waf clearly beat out the open source competition, especially choices like &lt;em&gt;make&lt;/em&gt; (shudder). I haven’t kept up with it for a number of years, but I suspect other tools such as &lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt; give it a run for its money today. &lt;a class="footnote-backref" href="#fnref:waf" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:review"&gt;
&lt;p&gt;While, yes, problem employees do exist, most of the time, most people respond really well to good management. So starting with the assumption that it’s on me to do better covers most situations really well. &lt;a class="footnote-backref" href="#fnref:review" title="Jump back to footnote 6 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:horror"&gt;
&lt;p&gt;Maybe I’ll do a follow-up along the lines of the &lt;em&gt;&lt;a href="https://www.goodreads.com/en/book/show/1310108"&gt;Bike Lesson&lt;/a&gt;&lt;/em&gt;, where I share the invaluable lessons I learned from watching my bosses do it wrong. &lt;a class="footnote-backref" href="#fnref:horror" title="Jump back to footnote 7 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:policy"&gt;
&lt;p&gt;That’s not to say that policy isn’t useful or necessary. But imagine a world where nearly every manager was an exceptional manager: How much policy would still be necessary? &lt;a class="footnote-backref" href="#fnref:policy" title="Jump back to footnote 8 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="management"></category></entry><entry><title>Time</title><link href="https://rayalan.github.io/20230904-time-the-greatest-challenge.html" rel="alternate"></link><published>2023-09-04T00:00:00-04:00</published><updated>2023-09-04T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2023-09-04:/20230904-time-the-greatest-challenge.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Time, the software engineer&amp;rsquo;s greatest challenge.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Is that too strong a statement? There certainly are other candidates such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Money (although if time is money, maybe this supports my thesis).&lt;/li&gt;
&lt;li&gt;Communication and division of labor, especially as the organization grows larger and larger.&lt;/li&gt;
&lt;li&gt;Office politics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But time uniquely permeates …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Time, the software engineer&amp;rsquo;s greatest challenge.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Is that too strong a statement? There certainly are other candidates such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Money (although if time is money, maybe this supports my thesis).&lt;/li&gt;
&lt;li&gt;Communication and division of labor, especially as the organization grows larger and larger.&lt;/li&gt;
&lt;li&gt;Office politics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But time uniquely permeates the software development.&lt;/p&gt;
&lt;h1 id="coding-time"&gt;Coding time&lt;/h1&gt;
&lt;p&gt;In writing software, time is rarely easy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finding out the true time is non-trivial. Maybe the system clock (or the possibly hijacked browser) can&amp;rsquo;t be trusted. Or maybe they just aren&amp;rsquo;t synced to the NIST time. Or maybe one wants to figure out the latency between a client and server and isn&amp;rsquo;t sure both clocks are synced.&lt;/li&gt;
&lt;li&gt;Periodically someone forgets to store data in UTC, which leads to fun and easy-to-get-wrong timezone manipulation operations.&lt;/li&gt;
&lt;li&gt;Or perhaps one needs to be able to reliably plot events on a timeline, including whether that 1980 October 26 1:01a record happened before or after daylight savings time ended. And periodically governments change the rules around time, so a locale that practices daylight savings time now might not in a year &amp;ndash; or five years ago.&lt;/li&gt;
&lt;li&gt;Even questions like &amp;ldquo;What does it mean for event A to happen before event B?&amp;rdquo; get weird in computer systems. If I receive event A before event B, does that mean event A happened first? What if event B was sent first, but was lost, and only arrived an hour later? What if I&amp;rsquo;m working in a distributed system where I only know about one of the events?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And don&amp;rsquo;t get me started on trying to write tests that involve time. Benchmarks are predictable until they aren&amp;rsquo;t. Tests work fine until that one moment when an operation didn&amp;rsquo;t take as long as expected, resulting in equality instead of an ordered sequence. Or someone sticks in a &lt;code&gt;if is_daylight_savings_time&lt;/code&gt; check that makes it through code review, resulting in mysterious test failure four months later.&lt;/p&gt;
&lt;h1 id="state"&gt;State&lt;/h1&gt;
&lt;p&gt;And then there&amp;rsquo;s the problem of state. Almost every system has some form of persistent state: settings, save games, profiles, collected data. And this persistent state needs to be maintained across updates. All too often this state goes back years (e.g., Windows maintaining MS-DOS compatibility) or cannot be abandoned (imagine if your bank account periodically reset itself to zero&lt;sup id="fnref:zero"&gt;&lt;a class="footnote-ref" href="#fn:zero"&gt;1&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;
&lt;p&gt;Even if there&amp;rsquo;s no persistent state, there&amp;rsquo;s often a transient state such as a data pipeline where events are intransient, so the new software needs to be able to handle the old format.&lt;/p&gt;
&lt;h1 id="customer-expectations"&gt;Customer expectations&lt;/h1&gt;
&lt;p&gt;And then once the software has been released, customers develop expectations - how the software works, what features it supports, and how those features work. Three months later, I may have figured out a totally better way to display time and realize that only five people use the &lt;code&gt;ping&lt;/code&gt; mechanism. But that doesn&amp;rsquo;t mean my existing customer base wants their time display to change overnight. And those five people who use the &lt;code&gt;ping&lt;/code&gt; mechanic aren&amp;rsquo;t going be very happy if it goes away, even if they never would have noticed if I&amp;rsquo;d never introduced the capability.&lt;/p&gt;
&lt;p&gt;And of course it takes a customer almost no time to notice a change that they don&amp;rsquo;t like, while it takes a great deal of engagement for them to read my release notes, my tutorial tips, or whatever migration mechanism I put in place.&lt;/p&gt;
&lt;h1 id="organizational-changes"&gt;Organizational changes&lt;/h1&gt;
&lt;p&gt;On top of all of this, the organization changes over time. Bob, who designed the system from the ground up, gets promoted and isn&amp;rsquo;t around to answer questions. Jane made a few fundamental changes to Bob&amp;rsquo;s design, but then left to work at her friend&amp;rsquo;s company. The sales department wants to change the pricing model, which breaks fundamental software assumptions. The user interface team discovered their initial information architecture actually had several key misconceptions and want to overhaul the design.&lt;/p&gt;
&lt;p&gt;Meanwhile, the the customer service department is significantly over budget and the number of customer complaints have to be cut in half &amp;ndash; even though easy access to customer service was one of the bedrock principles of the initial design.&lt;/p&gt;
&lt;p&gt;Or if it&amp;rsquo;s a very, very bad day, a key software dependency horrifically changes their pricing model &amp;ndash; effective in three months &amp;ndash; and it is all hands on deck to learn and migrate to the competition.&lt;/p&gt;
&lt;h1 id="so-what"&gt;So what?&lt;/h1&gt;
&lt;p&gt;So time is a headache across all levels of software, and that&amp;rsquo;s why it&amp;rsquo;s my candidate for a software engineer&amp;rsquo;s greatest challenge. What can be done about it?&lt;/p&gt;
&lt;p&gt;For some scenarios, there are best practices. For example, use UTC to pass and store time values; translate to a user-specific timezone at the display level.&lt;/p&gt;
&lt;p&gt;But best practices don&amp;rsquo;t solve most of these problems. Instead, the challenge for architects is to mitigate the problem through three practices:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Educate. Both engineers and stakeholders (especially the non-technical ones) need to understand the problem and the trade-offs with other priorities such as features. Most people, even non-technical ones, can understand these challenges, but won&amp;rsquo;t consider them without prompting.&lt;/li&gt;
&lt;li&gt;Articulate. Take the company&amp;rsquo;s strategy when it comes to priorities and risk tolerances and put it into writing. Some companies, for example, can afford to invest deeply in employee retention, documentation, or well-tested wrappers around 3rd-party software to mitigate risks. For other companies, the immediate priority may be getting to market, and business continuity is a priority for another day.&lt;/li&gt;
&lt;li&gt;Translate. Take the strategic principles and turn them into day-to-day development principles&lt;sup id="fnref:tenets"&gt;&lt;a class="footnote-ref" href="#fn:tenets"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Those steps don&amp;rsquo;t seem like enough, though. What else have you seen done to solve the problem of time?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:zero"&gt;
&lt;p&gt;Actually, for some people, overdraft coverage plus a periodically resetting bank account could be a feature. But banks probably wouldn&amp;rsquo;t like it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:zero" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:tenets"&gt;
&lt;p&gt;One day I want to turn this idea into a full-blown blog article.&amp;#160;&lt;a class="footnote-backref" href="#fnref:tenets" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="architecture"></category><category term="architecture"></category><category term="software"></category></entry><entry><title>Paralyzing Success</title><link href="https://rayalan.github.io/mistake-monday-paralysis.html" rel="alternate"></link><published>2022-07-04T00:00:00-04:00</published><updated>2022-07-04T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2022-07-04:/mistake-monday-paralysis.html</id><summary type="html">
&lt;p&gt;Retrospectives are one of the practices I most value from the Agile ceremonies: taking the time to look back, think over what happened, and learn from one’s decisions, good and bad. In today’s Mistake Monday article, I look back at a fundamental design flaw I made in many …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Retrospectives are one of the practices I most value from the Agile ceremonies: taking the time to look back, think over what happened, and learn from one’s decisions, good and bad. In today’s Mistake Monday article, I look back at a fundamental design flaw I made in many of my early continuous integration / continuous development automations.&lt;/p&gt;
&lt;p&gt;Here was my basic concept for how to roll out automation:&lt;/p&gt;
&lt;div class="mermaid"&gt;

flowchart LR
  a --&amp;gt; b --&amp;gt; c --&amp;gt; b
  a(no automation)
  b(build automated build and deployment feature)
  c(iteratively adopt feature)
&lt;/div&gt;
&lt;p&gt;Early on, there was almost no automated build or CI/CD support. Gradually I built up the capabilities and sold others on using the new capabilities. And for some time, this process went swimmingly. And then it ground to a halt.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What had I done wrong?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Well, I had centralized the system. Basically, a change either went live to everyone, or to no one. And when the system did offer a choice of whether to adopt a feature, it was an all-or-nothing choice: Adopt all the feature improvements available, or adopt none of them.&lt;/p&gt;
&lt;p&gt;As long as the number of users of the system was small, this centralization wasn’t a big deal. But the more teams that used the system, the more divergent their practices. Some didn’t want a feature. Or they wanted the feature, but not in the middle of crunch time. In some cases, they wanted to adopt the feature in one or two of their projects, but not all. Sometimes the changes required mandatory Python upgrades – which might not be backward compatible with all of that team’s build dependencies.&lt;/p&gt;
&lt;p&gt;Eventually with enough teams, it was never a good time to upgrade. There was always an incompatibility. Someone always didn’t want to learn the new behavior. And so the system improvements stopped – the CI/CD capabilities became effectively frozen.&lt;/p&gt;
&lt;h1 id="lessons-learned"&gt;Lessons Learned&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Massive one-shot rollouts are really hard. While they may be sometimes necessary, it is often far preferable to do gradual controlled rollouts.&lt;/li&gt;
&lt;li&gt;Successful development isn’t just about having the solution, but in getting it adopted.&lt;/li&gt;
&lt;li&gt;Self-contained project-specific build configuration has a lot of upside: Each project can change at its own pace, independent of any other system&lt;sup id="fnref:downside"&gt;&lt;a class="footnote-ref" href="#fn:downside"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Adoption and transition plans are first-class problems who need to be solved in designing the software. It isn’t enough to build the solution, and then ask: How are we going to roll this out? Yes, this approach makes software more expensive – but it’s a true part of the cost.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="a-happy-example"&gt;A Happy Example&lt;/h1&gt;
&lt;p&gt;As a way of counter example in another of my projects (done later), behavior changes were made individually to hundreds of thousands of users. Each change included an explanatory e-mail, and the team managed how many of these changes went live each day. This allowed careful testing of the changes – including the notifications – before any users saw different behavior. Then the transition process was tested on small numbers of users. When those tests went well, the remaining users could be converted whenever. Because the same transition process was used from testing to the final conversions, there weren’t any late surprises.&lt;/p&gt;
&lt;h1 id="final-thought"&gt;Final Thought&lt;/h1&gt;
&lt;p&gt;In many cases, transitions and upgrades cannot be just an afterthought; they need to be part of the primary design.&lt;/p&gt;
&lt;script src="https://unpkg.com/mermaid/dist/mermaid.min.js"&gt;&lt;/script&gt;
&lt;script&gt;mermaid.initialize({startOnLoad:true});&lt;/script&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:downside"&gt;
&lt;p&gt;Yes, having to update each project configuration to make a change is cost – sometimes a high one – to pay for this. &lt;a class="footnote-backref" href="#fnref:downside" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="mistake monday"></category><category term="cicd"></category><category term="devops"></category><category term="agile"></category></entry><entry><title>Measurement and Feedback Loops</title><link href="https://rayalan.github.io/reflection-feedback-loop.html" rel="alternate"></link><published>2022-06-27T00:00:00-04:00</published><updated>2022-06-27T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2022-06-27:/reflection-feedback-loop.html</id><summary type="html">
&lt;p&gt;Tim Cochran has a great writeup on &lt;a href="https://martinfowler.com/articles/developer-effectiveness.html"&gt;developers and feedback loops&lt;/a&gt; along with broader reflections on agile-oriented development.&lt;/p&gt;
&lt;p&gt;Implicit with the idea of feedback loops is the idea of measurement. After all, if one cannot measure how fast the feedback loop is, how is one going to decide if it …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Tim Cochran has a great writeup on &lt;a href="https://martinfowler.com/articles/developer-effectiveness.html"&gt;developers and feedback loops&lt;/a&gt; along with broader reflections on agile-oriented development.&lt;/p&gt;
&lt;p&gt;Implicit with the idea of feedback loops is the idea of measurement. After all, if one cannot measure how fast the feedback loop is, how is one going to decide if it needs improvement?&lt;/p&gt;
&lt;h1 id="measure-twice-cut-once"&gt;Measure Twice, Cut Once&lt;/h1&gt;
&lt;p&gt;Measurement is challenging, especially when it comes to people and coding problems. With lumber, cutting a board to length is pretty much the same process every time, which makes it relatively easy to measure how long it takes to cut the board.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Goodhart’s Law&lt;/strong&gt;: When a measure becomes a target, it ceases to be a good measure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With software, questions emerge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Is this scenario typical or a one-off?&lt;/em&gt; Almost by definition, one-off scenarios will take abnormally long and are often under the gun, so they tend to grab management attention. But if one only measures abnormal situations, the measurement won’t reflect typical behaviors.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Is it worth the overhead to measure every occurrence of a feedback loop?&lt;/em&gt; One way to avoid fixating on the abnormal is to always measure a feedback loop.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What am I actually measuring?&lt;/em&gt; For example, if I want to know how long it takes to find the root cause for a defect, I might measure when the developer starts work on finding the defect and when she finds the cause. But if the developer had many meetings, I might more be measuring how many meetings the developer has far more than the quality of software. Likewise, what if the developer identifies the wrong cause? I may be measuring how long it takes the developer to think they’ve found the root cause, not the actual time to find the root cause.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What do I need to measure?&lt;/em&gt; Maybe it is good enough to know what the worst case feedback loop is - when the developers have lots of meetings and the problem is really thorny. If the worst case tends to be 3-4 days, then maybe that’s enough to say my team has an effective ability to find root causes.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How will the measurement impact the team dynamics?&lt;/em&gt; Goodhart’s Law captures the danger of making targets out of measurement. Set a target number of lines of code written per developer, and the code becomes insanely verbose. Measure the number of commits, and developers fragment their work. So it’s important to integrate measurement in a way that creates the desired team dynamics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="deliver-value-not-metrics"&gt;Deliver Value, Not Metrics&lt;/h1&gt;
&lt;p&gt;At the end of the day, what matters is delivering value to customers (broadly defined&lt;sup id="fnref:customers"&gt;&lt;a class="footnote-ref" href="#fn:customers"&gt;1&lt;/a&gt;&lt;/sup&gt;). That is, it doesn’t matter whether the system reports no errors if customers can’t buy from the online store. And the shiny new build system that tells me in 5s that everything is broken isn’t much use if it can’t be fixed.&lt;/p&gt;
&lt;p&gt;In deciding what value to deliver, there are feedback loops just like in software. Here are three basic ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How long does it take the decision makers&lt;sup id="fnref:makers"&gt;&lt;a class="footnote-ref" href="#fn:makers"&gt;2&lt;/a&gt;&lt;/sup&gt; to know about the problem or pain?&lt;/li&gt;
&lt;li&gt;How long does it take the decision makers to know how much the change is worth?&lt;/li&gt;
&lt;li&gt;How long does it take the decision makers to know what the change will cost (including opportunity costs)?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consider these two decision-making paths:&lt;/p&gt;
&lt;div class="mermaid"&gt;
flowchart TD
  subgraph Option Two
    a(Developer spots typo)
    b(Developer commits change)
    c(Change automatically deploys with next release)
    a --&amp;gt; b --&amp;gt; c
  end

  subgraph Option One
    d(Developer spots typo)
    e(Developer asks manager if fixing it is a priority)
    f(Manager asks brand standards if it really is a typo)
    g(Manager tells developer to fix it after the current work)
    h(Developer makes a note to himself)
    i(Developer forgets for a while)
    j(Developer commits change)
    h(Change automatically deploys with next release)
    d --&amp;gt; e --&amp;gt; f --&amp;gt; g --&amp;gt; h --&amp;gt; i --&amp;gt; j
  end
&lt;/div&gt;
&lt;p&gt;The option one change is far more expensive: More people are more disrupted and the value takes far longer to roll out. However, the second option isn’t quite as straightforward as it might seem.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The developer needs to be able to recognize typos (within reasonable accuracy).&lt;/li&gt;
&lt;li&gt;The developer needs to recognize when a change is complicated enough to require outside expertise (e.g., it’s more than just a typo)&lt;/li&gt;
&lt;li&gt;The company needs to be willing to accept some misjudgments by the developer in exchange for faster fixes. If someone in brand standards is being evaluated based on “number of typos released,” he might prefer the option one approach because it makes his metrics look better (yes, Goodhart’s law again).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One last note here: I intentionally use the plural &lt;em&gt;decision makers&lt;/em&gt;, but the more people are in the mix, the more communication overhead there is. One way to effectively speed up these feedback loops is to reduce the number of people involved as much as possible. Of course, fewer people has other consequences.&lt;sup id="fnref:consequences"&gt;&lt;a class="footnote-ref" href="#fn:consequences"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="approximating-value"&gt;Approximating Value&lt;/h1&gt;
&lt;p&gt;As a rule of thumb, I prefer approaches that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trust and empower teams (and the individuals within) to make good choices.&lt;/li&gt;
&lt;li&gt;Minimize process overhead.&lt;/li&gt;
&lt;li&gt;Provide appropriate feedback to decision makers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the aspects of scrum that I’ve struggled with is the concepts of estimation and velocity. One reason for this is that velocity is not a measure of value delivered - that is, yes, 4 user stories worth 53 story points were delivered in the last month. But those 53 story points are an estimate of development effort, not an estimate of business value.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;So how might a company solve this problem in a way that minimizes overhead and aligns the development team’s work with the business objectives?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For some projects, it’s worth doing a detailed return-on-investment calculation. But often, that’s overkill or requires data that isn’t available and can’t be quickly collected&lt;sup id="fnref:anything"&gt;&lt;a class="footnote-ref" href="#fn:anything"&gt;5&lt;/a&gt;&lt;/sup&gt;. How else might the problem be solved?&lt;/p&gt;
&lt;p&gt;In European-style &lt;a href="https://boardgamegeek.com/"&gt;board gaming&lt;/a&gt;, there’s an argument that everything can be reduced to an auction. Imagine doing something similar and creating a value-driven reward system for development teams.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each decision maker gets a budget of N points per month.&lt;/li&gt;
&lt;li&gt;Each decision maker offers the team M points for achieving some outcome. This can be a single outcome worth N points, five outcomes worth N/5 points, or any other desired distribution.&lt;/li&gt;
&lt;li&gt;The team’s goal is to maximize the number of points they earn over time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="auction-based-value"&gt;Auction-Based Value&lt;/h2&gt;
&lt;p&gt;How might this system work?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The marketing director wants a new piece of data tracked, so he offers some points to add new behavior.&lt;/li&gt;
&lt;li&gt;The CIO wants various security metrics achieved, so she offers points for hitting those metrics.&lt;/li&gt;
&lt;li&gt;The customer service department wants a better way to report bugs, so they offer some points if bug reporting can be reduced to under 60 seconds, and far more points if it can be reduced to under 30 seconds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then the team can look at their incentives and pick the work they think will achieve the most value. At the end of the month, the team reports on how many points they earned.&lt;/p&gt;
&lt;h1 id="strengths-and-complications"&gt;Strengths and Complications&lt;/h1&gt;
&lt;p&gt;This system has a number of strengths. Consider these benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Measurable deliverables are tied to value.&lt;/li&gt;
&lt;li&gt;Teams have wide discretion in what to work on and how to achieve it.&lt;/li&gt;
&lt;li&gt;There is high flexibility in what outcomes are valued. If new skills are valued, points can be awarded for training; if uptime is valued, points can be awarded for uptime, and so on.&lt;/li&gt;
&lt;li&gt;ROI calculations are approximated without requiring complex coordination between decision makers and the team.&lt;/li&gt;
&lt;li&gt;Maintaining functionality over time becomes part of what earns teams points. Thus the maintenance overhead is visible to the decision makers – and if a feature isn’t worth maintaining, it likely will be removed as the team decides it isn’t worth the effort.&lt;/li&gt;
&lt;li&gt;Teams are incentivized to improve how they work in order to maximize their points.&lt;/li&gt;
&lt;li&gt;The incentive structure is clear to the decision makers and the team. If decision makers don’t like what is being shipped, it’s easy to explain why the team is making such choices.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, there are some complications with such a system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some outcomes may be fundamentally non-negotiable. A data breach may not be acceptable no matter what else is delivered. While there are ways of modeling this in the auction (e.g., the team gets 0 points if there is a data breach), such approaches may not adequately indicate the business consequences of such an outcome.&lt;/li&gt;
&lt;li&gt;Some outcomes may require a longer time horizon than a month. A move to cloud computing or a state-of-the-art CI/CD system may not be beneficial in 6 months or 12 months, but may be a 3 or 5 year strategic bet.&lt;sup id="fnref:short"&gt;&lt;a class="footnote-ref" href="#fn:short"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Destructive conflict can arise about whether or not an outcome was achieved if the decision makers and the team lack trust or a common understanding of work standards.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="final-thought"&gt;Final Thought&lt;/h1&gt;
&lt;p&gt;The idea of identifying feedback loops and optimizing the key ones makes a lot of sense, not just in the actual development of software, but the entire decision making process around software. Yes, there will be approximations and complications, but the smoother the process, the more developers can focus on delivering valuable software, which is good for the business.&lt;/p&gt;
&lt;script src="https://unpkg.com/mermaid/dist/mermaid.min.js"&gt;&lt;/script&gt;
&lt;script&gt;mermaid.initialize({startOnLoad:true});&lt;/script&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:customers"&gt;
&lt;p&gt;I’m using customers broadly here – the executives might be the customer for product performance metrics. The accounting team might be the customers for financial audits. The developers might be the customers for a more delightful development environment. &lt;a class="footnote-backref" href="#fnref:customers" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:makers"&gt;
&lt;p&gt;INSERT NOTE HERE &lt;a class="footnote-backref" href="#fnref:makers" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:consequences"&gt;
&lt;p&gt;Fewer people usually means fewer experts and fewer eyes to catch problems. For a typo, that’s likely not a big deal. But when it comes to the big new multi-million product initiative, that’s a much bigger deal. &lt;a class="footnote-backref" href="#fnref:consequences" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:short"&gt;
&lt;p&gt;In general, an agile philosophy often struggles to make long-term bets or improvements; switching the architecture over to AWS only to discover it is 2x more expensive is a really expensive mistake if it takes months to execute and longer to correct, but it may be hard to see the whole picture before the change is executed. &lt;a class="footnote-backref" href="#fnref:short" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:anything"&gt;
&lt;p&gt;Obligatory mention of &lt;em&gt;&lt;a href="https://www.amazon.com/How-Measure-Anything-Intangibles-Business/dp/1118539273"&gt;How To Measure Anything&lt;/a&gt;&lt;/em&gt;: it’s well worth reading for creative ideas on how to approximate many unknowns. &lt;a class="footnote-backref" href="#fnref:anything" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="practices and principles"></category><category term="agile"></category><category term="devops"></category><category term="strategy"></category></entry><entry><title>Home Depot Search</title><link href="https://rayalan.github.io/home-depot-review.html" rel="alternate"></link><published>2022-06-20T00:00:00-04:00</published><updated>2022-06-20T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2022-06-20:/home-depot-review.html</id><summary type="html">
&lt;p&gt;Periodically, I like to look at the user experience as an individual consumer, not as a professional, and then link those observations back to professional software development.&lt;/p&gt;
&lt;p&gt;Occasionally, I pretend I have some woodworking skill and build something. Since &lt;a href="http://www.homedepot.com"&gt;Home Depot&lt;/a&gt; is my nearby big box store of choice, I …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Periodically, I like to look at the user experience as an individual consumer, not as a professional, and then link those observations back to professional software development.&lt;/p&gt;
&lt;p&gt;Occasionally, I pretend I have some woodworking skill and build something. Since &lt;a href="http://www.homedepot.com"&gt;Home Depot&lt;/a&gt; is my nearby big box store of choice, I’m often looking at their website. On the surface, I’d expect their website to be impeccable – both as a lure to bring me into the store and as a way to compete against Amazon and the like. However, I constantly struggle when I go to use it. After I cover a couple of recent examples, I’ll close out with a few thoughts about software development.&lt;/p&gt;
&lt;h3 id="plywood"&gt;Plywood&lt;/h3&gt;
&lt;p&gt;I want some plywood, so I search the website for “plywood.” This search brings me to a nice page listing some of the specifics I might want – hardwood plywood, MDF, project panels, 1/2” nominal product thickness, and so on.&lt;/p&gt;
&lt;p&gt;And on the left, there’s this thickness selector:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Home Depot thickness selector" src="images/home-depot-plywood-thickness.png" title="Thickness Selector"/&gt;.&lt;/p&gt;
&lt;p&gt;Most of that is pretty normal – except for the 23/32” entry. I’m pretty sure that nominal product thickness means the common thickness given, not the actual thickness. And Home Depot thinks so too, because their top level selector offers two nominal thickness values - 1/2” and 3/4”. See this image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Home Depot plywood selector" src="images/home-depot-plywood-selector.png" title="Plywood Selector"/&gt;&lt;/p&gt;
&lt;p&gt;Here are some of the offerings in that category:&lt;/p&gt;
&lt;p&gt;&lt;img alt='Home Depot plywood 23/32" selections' src="images/home-depot-plywood-offerings-23-32.png" title='Plywood Offerings 23/32"'/&gt;&lt;/p&gt;
&lt;p&gt;Notice anything strange? That’s right, 2 of the offerings are listed as 3/4”. So while the 3/4” category contains 58 entries, the 23/32” category contains 12 – including the economical sanded plywood entries that I suspect are what many people are looking for when they want of 3/4” plywood – and yes, this means the top-level selector pictured above likely won’t show a key product.&lt;/p&gt;
&lt;p&gt;This leads to some interesting questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Did Home Depot intentionally split their 3/4” and 23/32” plywood into two categories?&lt;/li&gt;
&lt;li&gt;If yes, does Home Depot believe that the average shopper looking for “nominally” 3/4” plywood really cares about 1/32”?&lt;/li&gt;
&lt;li&gt;If no, is there a data quality issue such that about 15% of the products have bad data?&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="cutting-service"&gt;Cutting Service&lt;/h3&gt;
&lt;p&gt;Here’s another fun example: Home Depot offers a very cool service for DIY projects where they will cut boards at the store for you – often for free or with a nominal charge. Fantastic for when one’s vehicle won’t fit a full sheet of plywood or an 8’ 2x4.&lt;/p&gt;
&lt;p&gt;When I search for &lt;a href="https://www.google.com/search?q=home+depot+cutting+service"&gt;“Home Depot cutting service”&lt;/a&gt; or “Home Depot cut wood for you” or similar terms, I get plenty of third-party sites telling me all about this wonderful service. But no results for Home Depot. Nor does entering the term “cutting” into the Home Depot search area. Their lumber and composites section has this blurb to encourage visiting them:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Home Depot Lumber Blurb" src="images/home-depot-wood-project-blurb.png" title="Lumber Blurb"/&gt;&lt;/p&gt;
&lt;p&gt;But no mention of their cutting service.&lt;/p&gt;
&lt;h1 id="retrospective"&gt;Retrospective&lt;/h1&gt;
&lt;p&gt;If the plywood categorization was a freak mishap, I’d almost certainly brush it off. But instead, I regularly find products miscategorized when I want something from Home Depot. As a result, the selectors are time consuming as I try to figure out all the options that I might need to check. Emotionally, I find myself irritated and distrustful – not the outcome I suspect Home Depot wants to inspire.&lt;/p&gt;
&lt;p&gt;I’m sure none of this difficulty is intentional. I’m also sure product data is incredibly hard for Home Depot&lt;sup id="fnref:others"&gt;&lt;a class="footnote-ref" href="#fn:others"&gt;1&lt;/a&gt;&lt;/sup&gt;, which is managing many thousands&lt;sup id="fnref:thousands"&gt;&lt;a class="footnote-ref" href="#fn:thousands"&gt;2&lt;/a&gt;&lt;/sup&gt; of products. But the net result is that I still wish for alternatives every time I laboriously hunt through Home Depot’s website. And that what could be a competitive advantage – a crazily useful product locator – instead becomes a liability.&lt;/p&gt;
&lt;p&gt;For me, this is an illustration of how it isn’t just about the right feature set or the right data; it’s about the system working well for end users. It’s easy to deliver a feature set, but miss the actual consumer needs.&lt;/p&gt;
&lt;h2 id="last-thought"&gt;Last Thought&lt;/h2&gt;
&lt;p&gt;One final musing: I wonder if this failing is because of the technical difficulty, the lack of business value, or something else. Technically, I’d expect this is a fixed cost solution – the right designs, the right data entry protections, maybe a way for users to easily flag problems – and the problem would basically stay solved. The biggest variable cost I would expect to be data entry, which already seems to be something Home Depot is doing. Since Home Depot hasn’t done that, the problem might be more complicated than that – especially if their backend data systems are a mess, or their computing systems aren’t well integrated with, say, their suppliers.&lt;/p&gt;
&lt;p&gt;Another possibility is that there just isn’t enough business value in fixing the problem. Maybe making products easy to locate just doesn’t pay off. That’s hard for me to imagine, but maybe they mostly win on factors such as location, convenience, and dealing in goods that are less prone to online competition (such as by being bulky).&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:others"&gt;
&lt;p&gt;And others. Home Depot certainly isn’t alone in this struggle. &lt;a class="footnote-backref" href="#fnref:others" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:thousands"&gt;
&lt;p&gt;Or millions? I suppose “Estimate how many products are in Home Depot’s database?” could be a fun interview alternative to “How many windows are in Seattle?” &lt;a class="footnote-backref" href="#fnref:thousands" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="crossover reviews"></category><category term="user experience"></category><category term="left-field reviews"></category></entry><entry><title>Stripe Review</title><link href="https://rayalan.github.io/stripe-review.html" rel="alternate"></link><published>2022-06-13T00:00:00-04:00</published><updated>2022-06-13T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2022-06-13:/stripe-review.html</id><summary type="html">
&lt;p&gt;All too often, integrating with a third-party technology is a pain: the product doesn’t reliably work, the documentation is inadequate, the solution lacks essential concepts, the customer support disappears once the purchase has been made, and so on. Most developers have felt this pain, I think, whether it is …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;All too often, integrating with a third-party technology is a pain: the product doesn’t reliably work, the documentation is inadequate, the solution lacks essential concepts, the customer support disappears once the purchase has been made, and so on. Most developers have felt this pain, I think, whether it is using an open source library or a purchased solution.&lt;/p&gt;
&lt;p&gt;Thus on the rare occasions when a company knocks it out of the park with an effective product that is a joy to work with technically, I want to reflect on how that win was achieved – and what lessons I can learn.&lt;/p&gt;
&lt;p&gt;Today I’m reviewing &lt;a href="https://stripe.com/"&gt;Stripe&lt;/a&gt;. As background, I’ve worked with Stripe for about four years; my introduction to it was investigating it as a potential 3rd-party replacement for an in-house billing system (henceforth &lt;em&gt;The Billing Project&lt;/em&gt;). After it beat out the other options the company looked at, I led the project to implement Stripe across the company, including satisfying accounting audits and customer service interfaces. And after the initial implementation, I oversaw the maintenance and iterative improvement of the new Stripe-based billing system.&lt;/p&gt;
&lt;h1 id="big-takeaways"&gt;Big Takeaways&lt;/h1&gt;
&lt;p&gt;My three big takeaways from Stripe:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Excellence matters&lt;/em&gt;: Across the board, Stripe is an excellent product. Given a choice, they seem to prefer to do the essentials well, rather than having more features with a less solid experience. The result is that while I did, at times, want more from the product, I was confident that what I had to work with was rock solid.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Intertwine process with product&lt;/em&gt;: The “things” Stripe produced (such as APIs, features, and documentation) also enabled processes (such as onboarding, prototyping, and testing) to work well.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Integrate multiple disciplines&lt;/em&gt;: Stripe reflects excellence in the disciplines of development, architecture, user experience, quality assurance, customer support, business intelligence, and law. I’m pretty sure they aren’t hiring individuals who have mastered all these fields; rather, they are effectively integrating expertise from many different people.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="strengths"&gt;Strengths&lt;/h1&gt;
&lt;p&gt;So what did Stripe do well? I’ll split this discussion into two views:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What processes do customers need to do well?&lt;/li&gt;
&lt;li&gt;What product features do customers need?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="processes"&gt;Processes&lt;/h2&gt;
&lt;p&gt;In this section, I’m looking at the different stages of a project to implement Stripe, and how Stripe strongly supports each stage.&lt;/p&gt;
&lt;h3 id="technology-vetting-selection"&gt;Technology Vetting / Selection&lt;/h3&gt;
&lt;p&gt;First, a billing system platform needs to be selected. Build in-house? 3rd-party? Which one?&lt;/p&gt;
&lt;p&gt;Stripe makes it easy to understand what it is capable of, how it works (e.g. events), and how to use it. This is largely based on its excellent documentation system, but also because anyone can spin up a fully functional sandbox in a few minutes. The result is that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ideas can be quickly prototyped and verified.&lt;/li&gt;
&lt;li&gt;Any concerns or uncertainties can be turned into specific technical questions for Stripe to answer – and those answers can then be tested to make sure they produce the desired result.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With many products (including several of Stripe’s competitors that I considered), it was not possible to properly validate the functionality before purchase. With Stripe, I had vetted the functionality and architecturally designed about 95% of the billing project by the time Stripe was settled on as a vendor. Because of good documentation and strong alignment between the documentation and Stripe functionality, that initial design was an accurate high-fidelity design of what ended up being implemented.&lt;/p&gt;
&lt;h3 id="onboarding-initial-implementation"&gt;Onboarding / Initial Implementation&lt;/h3&gt;
&lt;p&gt;After selecting Stripe, the next big challenge is the initial implementation and rollout of Stripe. In The Billing Project, this work involved everything from accounting audit processes to rolling out a new customer service solution (including training the representatives on it). The big win here was that, overwhelmingly, Stripe JustWorked. The software behaved the same for the sandbox as it did in production. It scaled well. There weren’t weird hiccups. When strange circumstances arose, there was a trail of events and logs to understand what happened.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Aside&lt;/p&gt;
&lt;p&gt;While in theory, JustWorks shouldn’t be so noteworthy, the reality is that many software solutions work fine in limited testing but don’t work well when scaled into production. So a product that consistently performs as documented gets high marks from me.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The ability to fully test code and functionality&lt;sup id="fnref:clock"&gt;&lt;a class="footnote-ref" href="#fn:clock"&gt;1&lt;/a&gt;&lt;/sup&gt; in a fully functional sandbox was an enormous win. I’m a huge fan of continuous-delivery style approaches, and Stripe sandboxes allowed code to be well tested before release. Additionally, very little Stripe behavior required manual intervention, which meant the project could be heavily automated, streamlining many processes and training procedures.&lt;/p&gt;
&lt;h3 id="maintenance-and-upgrades"&gt;Maintenance and Upgrades&lt;/h3&gt;
&lt;p&gt;Finally, Stripe was incredibly low maintenance after the initial launch. Stripe showed excellent legacy support, so even though Stripe released a number of new capabilities – in some cases replacing existing features – upgrades were only needed when the new capabilities were designed. In a few cases, the documentation got a bit rusty about old features, but that’s a minor gripe. The other big wins in this category:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stripe proved to be exceptionally reliable.&lt;/li&gt;
&lt;li&gt;Stripe went above and beyond to communicate when something went wrong and make it right.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last couple points aren’t just technical capability, but reflect a culture – and employees – who make the choice that wins long-term trust, even accepting a short-term cost (e.g. admitting a mistake).&lt;/p&gt;
&lt;h2 id="product"&gt;Product&lt;/h2&gt;
&lt;p&gt;I’ve covered why the Stripe process was so enjoyable. But what qualities made it such a good product to work with?&lt;/p&gt;
&lt;h3 id="documentation"&gt;Documentation&lt;/h3&gt;
&lt;p&gt;Stripe does a really good job – among the best I’ve seen – at its documentation across multiple angles: the introduction to the concepts, the initial implementation, and then the technical reference for any additional – perhaps more complex – work. They recently open sourced their documentation system, &lt;a href="https://markdoc.dev/"&gt;Markdoc&lt;/a&gt;. The fact that they have a customized documentation language gives a sense of how much they invested in thinking through their documentation. Besides the completeness and solid organization, touches such as code samples in most common languages along with solid open source library support made it easy to use Stripe.&lt;/p&gt;
&lt;h3 id="appropriate-abstraction"&gt;Appropriate Abstraction&lt;/h3&gt;
&lt;p&gt;The second observation I’ll make is that, generally, Stripe found ways to appropriately abstract billing into easy-to-understand concepts. Billing scenarios can be complicated. Tax law almost always is. Financial regulations and banking networks certainly are. But repeatedly, Stripe found ways of making these complex systems be understandable black boxes. For example, having a unified payment concept for payments across the globe is incredibly useful, instead of pondering how to handle prepaid credit cards vs. ACH or when and how to apply the new European secure payment requirements. This reduction of complexity into an appropriate usable unified abstraction is incredibly powerful.&lt;/p&gt;
&lt;h3 id="reliability"&gt;Reliability&lt;/h3&gt;
&lt;p&gt;I’ve previously mentioned the JustWorked characteristic of Stripe as it scaled upward. Beyond that, though, Stripe had clearly thought through their common failure modes and how to minimize the customer impact. For example, it wasn’t uncommon to get an e-mail telling us that access to some set of data for audits would be delayed longer than usual (typically 2 days instead of 1). That notification wasn’t great, but Stripe was quick and upfront to tell us when the delays occurred – and the data accessibility wasn’t on the critical path to the rest of Stripe’s capabilities. It probably helped that, originally, this data typically took 3 days to become available, but over time, Stripe improved it so that it was typically available within a day. Likewise, the handful of times that something went wrong (e.g., a tax law miscalculation), Stripe was quick to own the mistake, give a clear statement of impact, and work with my company to make it right. Sure, I’d prefer not to ever have anything go wrong, but that’s likely impossible with the complexity of what Stripe is dealing with. If flawless isn’t possible, Stripe’s approach of contained fallout, good ownership, and amazing reliability is a close second.&lt;/p&gt;
&lt;h3 id="customer-support"&gt;Customer Support&lt;/h3&gt;
&lt;p&gt;Stripe’s customer support was consistently friendly, responsive, and able to understand/resolve concerns and questions. Some of the questions that I threw at them were fairly complex, and they were able to get meaningful responses, often from the development teams. I didn’t always like the answer (e.g., no, we’re not changing that behavior), but I was confident that they understood the concern and why it wasn’t user friendly. In many ways, this behavior seems like it should be a baseline, especially when customer support is a paid feature, but too often customer support is more like an &lt;a href="https://en.wikipedia.org/wiki/ELIZA"&gt;Eliza instance&lt;/a&gt; than an actual person. Again, doing the basics with excellence gets high marks here.&lt;/p&gt;
&lt;h3 id="testability-and-debugging"&gt;Testability and Debugging&lt;/h3&gt;
&lt;p&gt;Stripe has also clearly thought through the engineering challenges around testing and debugging a complex system. Three examples of this consideration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The fully functional sandbox, which can be spun up in minutes for prototyping, for example, is not just good for sales and prototyping, but provides a reliable way to almost completely test code prior to release. (Stripe has been gradually adding capabilities, so it may now be fully testable.) The sandbox can be configured via the API, which facilitates a configuration-as-code approach.&lt;/li&gt;
&lt;li&gt;The webhooks have automatic retry (up to 3 days in production), which makes it very easy to recover from outages in the receiving system. That is, start with the requirements that (a) webhook handling be idempotent and (b) that the webhook response is only a 200 if all parts of the handler successfully complete. Then Stripe will keep retrying the webhook until it succeeds or expires, which gives a long window to recover. As a bonus, Stripe will e-mail if it detects a sudden spike in the error rate.&lt;/li&gt;
&lt;li&gt;Stripe provides an excellent set of event and call logs for each object (e.g., invoice, account, customer). These are sufficient to reconstruct the story of how some scenario or another ended up happening. They are also fantastic for reporting bugs to Stripe - “See event log X12345 where Y, then 10s later event log X54321 where Y’ – how is that possible?”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="improvements-legacy-support-and-tlc"&gt;Improvements, Legacy Support, and TLC&lt;/h3&gt;
&lt;p&gt;I learned a lot more about how to make a good product from Stripe, but I’ll note just a few more points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stripe continued to deliver improvements. In fact, I’d guess that some of the annoyances I allude to in this article have been corrected by now&lt;sup id="fnref:feb"&gt;&lt;a class="footnote-ref" href="#fn:feb"&gt;2&lt;/a&gt;&lt;/sup&gt;. From improved payment models to faster Sigma data availability to improved clocks for testing to updates for different financial regulations, there was a stream of new and useful capability. In the last few years, Stripe has put enormous work into their codeless capabilities where they host a lightly-branded subscription management system, which I would take a close look at with an eye toward minimizing project complexity if I were to take on another billing project.&lt;/li&gt;
&lt;li&gt;Stripe maintained excellent legacy support. While Stripe’s API changes are generally backward compatible, each API call is allowed to specify which version of the API it is using. This means that Stripe has excellent backward API support for years, even if a variable name or call is deprecated or changed. I don’t believe Stripe ever required an upgrade to continue operating; all upgrades were to either keep current or access new functionality.&lt;/li&gt;
&lt;li&gt;Stripe makes smart choices in features. For example, the metadata fields are incredibly useful in reducing development complexity; the ability to export &lt;a href="https://stripe.com/newsroom/news/stripe-data-pipeline"&gt;Sigma data&lt;/a&gt; to Snowflake&lt;sup id="fnref:snowflake"&gt;&lt;a class="footnote-ref" href="#fn:snowflake"&gt;3&lt;/a&gt;&lt;/sup&gt; goes a long way to make Stripe a great tool rather than a walled garden.&lt;/li&gt;
&lt;li&gt;Stripe iterates. Having seen some of their betas, the questions they ask, and the way the product changes, they clearly have a customer-centric view where they are evaluating customer response and adjusting the product. I wouldn’t necessarily call it Agile – probably hard to be fully Agile with financial regulations – but there is clearly a build-test-react-test-react mentality behind their work rather than a build-it-once approach.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="weaknesses"&gt;Weaknesses&lt;/h1&gt;
&lt;p&gt;As one might expect from my review so far, Stripe nails so much. I’d overwhelmingly recommend using Stripe. That said, there are a few points that keep me from giving it an A+:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Complex scenarios&lt;/em&gt;: My experience was that, when it comes to the intersection of multiple features (e.g. taxes plus schedules plus prorations), Stripe too often had not adequately considered the proper behavior or tested outcomes. I realize this is nit-picky – most customers clearly aren’t leveraging multiple features simultaneously in their billing systems – and stems from so much that Stripe does well, but I wish they would go just a bit further.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Documentation of complex behaviors&lt;/em&gt;: While Stripe’s documentation is fantastic, both for introducing topics and providing references, complex behaviors involving three or four features are often underdocumented and difficult to reconstruct.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Development speed&lt;/em&gt;: Stripe is cautious in adding new features. Given their dedication to quality, the unforgiving nature of financial transactions, their excellent abstractions, and wanting practical real-world feedback, I get why development sometimes seems slow on obvious features. That said, I wish they’d move a bit faster at times.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pricing model&lt;/em&gt;: My experience with Stripe is that complex technical bugs didn’t get attention without paid customer support. I’m sure there is good business rationale behind this choice, but I would rather see a company that considered product excellence to include complete documentation and bug fixes as part of the product itself.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Configuration-as-code&lt;/em&gt;: While Stripe provides many excellent sandboxes and even ways of migrating sandbox settings to production, there isn’t true configuration-as-code support where one can define all the settings in a repository and then push those settings to any sandbox (or production). I get the challenges in supporting this, but it would make it a lot easier to guarantee that the sandbox testing was exactly configured correctly – and that the tested configuration was then exactly the one deployed to production.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Android/iOS gardens&lt;/em&gt;: One of Stripe’s great strengths is the ability to be a one-stop-shop for all-things-billing - payments, refunds, taxes, and so on. The exception to this is the Google and Apple application stores, which require&lt;sup id="fnref:require"&gt;&lt;a class="footnote-ref" href="#fn:require"&gt;4&lt;/a&gt;&lt;/sup&gt; certain transactions to go through Google or Apple systems. Google and Apple almost certainly want to keep their slice of the pie and not share with Stripe, so I can’t fault Stripe here. Nevertheless, it introduces a hole: If I have to deal with the Apple and Google payment systems anyway, do I still need Stripe?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="recap"&gt;Recap&lt;/h1&gt;
&lt;p&gt;So that’s a breakdown of what made Stripe a fantastic product from project inception to launch to maintenance: A combination of attention to excellence, understanding the needs of the customer both in product and process, and applying many different disciplines well. It’s a good case study for thinking through a software product and how to make it exceptional.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:clock"&gt;
&lt;p&gt;One problem during the project was testing long-running operations (such as monthly billing). My team implemented some solutions such as daily billing as a stop gap; since then Stripe has added accelerated clocks to better support such operations. &lt;a class="footnote-backref" href="#fnref:clock" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:feb"&gt;
&lt;p&gt;For example, maybe unpaid February subscriptions will actually cancel when they are not paid in 28 days rather than issuing the March invoice mere moments before they expire. Yes, this is probably my largest unresolved gripe with the system. &lt;a class="footnote-backref" href="#fnref:feb" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:snowflake"&gt;
&lt;p&gt;Judging by that link, they’ve added Redshift as an option as well; I’d anticipate other popular options will be added at some point. &lt;a class="footnote-backref" href="#fnref:snowflake" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:require"&gt;
&lt;p&gt;Or at least, effectively give the option to go through the stores. Recent court rulings may have introduced some changes here. &lt;a class="footnote-backref" href="#fnref:require" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="technology experience reviews"></category><category term="stripe"></category><category term="reviews"></category><category term="exemplars"></category></entry><entry><title>Blog Revamp</title><link href="https://rayalan.github.io/blog-revamp.html" rel="alternate"></link><published>2022-06-06T00:00:00-04:00</published><updated>2022-06-06T00:00:00-04:00</updated><author><name>Alan Ray</name></author><id>tag:rayalan.github.io,2022-06-06:/blog-revamp.html</id><summary type="html">
&lt;p&gt;It’s been about five years since my last attempt at a blog, in which I think I wrote a post&lt;sup id="fnref:old-blog"&gt;&lt;a class="footnote-ref" href="#fn:old-blog"&gt;2&lt;/a&gt;&lt;/sup&gt;. With a bit of spare time on my hands, I want to revamp my setup…&lt;/p&gt;
&lt;h1 id="revamp-goals"&gt;Revamp Goals&lt;/h1&gt;
&lt;p&gt;In no particular order, my goal was to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Revisit the technology …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">
&lt;p&gt;It’s been about five years since my last attempt at a blog, in which I think I wrote a post&lt;sup id="fnref:old-blog"&gt;&lt;a class="footnote-ref" href="#fn:old-blog"&gt;2&lt;/a&gt;&lt;/sup&gt;. With a bit of spare time on my hands, I want to revamp my setup…&lt;/p&gt;
&lt;h1 id="revamp-goals"&gt;Revamp Goals&lt;/h1&gt;
&lt;p&gt;In no particular order, my goal was to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Revisit the technology selection (especially &lt;a href="https://ablog.readthedocs.io/"&gt;ABlog&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Use a DevOps-oriented approach (e.g. text, source control).&lt;/li&gt;
&lt;li&gt;Trivially include &lt;a href="https://mermaid-js.github.io/mermaid/#/"&gt;Mermaid.js&lt;/a&gt; diagrams.&lt;/li&gt;
&lt;li&gt;Trivially include simple charts.&lt;/li&gt;
&lt;li&gt;Hone and improve my skills.&lt;/li&gt;
&lt;li&gt;Spend less than a week creating the platform.&lt;/li&gt;
&lt;li&gt;Make the blog look decent initially.&lt;/li&gt;
&lt;li&gt;Be prepared to iterate in the future.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="rationale"&gt;Rationale&lt;/h1&gt;
&lt;p&gt;Why these goals?&lt;/p&gt;
&lt;p&gt;Overall, I write to talk about the art of software development. My primary medium is words, sentences, articles. I lean heavily toward longer, more thoughtful pieces. So a blog, not a Twitter or YouTube account.&lt;/p&gt;
&lt;p&gt;Yet maintaining interest with a long wall of words is hard. Furthermore, the complexities of software development often benefit from pictures to demonstrate key concepts. I’ve really enjoyed working with Mermaid.js over the last couple years, and it can trivially do about 80% of what I envision wanting for visualizations. However, Mermaid can’t (yet) do simple illustrations such as Jessica Hagy does with &lt;a href="https://thisisindexed.com/"&gt;Indexed&lt;/a&gt;. So I need to be able to do a bit more than just what Mermaid supports.&lt;/p&gt;
&lt;p&gt;As a long-time developer, text is easy to edit, merge, and otherwise manage in source control. Something like Markdown makes it easy to reskin the whole blog later without touching any of the content. Tools like Mermaid.js are useful precisely because they allow text to be easily rendered as a visualization, giving the best of both worlds.&lt;/p&gt;
&lt;p&gt;For the project, I want to find the right balance between getting it set up enough that I don’t have to quickly revisit my choices, and not have to worry about getting every &lt;em&gt;i&lt;/em&gt; dotted before working on writing. I know that I tend to ignore aesthetics, but a hideous blog will quickly turn others away, so it needs some early attention.&lt;/p&gt;
&lt;p&gt;Finally, I wanted to revisit the technology selection for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For as rarely as I write, I find ABlog and &lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; to be a bit too complicated for my tastes.&lt;/li&gt;
&lt;li&gt;I last picked the technology stack for my blog five years ago; now I know more, and the tech landscape has changed.&lt;/li&gt;
&lt;li&gt;ABlog is no longer with its original developer and almost entirely in maintenance mode. I’ve hit a few sharp edges when trying to integrate it with other Sphinx plugins, and I don’t really want to keep dealing with that.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="execution"&gt;Execution&lt;/h1&gt;
&lt;p&gt;So how did the plan go?&lt;/p&gt;
&lt;h2 id="markdown-and-pelican"&gt;Markdown and Pelican&lt;/h2&gt;
&lt;p&gt;A bit of Googling turned up &lt;a href="https://getpelican.com/"&gt;Pelican&lt;/a&gt; as a simple way to generate static sites from text. It supported multiple themes, seemed more straight forward, and already supported a Mermaid extension. From prior experience, I knew that GitHub was an easy way to host a static site, and there was already existing Python/Pelican support for exactly that via &lt;a href="https://github.com/c-w/ghp-import"&gt;ghp-import&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’d also wanted to consider MarkDown as it has become the lingua franca for so much documentation&lt;sup id="fnref:markdoc"&gt;&lt;a class="footnote-ref" href="#fn:markdoc"&gt;1&lt;/a&gt;&lt;/sup&gt;. Diving into MarkDown extensions revealed that a number of improvements had been made that brought it close to par with reStructuredText, at least for my needs – in particular, tables of contents, footnotes, definition lists, and metadata.&lt;/p&gt;
&lt;p&gt;Spinning up a basic Python+Pelican blog went crazy fast. Pelican had good documentation, a quickstart feature along with development support for local hosting, caching, and automatic rebuilding on change. Once set up, I had a really fast writing loop. The biggest glitch was some experimentation around properly loading and configuring the Markdown extensions, which were poorly documented.&lt;/p&gt;
&lt;h2 id="elegant"&gt;Elegant&lt;/h2&gt;
&lt;p&gt;Pelican claims a list of &lt;a href="http://www.pelicanthemes.com/"&gt;127 themes&lt;/a&gt;. Good design on Pelican’s part made it trivial to swap out themes, and I quickly found a very thoughtful theme called &lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;Elegant&lt;/a&gt;, which was carefully thought out. Their documentation entries on design philosophy reflect a deep interest in user experience and brought in lots of cool features such as subtitles, series, tags, and automatic interlinking. It also supported Pelican plugins such as comments (e.g., Disqus), analytics (Google), and a reasonable static page display.&lt;/p&gt;
&lt;p&gt;However, a few problems started cropping up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pelican is changing over its plugin system, and now that I had a table of contents-supporting theme, it was clear extracting the table of contents through Pelican required a bit of elbow grease.&lt;/li&gt;
&lt;li&gt;Elegant’s search expects to use a plugin called Tipue Search, which is deprecated. Worse yet, Elegant hasn’t been updated to use the replacement (which doesn’t appear to be Windows friendly) and lacks a configurable option to disable search.&lt;/li&gt;
&lt;li&gt;Pelican/Elegant don’t support overriding the theme in a way that supports keeping Elegant’s code unmodified for easy updates.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://elegant.oncrashreboot.com/"&gt;Elegant demonstration page&lt;/a&gt; (which I used to decide Elegant was a good theme) has gone dark. It might be a temporary glitch, but given the lack of Elegant development for a couple years and Elegant being a theme for a static site, it suggests that its maintainers really have moved on.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="adjustments"&gt;Adjustments&lt;/h3&gt;
&lt;p&gt;I ended up making a few changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I decided I wouldn’t support search functionality for now. It’s a fantastic feature, but getting &lt;a href="https://github.com/pelican-plugins/search"&gt;Stork&lt;/a&gt; (the Tipue Search replacement) running on a Windows box where I don’t even have WSL configured isn’t worth the time. In the near term, tags and categories should provide plenty of visibility into my small blog, and I can iterate on search in the future. In the very near term, I can even live with a broken search box.&lt;/li&gt;
&lt;li&gt;I took the old Pelican plugin for table of contents and placed a copy (it is about 70 lines) in my blog. In the future, I can look into making the native Markdown table of contents extension play with Pelican/Elegant’s expectations, or perhaps the plugin will be made a standard Pelican plugin. For now, the local file is a small nuisance.&lt;/li&gt;
&lt;li&gt;I forked the Elegant theme and made it a submodule rather than installing it via &lt;a href="https://docs.getpelican.com/en/stable/pelican-themes.html"&gt;pelican-themes&lt;/a&gt;. The downside is that applying Elegant updates will be significantly harder than I would prefer – although there don’t seem to be many these days. On the plus side, I can make personal modifications such as removing the search box, making search box optional, or customizing the CSS.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For now, the possibility that Elegant is end-of-life doesn’t concern me. It looks better than I can quickly do on my own, gives me a jumping off point for the feature, and is disconnected enough from Pelican or my content that I can iterate in the future.&lt;/p&gt;
&lt;h2 id="mermaid"&gt;Mermaid&lt;/h2&gt;
&lt;p&gt;In theory, &lt;a href="https://pypi.org/project/md-mermaid/"&gt;Mermaid support&lt;/a&gt; should have been about one line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install md-mermaid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But that didn’t work because of some error about md_globals. Diving into that revealed that the Markdown interface had progressed but that the md-mermaid extension hadn’t been updated - despite someone posting the patch about a month ago.&lt;/p&gt;
&lt;p&gt;Additionally, I realized that the plugin assumed that the Mermaid JS files were already included in the HTML. Because I prototyped the Mermaid integration before selecting Elegant, I was hoping to avoid messing with the CSS templates.&lt;/p&gt;
&lt;h3 id="adjustments_1"&gt;Adjustments&lt;/h3&gt;
&lt;p&gt;As a result, I forked md-mermaid to support:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The most modern Markdown interface&lt;/li&gt;
&lt;li&gt;Configuration options for which Mermaid url and version&lt;/li&gt;
&lt;li&gt;Configuration options for automatically including the Mermaid JS files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an added bonus, these changes will make it far easier to passing styling options to Mermaid if I want a more consistent look. Hopefully the md-mermaid plugin isn’t dead, and my changes can be re-integrated.&lt;/p&gt;
&lt;h3 id="demonstration"&gt;Demonstration&lt;/h3&gt;
&lt;p&gt;What’s the end result? Well, here’s a quick flowchart of my plan:&lt;/p&gt;
&lt;div class="mermaid"&gt;

flowchart LR
   plan --&amp;gt; pelican --&amp;gt; md-mermaid
   pelican --&amp;gt; elegant
   pelican --&amp;gt; svg
   svg --&amp;gt; success
   elegant --&amp;gt; success
   md-mermaid --&amp;gt; success
&lt;/div&gt;
&lt;p&gt;It may get a bit sharper as I work on styling in the future, but it’s a lot better than a wall of text.&lt;/p&gt;
&lt;h2 id="other-charts-svg"&gt;Other charts (SVG)&lt;/h2&gt;
&lt;p&gt;Finally, I wanted to be able to do a bit more with simple charts and diagrams than Mermaid supports. Diving into it, there is a long list of options, from D3 to free plugins to commercial plugins.&lt;/p&gt;
&lt;p&gt;I ended up settling on SVG for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dirt simple for basic functionality&lt;/li&gt;
&lt;li&gt;Text-based, keeping with the philosophy of configuration-as-code, source control, and the like.&lt;/li&gt;
&lt;li&gt;Capable of far more advanced capabilities if I need it in the future.&lt;/li&gt;
&lt;li&gt;Supports CSS styling&lt;/li&gt;
&lt;li&gt;Many tools support exporting to SVG, letting me pick from a wide array of tools in the future to make my diagrams.&lt;/li&gt;
&lt;li&gt;Markdown already supported including SVGs via including images&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="adjustments_2"&gt;Adjustments&lt;/h3&gt;
&lt;p&gt;My first attempt at SVGs failed miserably:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;![My first diagram](/assets/images/diagram-first.svg)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It turns out that SVGs that are included as images can’t be styled by CSS. I’m sure there’s a great reason why SVGs have three slightly incompatible ways of being used, but it’s a prime example of why software is difficult: I want to include an image in my Markdown and have it JustWork, and it won’t because of weird technical nuance.&lt;/p&gt;
&lt;p&gt;After digging through Stack Overflow, tutorials, and some experimentation, I figured out how to use an HTML object directly in Markdown text to specify an object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/svg+xml"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;data=&lt;/span&gt;&lt;span class="s"&gt;"images/simple-svg-sample.svg"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Simple&lt;span class="w"&gt; &lt;/span&gt;SVG&lt;span class="w"&gt; &lt;/span&gt;Image&lt;span class="w"&gt; &lt;/span&gt;(unstyled)&lt;span class="cm"&gt;&amp;lt;!-- fallback image in CSS --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It isn’t as clean as the original syntax, but it works. I also figured out how to specify the viewbox so that the right column of the Elegant theme overlaps with the images.&lt;/p&gt;
&lt;h3 id="demonstration_1"&gt;Demonstration&lt;/h3&gt;
&lt;p&gt;Here’s my first simple SVG image:&lt;/p&gt;
&lt;object class="svg" data="images/simple-svg-sample.svg" type="image/svg+xml"&gt;Simple SVG Image (unstyled)&lt;!-- fallback image in CSS --&gt;&lt;/object&gt;
&lt;p&gt;And here’s one with some labels and a bit more styling:&lt;/p&gt;
&lt;object class="svg" data="images/inline-svg-sample.svg" type="image/svg+xml"&gt;Styled inline SVG Image&lt;!-- fallback image in CSS --&gt;&lt;/object&gt;
&lt;p&gt;It isn’t perfect by a long shot, but the basic capability is there. In the future, maybe I’ll look for a way to teach Markdown to include SVG images inline.&lt;/p&gt;
&lt;h1 id="retrospective"&gt;Retrospective&lt;/h1&gt;
&lt;p&gt;Looking back, how did the project go?&lt;/p&gt;
&lt;p&gt;Overall, I’m very happy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The tech stack is revamped with a nicer theme; I can easily use diagrams, and I have understood several future problems if I ever want to tackle them.&lt;/li&gt;
&lt;li&gt;I ended up with a text-based solution that supports experimentation, quick rollouts, and reversions.&lt;/li&gt;
&lt;li&gt;The week I spent was in line with my expectations and included defining several future possible iterations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lessons learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tying technologies together is always trickier than it first appears.&lt;/li&gt;
&lt;li&gt;Windows (the operating system) is definitely a second-class citizen when it comes to many technologies (such as Stork). It’s hard to get a clean, simple, and full-featured technology stack for Windows.&lt;/li&gt;
&lt;li&gt;I wonder if a JS-based solution (e.g. Markdoc) would have yielded a cleaner solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://unpkg.com/mermaid/dist/mermaid.min.js"&gt;&lt;/script&gt;
&lt;script&gt;mermaid.initialize({startOnLoad:true});&lt;/script&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:markdoc"&gt;
&lt;p&gt;Stripe recently released &lt;a href="https://markdoc.dev/"&gt;Markdoc&lt;/a&gt;, which is a bit beyond my personal efforts right now, but very much has my attention as a documentation system. &lt;a class="footnote-backref" href="#fnref:markdoc" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:old-blog"&gt;
&lt;p&gt;In fact, I didn’t even get all the blog committed to source control (oops!), so I ended up pulling the content from the published blog. However, my old system did provide the original reStructuredText for published pages, so getting the content was trivial. A good reminder of both how well configuration as code works as well as the importance of good processes. &lt;a class="footnote-backref" href="#fnref:old-blog" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="projects"></category><category term="ablog"></category><category term="python"></category><category term="js"></category><category term="mermaid"></category><category term="markdown"></category><category term="restructured-text"></category><category term="svg"></category><category term="charts"></category></entry></feed>